question,query,schema
Count the number of classrooms in Lamberton.,SELECT count(*) FROM classroom WHERE building  =  'Lamberton',* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?,SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20,* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
Show ids of students who play video game and play sports.,SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games,* (Table: SportsInfo) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | GameID (Table: Video_Games) | GName (Table: Video_Games) | GType (Table: Video_Games) | StuID (Table: Plays_Games) | GameID (Table: Plays_Games) | Hours_Played (Table: Plays_Games) | StuID (Table: SportsInfo) | SportName (Table: SportsInfo) | HoursPerWeek (Table: SportsInfo) | GamesPlayed (Table: SportsInfo) | OnScholarship (Table: SportsInfo)
What are the official names of cities that have hosted more than one competition?,SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1,* (Table: competition_record) | City_ID (Table: city) | Official_Name (Table: city) | Status (Table: city) | Area_km_2 (Table: city) | Population (Table: city) | Census_Ranking (Table: city) | Farm_ID (Table: farm) | Year (Table: farm) | Total_Horses (Table: farm) | Working_Horses (Table: farm) | Total_Cattle (Table: farm) | Oxen (Table: farm) | Bulls (Table: farm) | Cows (Table: farm) | Pigs (Table: farm) | Sheep_and_Goats (Table: farm) | Competition_ID (Table: farm_competition) | Year (Table: farm_competition) | Theme (Table: farm_competition) | Host_city_ID (Table: farm_competition) | Hosts (Table: farm_competition) | Competition_ID (Table: competition_record) | Farm_ID (Table: competition_record) | Rank (Table: competition_record)
"Show the customer name, customer address city, date from, and date to for each customer address history.","SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id",* (Table: Order_Items) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_number (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | contact_id (Table: Contacts) | customer_id (Table: Contacts) | gender (Table: Contacts) | first_name (Table: Contacts) | last_name (Table: Contacts) | contact_phone (Table: Contacts) | customer_id (Table: Customer_Address_History) | address_id (Table: Customer_Address_History) | date_from (Table: Customer_Address_History) | date_to (Table: Customer_Address_History) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_date (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | order_quantity (Table: Order_Items)
Find the id of courses which are registered or attended by student whose id is 121?,SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121,* (Table: Candidate_Assessments) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | person_id (Table: People) | first_name (Table: People) | middle_name (Table: People) | last_name (Table: People) | cell_mobile_number (Table: People) | email_address (Table: People) | login_name (Table: People) | password (Table: People) | student_id (Table: Students) | student_details (Table: Students) | course_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | other_details (Table: Courses) | person_address_id (Table: People_Addresses) | person_id (Table: People_Addresses) | address_id (Table: People_Addresses) | date_from (Table: People_Addresses) | date_to (Table: People_Addresses) | student_id (Table: Student_Course_Registrations) | course_id (Table: Student_Course_Registrations) | registration_date (Table: Student_Course_Registrations) | student_id (Table: Student_Course_Attendance) | course_id (Table: Student_Course_Attendance) | date_of_attendance (Table: Student_Course_Attendance) | candidate_id (Table: Candidates) | candidate_details (Table: Candidates) | candidate_id (Table: Candidate_Assessments) | qualification (Table: Candidate_Assessments) | assessment_date (Table: Candidate_Assessments) | asessment_outcome_code (Table: Candidate_Assessments)
Find the name of the youngest organization.,SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1,* (Table: Party_Services) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | town_city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | service_id (Table: Services) | service_type_code (Table: Services) | service_name (Table: Services) | service_descriptio (Table: Services) | form_id (Table: Forms) | form_type_code (Table: Forms) | service_id (Table: Forms) | form_number (Table: Forms) | form_name (Table: Forms) | form_description (Table: Forms) | individual_id (Table: Individuals) | individual_first_name (Table: Individuals) | individual_middle_name (Table: Individuals) | inidividual_phone (Table: Individuals) | individual_email (Table: Individuals) | individual_address (Table: Individuals) | individual_last_name (Table: Individuals) | organization_id (Table: Organizations) | date_formed (Table: Organizations) | organization_name (Table: Organizations) | uk_vat_number (Table: Organizations) | party_id (Table: Parties) | payment_method_code (Table: Parties) | party_phone (Table: Parties) | party_email (Table: Parties) | individual_id (Table: Organization_Contact_Individuals) | organization_id (Table: Organization_Contact_Individuals) | date_contact_from (Table: Organization_Contact_Individuals) | date_contact_to (Table: Organization_Contact_Individuals) | party_id (Table: Party_Addresses) | address_id (Table: Party_Addresses) | date_address_from (Table: Party_Addresses) | address_type_code (Table: Party_Addresses) | date_address_to (Table: Party_Addresses) | party_id (Table: Party_Forms) | form_id (Table: Party_Forms) | date_completion_started (Table: Party_Forms) | form_status_code (Table: Party_Forms) | date_fully_completed (Table: Party_Forms) | booking_id (Table: Party_Services) | customer_id (Table: Party_Services) | service_id (Table: Party_Services) | service_datetime (Table: Party_Services) | booking_made_date (Table: Party_Services)
"find the highest support percentage, lowest consider rate and oppose rate of all candidates.","SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",* (Table: people) | Candidate_ID (Table: candidate) | People_ID (Table: candidate) | Poll_Source (Table: candidate) | Date (Table: candidate) | Support_rate (Table: candidate) | Consider_rate (Table: candidate) | Oppose_rate (Table: candidate) | Unsure_rate (Table: candidate) | People_ID (Table: people) | Sex (Table: people) | Name (Table: people) | Date_of_Birth (Table: people) | Height (Table: people) | Weight (Table: people)
What are the numbers of races for each constructor id?,"SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
Find the number of phones for each accreditation type.,"SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type",* (Table: phone) | Model_name (Table: chip_model) | Launch_year (Table: chip_model) | RAM_MiB (Table: chip_model) | ROM_MiB (Table: chip_model) | Slots (Table: chip_model) | WiFi (Table: chip_model) | Bluetooth (Table: chip_model) | Graphics_mode (Table: screen_mode) | Char_cells (Table: screen_mode) | Pixels (Table: screen_mode) | Hardware_colours (Table: screen_mode) | used_kb (Table: screen_mode) | map (Table: screen_mode) | Type (Table: screen_mode) | Company_name (Table: phone) | Hardware_Model_name (Table: phone) | Accreditation_type (Table: phone) | Accreditation_level (Table: phone) | Date (Table: phone) | chip_model (Table: phone) | screen_mode (Table: phone)
"Who are the members of the club named ""Bootup Baltimore""? Give me their last names.","SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  ""Bootup Baltimore""",* (Table: Member_of_club) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | ClubID (Table: Club) | ClubName (Table: Club) | ClubDesc (Table: Club) | ClubLocation (Table: Club) | StuID (Table: Member_of_club) | ClubID (Table: Member_of_club) | Position (Table: Member_of_club)
What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?,"SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  ""OTHA"" AND T2.lastname  =  ""MOYER""",* (Table: teachers) | LastName (Table: list) | FirstName (Table: list) | Grade (Table: list) | Classroom (Table: list) | LastName (Table: teachers) | FirstName (Table: teachers) | Classroom (Table: teachers)
What are the different names for each station that has ever had 7 bikes available?,SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7,* (Table: weather) | id (Table: station) | name (Table: station) | lat (Table: station) | long (Table: station) | dock_count (Table: station) | city (Table: station) | installation_date (Table: station) | station_id (Table: status) | bikes_available (Table: status) | docks_available (Table: status) | time (Table: status) | id (Table: trip) | duration (Table: trip) | start_date (Table: trip) | start_station_name (Table: trip) | start_station_id (Table: trip) | end_date (Table: trip) | end_station_name (Table: trip) | end_station_id (Table: trip) | bike_id (Table: trip) | subscription_type (Table: trip) | zip_code (Table: trip) | date (Table: weather) | max_temperature_f (Table: weather) | mean_temperature_f (Table: weather) | min_temperature_f (Table: weather) | max_dew_point_f (Table: weather) | mean_dew_point_f (Table: weather) | min_dew_point_f (Table: weather) | max_humidity (Table: weather) | mean_humidity (Table: weather) | min_humidity (Table: weather) | max_sea_level_pressure_inches (Table: weather) | mean_sea_level_pressure_inches (Table: weather) | min_sea_level_pressure_inches (Table: weather) | max_visibility_miles (Table: weather) | mean_visibility_miles (Table: weather) | min_visibility_miles (Table: weather) | max_wind_Speed_mph (Table: weather) | mean_wind_speed_mph (Table: weather) | max_gust_speed_mph (Table: weather) | precipitation_inches (Table: weather) | cloud_cover (Table: weather) | events (Table: weather) | wind_dir_degrees (Table: weather) | zip_code (Table: weather)
Which players are from Indonesia?,"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  ""Indonesia""",* (Table: player) | Country_id (Table: country) | Country_name (Table: country) | Capital (Table: country) | Official_native_language (Table: country) | Team_id (Table: team) | Name (Table: team) | Season (Table: match_season) | Player (Table: match_season) | Position (Table: match_season) | Country (Table: match_season) | Team (Table: match_season) | Draft_Pick_Number (Table: match_season) | Draft_Class (Table: match_season) | College (Table: match_season) | Player_ID (Table: player) | Player (Table: player) | Years_Played (Table: player) | Total_WL (Table: player) | Singles_WL (Table: player) | Doubles_WL (Table: player) | Team (Table: player)
Show the names and heights of buildings with at least two institutions founded after 1880.,"SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2",* (Table: protein) | building_id (Table: building) | Name (Table: building) | Street_address (Table: building) | Years_as_tallest (Table: building) | Height_feet (Table: building) | Floors (Table: building) | Institution_id (Table: Institution) | Institution (Table: Institution) | Location (Table: Institution) | Founded (Table: Institution) | Type (Table: Institution) | Enrollment (Table: Institution) | Team (Table: Institution) | Primary_Conference (Table: Institution) | building_id (Table: Institution) | common_name (Table: protein) | protein_name (Table: protein) | divergence_from_human_lineage (Table: protein) | accession_number (Table: protein) | sequence_length (Table: protein) | sequence_identity_to_human_protein (Table: protein) | Institution_id (Table: protein)
"What is the unit price of the tune ""Fast As a Shark""?","SELECT unit_price FROM tracks WHERE name = ""Fast As a Shark"";",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
What are the states with colleges that have enrollments less than the some other college?,SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college),* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?,"SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)",* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
Give me the name and description of the document type code RV.,"SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  ""RV""",* (Table: Documents_to_be_Destroyed) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Calendar_Date (Table: Ref_Calendar) | Day_Number (Table: Ref_Calendar) | Location_Code (Table: Ref_Locations) | Location_Name (Table: Ref_Locations) | Location_Description (Table: Ref_Locations) | Role_Code (Table: Roles) | Role_Name (Table: Roles) | Role_Description (Table: Roles) | Document_ID (Table: All_Documents) | Date_Stored (Table: All_Documents) | Document_Type_Code (Table: All_Documents) | Document_Name (Table: All_Documents) | Document_Description (Table: All_Documents) | Other_Details (Table: All_Documents) | Employee_ID (Table: Employees) | Role_Code (Table: Employees) | Employee_Name (Table: Employees) | Gender_MFU (Table: Employees) | Date_of_Birth (Table: Employees) | Other_Details (Table: Employees) | Document_ID (Table: Document_Locations) | Location_Code (Table: Document_Locations) | Date_in_Location_From (Table: Document_Locations) | Date_in_Locaton_To (Table: Document_Locations) | Document_ID (Table: Documents_to_be_Destroyed) | Destruction_Authorised_by_Employee_ID (Table: Documents_to_be_Destroyed) | Destroyed_by_Employee_ID (Table: Documents_to_be_Destroyed) | Planned_Destruction_Date (Table: Documents_to_be_Destroyed) | Actual_Destruction_Date (Table: Documents_to_be_Destroyed) | Other_Details (Table: Documents_to_be_Destroyed)
What are the maximum and minimum week on top of all volumes?,"SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume",* (Table: music_festival) | Artist_ID (Table: artist) | Artist (Table: artist) | Age (Table: artist) | Famous_Title (Table: artist) | Famous_Release_date (Table: artist) | Volume_ID (Table: volume) | Volume_Issue (Table: volume) | Issue_Date (Table: volume) | Weeks_on_Top (Table: volume) | Song (Table: volume) | Artist_ID (Table: volume) | ID (Table: music_festival) | Music_Festival (Table: music_festival) | Date_of_ceremony (Table: music_festival) | Category (Table: music_festival) | Volume (Table: music_festival) | Result (Table: music_festival)
List the object number of railways that do not have any trains.,SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train),* (Table: railway_manage) | Railway_ID (Table: railway) | Railway (Table: railway) | Builder (Table: railway) | Built (Table: railway) | Wheels (Table: railway) | Location (Table: railway) | ObjectNumber (Table: railway) | Train_ID (Table: train) | Train_Num (Table: train) | Name (Table: train) | From (Table: train) | Arrival (Table: train) | Railway_ID (Table: train) | Manager_ID (Table: manager) | Name (Table: manager) | Country (Table: manager) | Working_year_starts (Table: manager) | Age (Table: manager) | Level (Table: manager) | Railway_ID (Table: railway_manage) | Manager_ID (Table: railway_manage) | From_Year (Table: railway_manage)
Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping',* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.,SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry',* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
How many medicines were not approved by the FDA?,SELECT count(*) FROM medicine WHERE FDA_approved  =  'No',* (Table: medicine_enzyme_interaction) | id (Table: medicine) | name (Table: medicine) | Trade_Name (Table: medicine) | FDA_approved (Table: medicine) | id (Table: enzyme) | name (Table: enzyme) | Location (Table: enzyme) | Product (Table: enzyme) | Chromosome (Table: enzyme) | OMIM (Table: enzyme) | Porphyria (Table: enzyme) | enzyme_id (Table: medicine_enzyme_interaction) | medicine_id (Table: medicine_enzyme_interaction) | interaction_type (Table: medicine_enzyme_interaction)
Count how many appointments have been made in total.,SELECT count(*) FROM appointment,* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
Show the company name with the number of gas station.,"SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",* (Table: station_company) | Company_ID (Table: company) | Rank (Table: company) | Company (Table: company) | Headquarters (Table: company) | Main_Industry (Table: company) | Sales_billion (Table: company) | Profits_billion (Table: company) | Assets_billion (Table: company) | Market_Value (Table: company) | Station_ID (Table: gas_station) | Open_Year (Table: gas_station) | Location (Table: gas_station) | Manager_Name (Table: gas_station) | Vice_Manager_Name (Table: gas_station) | Representative_Name (Table: gas_station) | Station_ID (Table: station_company) | Company_ID (Table: station_company) | Rank_of_the_Year (Table: station_company)
What is the description of the restaurant type Sandwich?,"SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = ""Sandwich"";",* (Table: Visits_Restaurant) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | ResID (Table: Restaurant) | ResName (Table: Restaurant) | Address (Table: Restaurant) | Rating (Table: Restaurant) | ResID (Table: Type_Of_Restaurant) | ResTypeID (Table: Type_Of_Restaurant) | ResTypeID (Table: Restaurant_Type) | ResTypeName (Table: Restaurant_Type) | ResTypeDescription (Table: Restaurant_Type) | StuID (Table: Visits_Restaurant) | ResID (Table: Visits_Restaurant) | Time (Table: Visits_Restaurant) | Spent (Table: Visits_Restaurant)
"List the id, country, city and name of the airports ordered alphabetically by the name.","SELECT id ,  country ,  city ,  name FROM airport ORDER BY name",* (Table: flight) | id (Table: airport) | City (Table: airport) | Country (Table: airport) | IATA (Table: airport) | ICAO (Table: airport) | name (Table: airport) | id (Table: operate_company) | name (Table: operate_company) | Type (Table: operate_company) | Principal_activities (Table: operate_company) | Incorporated_in (Table: operate_company) | Group_Equity_Shareholding (Table: operate_company) | id (Table: flight) | Vehicle_Flight_number (Table: flight) | Date (Table: flight) | Pilot (Table: flight) | Velocity (Table: flight) | Altitude (Table: flight) | airport_id (Table: flight) | company_id (Table: flight)
Return the age of the person with the greatest height.,SELECT Age FROM people ORDER BY Height DESC LIMIT 1,* (Table: people) | Gymnast_ID (Table: gymnast) | Floor_Exercise_Points (Table: gymnast) | Pommel_Horse_Points (Table: gymnast) | Rings_Points (Table: gymnast) | Vault_Points (Table: gymnast) | Parallel_Bars_Points (Table: gymnast) | Horizontal_Bar_Points (Table: gymnast) | Total_Points (Table: gymnast) | People_ID (Table: people) | Name (Table: people) | Age (Table: people) | Height (Table: people) | Hometown (Table: people)
What is the birthday of the staff member with first name as Janessa and last name as Sawayn?,"SELECT date_of_birth FROM Staff WHERE first_name = ""Janessa"" AND last_name = ""Sawayn"";",* (Table: Lessons) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | staff_id (Table: Staff) | staff_address_id (Table: Staff) | nickname (Table: Staff) | first_name (Table: Staff) | middle_name (Table: Staff) | last_name (Table: Staff) | date_of_birth (Table: Staff) | date_joined_staff (Table: Staff) | date_left_staff (Table: Staff) | vehicle_id (Table: Vehicles) | vehicle_details (Table: Vehicles) | customer_id (Table: Customers) | customer_address_id (Table: Customers) | customer_status_code (Table: Customers) | date_became_customer (Table: Customers) | date_of_birth (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | amount_outstanding (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | cell_mobile_phone_number (Table: Customers) | customer_id (Table: Customer_Payments) | datetime_payment (Table: Customer_Payments) | payment_method_code (Table: Customer_Payments) | amount_payment (Table: Customer_Payments) | lesson_id (Table: Lessons) | customer_id (Table: Lessons) | lesson_status_code (Table: Lessons) | staff_id (Table: Lessons) | vehicle_id (Table: Lessons) | lesson_date (Table: Lessons) | lesson_time (Table: Lessons) | price (Table: Lessons)
What is the name of the body builder with the greatest body weight?,SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1,* (Table: people) | Body_Builder_ID (Table: body_builder) | People_ID (Table: body_builder) | Snatch (Table: body_builder) | Clean_Jerk (Table: body_builder) | Total (Table: body_builder) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Birth_Date (Table: people) | Birth_Place (Table: people)
What are the names of all the dorms that don't have any amenities?,SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity),* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
What are the names and number of works for all artists who have sung at least one song in English?,"SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  ""english"" GROUP BY T2.artist_name HAVING count(*)  >=  1",* (Table: song) | g_name (Table: genre) | rating (Table: genre) | most_popular_in (Table: genre) | artist_name (Table: artist) | country (Table: artist) | gender (Table: artist) | preferred_genre (Table: artist) | f_id (Table: files) | artist_name (Table: files) | file_size (Table: files) | duration (Table: files) | formats (Table: files) | song_name (Table: song) | artist_name (Table: song) | country (Table: song) | f_id (Table: song) | genre_is (Table: song) | rating (Table: song) | languages (Table: song) | releasedate (Table: song) | resolution (Table: song)
Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?,SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2,* (Table: election) | County_Id (Table: county) | County_name (Table: county) | Population (Table: county) | Zip_code (Table: county) | Party_ID (Table: party) | Year (Table: party) | Party (Table: party) | Governor (Table: party) | Lieutenant_Governor (Table: party) | Comptroller (Table: party) | Attorney_General (Table: party) | US_Senate (Table: party) | Election_ID (Table: election) | Counties_Represented (Table: election) | District (Table: election) | Delegate (Table: election) | Party (Table: election) | First_Elected (Table: election) | Committee (Table: election)
Give the maximum price and score for wines produced in the appelation St. Helena.,"SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  ""St. Helena""",* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
How many rooms in each building have a capacity of over 50?,"SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building",* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
What are the distinct names of customers who have purchased at least three different products?,SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3,* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.,SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000,* (Table: book) | Publication_ID (Table: publication) | Book_ID (Table: publication) | Publisher (Table: publication) | Publication_Date (Table: publication) | Price (Table: publication) | Book_ID (Table: book) | Title (Table: book) | Issues (Table: book) | Writer (Table: book)
What is the name of the bank branch with the greatest number of customers?,SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1,* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
Show the transportation method most people choose to get to tourist attractions.,SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1,* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
Return the official native languages of countries who have players from Maryland or Duke colleges.,"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  ""Maryland"" OR T2.College  =  ""Duke""",* (Table: player) | Country_id (Table: country) | Country_name (Table: country) | Capital (Table: country) | Official_native_language (Table: country) | Team_id (Table: team) | Name (Table: team) | Season (Table: match_season) | Player (Table: match_season) | Position (Table: match_season) | Country (Table: match_season) | Team (Table: match_season) | Draft_Pick_Number (Table: match_season) | Draft_Class (Table: match_season) | College (Table: match_season) | Player_ID (Table: player) | Player (Table: player) | Years_Played (Table: player) | Total_WL (Table: player) | Singles_WL (Table: player) | Doubles_WL (Table: player) | Team (Table: player)
find all dependent names who have a spouse relation with some employee.,SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse',* (Table: dept_locations) | Essn (Table: works_on) | Pno (Table: works_on) | Hours (Table: works_on) | Fname (Table: employee) | Minit (Table: employee) | Lname (Table: employee) | Ssn (Table: employee) | Bdate (Table: employee) | Address (Table: employee) | Sex (Table: employee) | Salary (Table: employee) | Super_ssn (Table: employee) | Dno (Table: employee) | Dname (Table: department) | Dnumber (Table: department) | Mgr_ssn (Table: department) | Mgr_start_date (Table: department) | Pname (Table: project) | Pnumber (Table: project) | Plocation (Table: project) | Dnum (Table: project) | Essn (Table: dependent) | Dependent_name (Table: dependent) | Sex (Table: dependent) | Bdate (Table: dependent) | Relationship (Table: dependent) | Dnumber (Table: dept_locations) | Dlocation (Table: dept_locations)
What are the ids and last names of all drivers who participated in the most races?,"SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
How many captains with younger than 50 are in each rank?,"SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank",* (Table: Ship) | Captain_ID (Table: captain) | Name (Table: captain) | Ship_ID (Table: captain) | age (Table: captain) | Class (Table: captain) | Rank (Table: captain) | Ship_ID (Table: Ship) | Name (Table: Ship) | Type (Table: Ship) | Built_Year (Table: Ship) | Class (Table: Ship) | Flag (Table: Ship)
What are the ids of courses without prerequisites?,SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq,* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
What are the names of all airports whose elevation is between -50 and 50?,SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50,* (Table: airlines) | rid (Table: routes) | dst_apid (Table: routes) | dst_ap (Table: routes) | src_apid (Table: routes) | src_ap (Table: routes) | alid (Table: routes) | airline (Table: routes) | codeshare (Table: routes) | apid (Table: airports) | name (Table: airports) | city (Table: airports) | country (Table: airports) | x (Table: airports) | y (Table: airports) | elevation (Table: airports) | iata (Table: airports) | icao (Table: airports) | alid (Table: airlines) | name (Table: airlines) | iata (Table: airlines) | icao (Table: airlines) | callsign (Table: airlines) | country (Table: airlines) | active (Table: airlines)
What are the distinct move in dates of the residents?,SELECT DISTINCT date_moved_in FROM residents,* (Table: Timed_Locations_of_Things) | customer_id (Table: Customers) | customer_details (Table: Customers) | property_id (Table: Properties) | property_type_code (Table: Properties) | property_address (Table: Properties) | other_details (Table: Properties) | resident_id (Table: Residents) | property_id (Table: Residents) | date_moved_in (Table: Residents) | date_moved_out (Table: Residents) | other_details (Table: Residents) | organization_id (Table: Organizations) | parent_organization_id (Table: Organizations) | organization_details (Table: Organizations) | service_id (Table: Services) | organization_id (Table: Services) | service_type_code (Table: Services) | service_details (Table: Services) | resident_id (Table: Residents_Services) | service_id (Table: Residents_Services) | date_moved_in (Table: Residents_Services) | property_id (Table: Residents_Services) | date_requested (Table: Residents_Services) | date_provided (Table: Residents_Services) | other_details (Table: Residents_Services) | thing_id (Table: Things) | organization_id (Table: Things) | Type_of_Thing_Code (Table: Things) | service_type_code (Table: Things) | service_details (Table: Things) | Customer_Event_ID (Table: Customer_Events) | customer_id (Table: Customer_Events) | date_moved_in (Table: Customer_Events) | property_id (Table: Customer_Events) | resident_id (Table: Customer_Events) | thing_id (Table: Customer_Events) | Customer_Event_Note_ID (Table: Customer_Event_Notes) | Customer_Event_ID (Table: Customer_Event_Notes) | service_type_code (Table: Customer_Event_Notes) | resident_id (Table: Customer_Event_Notes) | property_id (Table: Customer_Event_Notes) | date_moved_in (Table: Customer_Event_Notes) | thing_id (Table: Timed_Status_of_Things) | Date_and_Date (Table: Timed_Status_of_Things) | Status_of_Thing_Code (Table: Timed_Status_of_Things) | thing_id (Table: Timed_Locations_of_Things) | Date_and_Time (Table: Timed_Locations_of_Things) | Location_Code (Table: Timed_Locations_of_Things)
Give the total money requested by entrepreneurs who are taller than 1.85.,SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85,* (Table: people) | Entrepreneur_ID (Table: entrepreneur) | People_ID (Table: entrepreneur) | Company (Table: entrepreneur) | Money_Requested (Table: entrepreneur) | Investor (Table: entrepreneur) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Date_of_Birth (Table: people)
Find the first name and major of the students who are not allegry to soy.,"SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  ""Soy"")",* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
What is the average price of clothes?,SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes',* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3?,"SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",* (Table: store) | actor_id (Table: actor) | first_name (Table: actor) | last_name (Table: actor) | last_update (Table: actor) | address_id (Table: address) | address (Table: address) | address2 (Table: address) | district (Table: address) | city_id (Table: address) | postal_code (Table: address) | phone (Table: address) | last_update (Table: address) | category_id (Table: category) | name (Table: category) | last_update (Table: category) | city_id (Table: city) | city (Table: city) | country_id (Table: city) | last_update (Table: city) | country_id (Table: country) | country (Table: country) | last_update (Table: country) | customer_id (Table: customer) | store_id (Table: customer) | first_name (Table: customer) | last_name (Table: customer) | email (Table: customer) | address_id (Table: customer) | active (Table: customer) | create_date (Table: customer) | last_update (Table: customer) | film_id (Table: film) | title (Table: film) | description (Table: film) | release_year (Table: film) | language_id (Table: film) | original_language_id (Table: film) | rental_duration (Table: film) | rental_rate (Table: film) | length (Table: film) | replacement_cost (Table: film) | rating (Table: film) | special_features (Table: film) | last_update (Table: film) | actor_id (Table: film_actor) | film_id (Table: film_actor) | last_update (Table: film_actor) | film_id (Table: film_category) | category_id (Table: film_category) | last_update (Table: film_category) | film_id (Table: film_text) | title (Table: film_text) | description (Table: film_text) | inventory_id (Table: inventory) | film_id (Table: inventory) | store_id (Table: inventory) | last_update (Table: inventory) | language_id (Table: language) | name (Table: language) | last_update (Table: language) | payment_id (Table: payment) | customer_id (Table: payment) | staff_id (Table: payment) | rental_id (Table: payment) | amount (Table: payment) | payment_date (Table: payment) | last_update (Table: payment) | rental_id (Table: rental) | rental_date (Table: rental) | inventory_id (Table: rental) | customer_id (Table: rental) | return_date (Table: rental) | staff_id (Table: rental) | last_update (Table: rental) | staff_id (Table: staff) | first_name (Table: staff) | last_name (Table: staff) | address_id (Table: staff) | picture (Table: staff) | email (Table: staff) | store_id (Table: staff) | active (Table: staff) | username (Table: staff) | password (Table: staff) | last_update (Table: staff) | store_id (Table: store) | manager_staff_id (Table: store) | address_id (Table: store) | last_update (Table: store)
Who has a friend that is from new york city?,SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city',* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
"Show the average amount of transactions for different lots, ordered by average amount of transactions.","SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)",* (Table: Transactions_Lots) | investor_id (Table: Investors) | Investor_details (Table: Investors) | lot_id (Table: Lots) | investor_id (Table: Lots) | lot_details (Table: Lots) | transaction_type_code (Table: Ref_Transaction_Types) | transaction_type_description (Table: Ref_Transaction_Types) | transaction_id (Table: Transactions) | investor_id (Table: Transactions) | transaction_type_code (Table: Transactions) | date_of_transaction (Table: Transactions) | amount_of_transaction (Table: Transactions) | share_count (Table: Transactions) | other_details (Table: Transactions) | sales_transaction_id (Table: Sales) | sales_details (Table: Sales) | purchase_transaction_id (Table: Purchases) | purchase_details (Table: Purchases) | transaction_id (Table: Transactions_Lots) | lot_id (Table: Transactions_Lots)
Return the song in the volume that has spent the most weeks on top?,SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1,* (Table: music_festival) | Artist_ID (Table: artist) | Artist (Table: artist) | Age (Table: artist) | Famous_Title (Table: artist) | Famous_Release_date (Table: artist) | Volume_ID (Table: volume) | Volume_Issue (Table: volume) | Issue_Date (Table: volume) | Weeks_on_Top (Table: volume) | Song (Table: volume) | Artist_ID (Table: volume) | ID (Table: music_festival) | Music_Festival (Table: music_festival) | Date_of_ceremony (Table: music_festival) | Category (Table: music_festival) | Volume (Table: music_festival) | Result (Table: music_festival)
What place has the most flights coming from there?,SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1,* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
Find the number of teachers who teach the student called CHRISSY NABOZNY.,"SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  ""CHRISSY"" AND T1.lastname  =  ""NABOZNY""",* (Table: teachers) | LastName (Table: list) | FirstName (Table: list) | Grade (Table: list) | Classroom (Table: list) | LastName (Table: teachers) | FirstName (Table: teachers) | Classroom (Table: teachers)
Return the duration of the actor with the greatest age.,SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1,* (Table: actor) | Musical_ID (Table: musical) | Name (Table: musical) | Year (Table: musical) | Award (Table: musical) | Category (Table: musical) | Nominee (Table: musical) | Result (Table: musical) | Actor_ID (Table: actor) | Name (Table: actor) | Musical_ID (Table: actor) | Character (Table: actor) | Duration (Table: actor) | age (Table: actor)
"What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?","SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2",* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
"What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?","SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'",* (Table: Electoral_Register) | master_customer_id (Table: Customer_Master_Index) | cmi_details (Table: Customer_Master_Index) | cmi_cross_ref_id (Table: CMI_Cross_References) | master_customer_id (Table: CMI_Cross_References) | source_system_code (Table: CMI_Cross_References) | council_tax_id (Table: Council_Tax) | cmi_cross_ref_id (Table: Council_Tax) | business_rates_id (Table: Business_Rates) | cmi_cross_ref_id (Table: Business_Rates) | council_tax_id (Table: Benefits_Overpayments) | cmi_cross_ref_id (Table: Benefits_Overpayments) | council_tax_id (Table: Parking_Fines) | cmi_cross_ref_id (Table: Parking_Fines) | council_tax_id (Table: Rent_Arrears) | cmi_cross_ref_id (Table: Rent_Arrears) | electoral_register_id (Table: Electoral_Register) | cmi_cross_ref_id (Table: Electoral_Register)
Which teams had more than 3 eliminations?,SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3,* (Table: Elimination) | Wrestler_ID (Table: wrestler) | Name (Table: wrestler) | Reign (Table: wrestler) | Days_held (Table: wrestler) | Location (Table: wrestler) | Event (Table: wrestler) | Elimination_ID (Table: Elimination) | Wrestler_ID (Table: Elimination) | Team (Table: Elimination) | Eliminated_By (Table: Elimination) | Elimination_Move (Table: Elimination) | Time (Table: Elimination)
How many architects are female?,SELECT count(*) FROM architect WHERE gender  =  'female',* (Table: mill) | id (Table: architect) | name (Table: architect) | nationality (Table: architect) | gender (Table: architect) | architect_id (Table: bridge) | id (Table: bridge) | name (Table: bridge) | location (Table: bridge) | length_meters (Table: bridge) | length_feet (Table: bridge) | architect_id (Table: mill) | id (Table: mill) | location (Table: mill) | name (Table: mill) | type (Table: mill) | built_year (Table: mill) | notes (Table: mill)
"What are the names and seatings for all tracks opened after 2000, ordered by seating?","SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",* (Table: track) | Race_ID (Table: race) | Name (Table: race) | Class (Table: race) | Date (Table: race) | Track_ID (Table: race) | Track_ID (Table: track) | Name (Table: track) | Location (Table: track) | Seating (Table: track) | Year_Opened (Table: track)
Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.,"SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  ""254 Ottilie Junction"" OR T2.How_to_Get_There  =  ""bus""",* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
List the name and assets of each company in ascending order of company name.,"SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC",* (Table: Office_locations) | id (Table: buildings) | name (Table: buildings) | City (Table: buildings) | Height (Table: buildings) | Stories (Table: buildings) | Status (Table: buildings) | id (Table: Companies) | name (Table: Companies) | Headquarters (Table: Companies) | Industry (Table: Companies) | Sales_billion (Table: Companies) | Profits_billion (Table: Companies) | Assets_billion (Table: Companies) | Market_Value_billion (Table: Companies) | building_id (Table: Office_locations) | company_id (Table: Office_locations) | move_in_year (Table: Office_locations)
What are the distinct names of products purchased by at least two different customers?,SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2,* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
How many students have cat allergies?,"SELECT count(*) FROM Has_allergy WHERE Allergy  =  ""Cat""",* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
Show details of all visitors.,SELECT Tourist_Details FROM VISITORS,* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
"Show the names of authors from college ""Florida"" or ""Temple""","SELECT Author FROM submission WHERE College  =  ""Florida"" OR College  =  ""Temple""",* (Table: Acceptance) | Workshop_ID (Table: workshop) | Date (Table: workshop) | Venue (Table: workshop) | Name (Table: workshop) | Submission_ID (Table: submission) | Scores (Table: submission) | Author (Table: submission) | College (Table: submission) | Submission_ID (Table: Acceptance) | Workshop_ID (Table: Acceptance) | Result (Table: Acceptance)
How many different cities are they from?,SELECT count(DISTINCT city) FROM Person,* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
"Return the booking start date and end date for the apartments that have type code ""Duplex"".","SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  ""Duplex""",* (Table: View_Unit_Status) | building_id (Table: Apartment_Buildings) | building_short_name (Table: Apartment_Buildings) | building_full_name (Table: Apartment_Buildings) | building_description (Table: Apartment_Buildings) | building_address (Table: Apartment_Buildings) | building_manager (Table: Apartment_Buildings) | building_phone (Table: Apartment_Buildings) | apt_id (Table: Apartments) | building_id (Table: Apartments) | apt_type_code (Table: Apartments) | apt_number (Table: Apartments) | bathroom_count (Table: Apartments) | bedroom_count (Table: Apartments) | room_count (Table: Apartments) | apt_id (Table: Apartment_Facilities) | facility_code (Table: Apartment_Facilities) | guest_id (Table: Guests) | gender_code (Table: Guests) | guest_first_name (Table: Guests) | guest_last_name (Table: Guests) | date_of_birth (Table: Guests) | apt_booking_id (Table: Apartment_Bookings) | apt_id (Table: Apartment_Bookings) | guest_id (Table: Apartment_Bookings) | booking_status_code (Table: Apartment_Bookings) | booking_start_date (Table: Apartment_Bookings) | booking_end_date (Table: Apartment_Bookings) | apt_id (Table: View_Unit_Status) | apt_booking_id (Table: View_Unit_Status) | status_date (Table: View_Unit_Status) | available_yn (Table: View_Unit_Status)
What is the largest and smallest customer codes?,"SELECT max(customer_code) ,  min(customer_code) FROM Customers",* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
What is the name of the nurse has the most appointments?,SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1,* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
How many gymnasts are there?,SELECT count(*) FROM gymnast,* (Table: people) | Gymnast_ID (Table: gymnast) | Floor_Exercise_Points (Table: gymnast) | Pommel_Horse_Points (Table: gymnast) | Rings_Points (Table: gymnast) | Vault_Points (Table: gymnast) | Parallel_Bars_Points (Table: gymnast) | Horizontal_Bar_Points (Table: gymnast) | Total_Points (Table: gymnast) | People_ID (Table: people) | Name (Table: people) | Age (Table: people) | Height (Table: people) | Hometown (Table: people)
"Show first name, last name, age for all female students. Their sex is F.","SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?,SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1,* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
What is the name of the shop that has the most different kinds of devices in stock?,SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1,* (Table: stock) | Device_ID (Table: device) | Device (Table: device) | Carrier (Table: device) | Package_Version (Table: device) | Applications (Table: device) | Software_Platform (Table: device) | Shop_ID (Table: shop) | Shop_Name (Table: shop) | Location (Table: shop) | Open_Date (Table: shop) | Open_Year (Table: shop) | Shop_ID (Table: stock) | Device_ID (Table: stock) | Quantity (Table: stock)
Which game type has least number of games?,SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1,* (Table: SportsInfo) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | GameID (Table: Video_Games) | GName (Table: Video_Games) | GType (Table: Video_Games) | StuID (Table: Plays_Games) | GameID (Table: Plays_Games) | Hours_Played (Table: Plays_Games) | StuID (Table: SportsInfo) | SportName (Table: SportsInfo) | HoursPerWeek (Table: SportsInfo) | GamesPlayed (Table: SportsInfo) | OnScholarship (Table: SportsInfo)
Count the number of exhibitions that happened in or after 2005.,SELECT count(*) FROM exhibition WHERE YEAR  >=  2005,* (Table: exhibition_record) | Artist_ID (Table: artist) | Name (Table: artist) | Country (Table: artist) | Year_Join (Table: artist) | Age (Table: artist) | Exhibition_ID (Table: exhibition) | Year (Table: exhibition) | Theme (Table: exhibition) | Artist_ID (Table: exhibition) | Ticket_Price (Table: exhibition) | Exhibition_ID (Table: exhibition_record) | Date (Table: exhibition_record) | Attendance (Table: exhibition_record)
"What is the most common company type, and how many are there?","SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",* (Table: flight) | id (Table: airport) | City (Table: airport) | Country (Table: airport) | IATA (Table: airport) | ICAO (Table: airport) | name (Table: airport) | id (Table: operate_company) | name (Table: operate_company) | Type (Table: operate_company) | Principal_activities (Table: operate_company) | Incorporated_in (Table: operate_company) | Group_Equity_Shareholding (Table: operate_company) | id (Table: flight) | Vehicle_Flight_number (Table: flight) | Date (Table: flight) | Pilot (Table: flight) | Velocity (Table: flight) | Altitude (Table: flight) | airport_id (Table: flight) | company_id (Table: flight)
What are all the friends of Alice who are female?,SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female',* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.,"SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",* (Table: CHECKING) | custid (Table: ACCOUNTS) | name (Table: ACCOUNTS) | custid (Table: SAVINGS) | balance (Table: SAVINGS) | custid (Table: CHECKING) | balance (Table: CHECKING)
"Find the name, age, and job title of persons who are friends with Alice for the longest years.","SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')",* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
What are the names of all the dorms that can accomdate more than 300 students?,SELECT dorm_name FROM dorm WHERE student_capacity  >  300,* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
List the name of rooms with king or queen bed.,"SELECT roomName FROM Rooms WHERE bedType  =  ""King"" OR bedType  =  ""Queen"";",* (Table: Reservations) | RoomId (Table: Rooms) | roomName (Table: Rooms) | beds (Table: Rooms) | bedType (Table: Rooms) | maxOccupancy (Table: Rooms) | basePrice (Table: Rooms) | decor (Table: Rooms) | Code (Table: Reservations) | Room (Table: Reservations) | CheckIn (Table: Reservations) | CheckOut (Table: Reservations) | Rate (Table: Reservations) | LastName (Table: Reservations) | FirstName (Table: Reservations) | Adults (Table: Reservations) | Kids (Table: Reservations)
Find the description of the most popular role among the users that have logged in.,SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1),* (Table: Document_Sections_Images) | role_code (Table: Roles) | role_description (Table: Roles) | user_id (Table: Users) | role_code (Table: Users) | user_name (Table: Users) | user_login (Table: Users) | password (Table: Users) | document_structure_code (Table: Document_Structures) | parent_document_structure_code (Table: Document_Structures) | document_structure_description (Table: Document_Structures) | functional_area_code (Table: Functional_Areas) | parent_functional_area_code (Table: Functional_Areas) | functional_area_description (Table: Functional_Areas) | image_id (Table: Images) | image_alt_text (Table: Images) | image_name (Table: Images) | image_url (Table: Images) | document_code (Table: Documents) | document_structure_code (Table: Documents) | document_type_code (Table: Documents) | access_count (Table: Documents) | document_name (Table: Documents) | document_code (Table: Document_Functional_Areas) | functional_area_code (Table: Document_Functional_Areas) | section_id (Table: Document_Sections) | document_code (Table: Document_Sections) | section_sequence (Table: Document_Sections) | section_code (Table: Document_Sections) | section_title (Table: Document_Sections) | section_id (Table: Document_Sections_Images) | image_id (Table: Document_Sections_Images)
Return the characters and durations for each actor.,"SELECT Character ,  Duration FROM actor",* (Table: actor) | Musical_ID (Table: musical) | Name (Table: musical) | Year (Table: musical) | Award (Table: musical) | Category (Table: musical) | Nominee (Table: musical) | Result (Table: musical) | Actor_ID (Table: actor) | Name (Table: actor) | Musical_ID (Table: actor) | Character (Table: actor) | Duration (Table: actor) | age (Table: actor)
Find the order id and customer id associated with the oldest order.,"SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",* (Table: Shipment_Items) | customer_id (Table: Customers) | customer_name (Table: Customers) | customer_details (Table: Customers) | invoice_number (Table: Invoices) | invoice_date (Table: Invoices) | invoice_details (Table: Invoices) | order_id (Table: Orders) | customer_id (Table: Orders) | order_status (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | product_id (Table: Products) | product_name (Table: Products) | product_details (Table: Products) | order_item_id (Table: Order_Items) | product_id (Table: Order_Items) | order_id (Table: Order_Items) | order_item_status (Table: Order_Items) | order_item_details (Table: Order_Items) | shipment_id (Table: Shipments) | order_id (Table: Shipments) | invoice_number (Table: Shipments) | shipment_tracking_number (Table: Shipments) | shipment_date (Table: Shipments) | other_shipment_details (Table: Shipments) | shipment_id (Table: Shipment_Items) | order_item_id (Table: Shipment_Items)
"List the name of all the distinct customers who have orders with status ""Packing"".","SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = ""Packing""",* (Table: Shipment_Items) | customer_id (Table: Customers) | customer_name (Table: Customers) | customer_details (Table: Customers) | invoice_number (Table: Invoices) | invoice_date (Table: Invoices) | invoice_details (Table: Invoices) | order_id (Table: Orders) | customer_id (Table: Orders) | order_status (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | product_id (Table: Products) | product_name (Table: Products) | product_details (Table: Products) | order_item_id (Table: Order_Items) | product_id (Table: Order_Items) | order_id (Table: Order_Items) | order_item_status (Table: Order_Items) | order_item_details (Table: Order_Items) | shipment_id (Table: Shipments) | order_id (Table: Shipments) | invoice_number (Table: Shipments) | shipment_tracking_number (Table: Shipments) | shipment_date (Table: Shipments) | other_shipment_details (Table: Shipments) | shipment_id (Table: Shipment_Items) | order_item_id (Table: Shipment_Items)
What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?,"SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = ""LA""",* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
Count the number of artists who are older than 46 and joined after 1990.,SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990,* (Table: exhibition_record) | Artist_ID (Table: artist) | Name (Table: artist) | Country (Table: artist) | Year_Join (Table: artist) | Age (Table: artist) | Exhibition_ID (Table: exhibition) | Year (Table: exhibition) | Theme (Table: exhibition) | Artist_ID (Table: exhibition) | Ticket_Price (Table: exhibition) | Exhibition_ID (Table: exhibition_record) | Date (Table: exhibition_record) | Attendance (Table: exhibition_record)
Find the distinct names of all races held between 2014 and 2017?,SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017,* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
"List the name, location, mascot for all schools.","SELECT school_name ,  LOCATION ,  mascot FROM school",* (Table: endowment) | School_id (Table: School) | School_name (Table: School) | Location (Table: School) | Mascot (Table: School) | Enrollment (Table: School) | IHSAA_Class (Table: School) | IHSAA_Football_Class (Table: School) | County (Table: School) | School_id (Table: budget) | Year (Table: budget) | Budgeted (Table: budget) | total_budget_percent_budgeted (Table: budget) | Invested (Table: budget) | total_budget_percent_invested (Table: budget) | Budget_invested_percent (Table: budget) | endowment_id (Table: endowment) | School_id (Table: endowment) | donator_name (Table: endowment) | amount (Table: endowment)
"List the hardware model name for the phones that have screen mode type ""Text"" or RAM size greater than 32.","SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = ""Text"" OR T1.RAM_MiB  >  32;",* (Table: phone) | Model_name (Table: chip_model) | Launch_year (Table: chip_model) | RAM_MiB (Table: chip_model) | ROM_MiB (Table: chip_model) | Slots (Table: chip_model) | WiFi (Table: chip_model) | Bluetooth (Table: chip_model) | Graphics_mode (Table: screen_mode) | Char_cells (Table: screen_mode) | Pixels (Table: screen_mode) | Hardware_colours (Table: screen_mode) | used_kb (Table: screen_mode) | map (Table: screen_mode) | Type (Table: screen_mode) | Company_name (Table: phone) | Hardware_Model_name (Table: phone) | Accreditation_type (Table: phone) | Accreditation_level (Table: phone) | Date (Table: phone) | chip_model (Table: phone) | screen_mode (Table: phone)
"What are the dates of birth of entrepreneurs with investor ""Simon Woodroffe"" or ""Peter Jones""?","SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  ""Simon Woodroffe"" OR T1.Investor  =  ""Peter Jones""",* (Table: people) | Entrepreneur_ID (Table: entrepreneur) | People_ID (Table: entrepreneur) | Company (Table: entrepreneur) | Money_Requested (Table: entrepreneur) | Investor (Table: entrepreneur) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Date_of_Birth (Table: people)
"What are the open and close dates of all the policies used by the customer who have ""Diana"" in part of their names?","SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE ""%Diana%""",* (Table: Settlements) | Customer_ID (Table: Customers) | Customer_name (Table: Customers) | Service_ID (Table: Services) | Service_name (Table: Services) | Policy_ID (Table: Available_Policies) | policy_type_code (Table: Available_Policies) | Customer_Phone (Table: Available_Policies) | Customer_ID (Table: Customers_Policies) | Policy_ID (Table: Customers_Policies) | Date_Opened (Table: Customers_Policies) | Date_Closed (Table: Customers_Policies) | FNOL_ID (Table: First_Notification_of_Loss) | Customer_ID (Table: First_Notification_of_Loss) | Policy_ID (Table: First_Notification_of_Loss) | Service_ID (Table: First_Notification_of_Loss) | Claim_ID (Table: Claims) | FNOL_ID (Table: Claims) | Effective_Date (Table: Claims) | Settlement_ID (Table: Settlements) | Claim_ID (Table: Settlements) | Effective_Date (Table: Settlements) | Settlement_Amount (Table: Settlements)
"Find the club which has the largest number of members majoring in ""600"".","SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  ""600"" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1",* (Table: Member_of_club) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | ClubID (Table: Club) | ClubName (Table: Club) | ClubDesc (Table: Club) | ClubLocation (Table: Club) | StuID (Table: Member_of_club) | ClubID (Table: Member_of_club) | Position (Table: Member_of_club)
What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?,"SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
Count the number of all the calendar items.,SELECT count(*) FROM Ref_calendar,* (Table: Documents_to_be_Destroyed) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Calendar_Date (Table: Ref_Calendar) | Day_Number (Table: Ref_Calendar) | Location_Code (Table: Ref_Locations) | Location_Name (Table: Ref_Locations) | Location_Description (Table: Ref_Locations) | Role_Code (Table: Roles) | Role_Name (Table: Roles) | Role_Description (Table: Roles) | Document_ID (Table: All_Documents) | Date_Stored (Table: All_Documents) | Document_Type_Code (Table: All_Documents) | Document_Name (Table: All_Documents) | Document_Description (Table: All_Documents) | Other_Details (Table: All_Documents) | Employee_ID (Table: Employees) | Role_Code (Table: Employees) | Employee_Name (Table: Employees) | Gender_MFU (Table: Employees) | Date_of_Birth (Table: Employees) | Other_Details (Table: Employees) | Document_ID (Table: Document_Locations) | Location_Code (Table: Document_Locations) | Date_in_Location_From (Table: Document_Locations) | Date_in_Locaton_To (Table: Document_Locations) | Document_ID (Table: Documents_to_be_Destroyed) | Destruction_Authorised_by_Employee_ID (Table: Documents_to_be_Destroyed) | Destroyed_by_Employee_ID (Table: Documents_to_be_Destroyed) | Planned_Destruction_Date (Table: Documents_to_be_Destroyed) | Actual_Destruction_Date (Table: Documents_to_be_Destroyed) | Other_Details (Table: Documents_to_be_Destroyed)
"What are the different transaction types, and how many transactions of each have taken place?","SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
Return the average price of products that have each category code.,"SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code",* (Table: Complaints) | staff_id (Table: Staff) | gender (Table: Staff) | first_name (Table: Staff) | last_name (Table: Staff) | email_address (Table: Staff) | phone_number (Table: Staff) | customer_id (Table: Customers) | customer_type_code (Table: Customers) | address_line_1 (Table: Customers) | address_line_2 (Table: Customers) | town_city (Table: Customers) | state (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | product_id (Table: Products) | parent_product_id (Table: Products) | product_category_code (Table: Products) | date_product_first_available (Table: Products) | date_product_discontinued (Table: Products) | product_name (Table: Products) | product_description (Table: Products) | product_price (Table: Products) | complaint_id (Table: Complaints) | product_id (Table: Complaints) | customer_id (Table: Complaints) | complaint_outcome_code (Table: Complaints) | complaint_status_code (Table: Complaints) | complaint_type_code (Table: Complaints) | date_complaint_raised (Table: Complaints) | date_complaint_closed (Table: Complaints) | staff_id (Table: Complaints)
Show the names of the drivers without a school bus.,SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus),* (Table: school_bus) | Driver_ID (Table: driver) | Name (Table: driver) | Party (Table: driver) | Home_city (Table: driver) | Age (Table: driver) | School_ID (Table: school) | Grade (Table: school) | School (Table: school) | Location (Table: school) | Type (Table: school) | School_ID (Table: school_bus) | Driver_ID (Table: school_bus) | Years_Working (Table: school_bus) | If_full_time (Table: school_bus)
Find the name and age of all males in order of their age.,SELECT name FROM Person WHERE gender  =  'male' ORDER BY age,* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
Return the phone and email of the customer with the first name Aniyah and last name Feest.,"SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  ""Aniyah"" AND customer_last_name  =  ""Feest""",* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
What is the average song rating for each language?,"SELECT avg(rating) ,  languages FROM song GROUP BY languages",* (Table: song) | g_name (Table: genre) | rating (Table: genre) | most_popular_in (Table: genre) | artist_name (Table: artist) | country (Table: artist) | gender (Table: artist) | preferred_genre (Table: artist) | f_id (Table: files) | artist_name (Table: files) | file_size (Table: files) | duration (Table: files) | formats (Table: files) | song_name (Table: song) | artist_name (Table: song) | country (Table: song) | f_id (Table: song) | genre_is (Table: song) | rating (Table: song) | languages (Table: song) | releasedate (Table: song) | resolution (Table: song)
Give the different hometowns of gymnasts that have a total point score of above 57.5.,SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5,* (Table: people) | Gymnast_ID (Table: gymnast) | Floor_Exercise_Points (Table: gymnast) | Pommel_Horse_Points (Table: gymnast) | Rings_Points (Table: gymnast) | Vault_Points (Table: gymnast) | Parallel_Bars_Points (Table: gymnast) | Horizontal_Bar_Points (Table: gymnast) | Total_Points (Table: gymnast) | People_ID (Table: people) | Name (Table: people) | Age (Table: people) | Height (Table: people) | Hometown (Table: people)
Retrieve all the last names of authors in alphabetical order.,SELECT lname FROM authors ORDER BY lname,* (Table: Authorship) | instID (Table: Inst) | name (Table: Inst) | country (Table: Inst) | authID (Table: Authors) | lname (Table: Authors) | fname (Table: Authors) | paperID (Table: Papers) | title (Table: Papers) | authID (Table: Authorship) | instID (Table: Authorship) | paperID (Table: Authorship) | authOrder (Table: Authorship)
How many tracks do we have?,SELECT count(*) FROM track,* (Table: track) | Race_ID (Table: race) | Name (Table: race) | Class (Table: race) | Date (Table: race) | Track_ID (Table: race) | Track_ID (Table: track) | Name (Table: track) | Location (Table: track) | Seating (Table: track) | Year_Opened (Table: track)
Show ids for all students who have advisor 1121.,SELECT StuID FROM Student WHERE Advisor  =  1121,* (Table: SportsInfo) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | GameID (Table: Video_Games) | GName (Table: Video_Games) | GType (Table: Video_Games) | StuID (Table: Plays_Games) | GameID (Table: Plays_Games) | Hours_Played (Table: Plays_Games) | StuID (Table: SportsInfo) | SportName (Table: SportsInfo) | HoursPerWeek (Table: SportsInfo) | GamesPlayed (Table: SportsInfo) | OnScholarship (Table: SportsInfo)
How many models do not have the wifi function?,SELECT count(*) FROM chip_model WHERE wifi  =  'No',* (Table: phone) | Model_name (Table: chip_model) | Launch_year (Table: chip_model) | RAM_MiB (Table: chip_model) | ROM_MiB (Table: chip_model) | Slots (Table: chip_model) | WiFi (Table: chip_model) | Bluetooth (Table: chip_model) | Graphics_mode (Table: screen_mode) | Char_cells (Table: screen_mode) | Pixels (Table: screen_mode) | Hardware_colours (Table: screen_mode) | used_kb (Table: screen_mode) | map (Table: screen_mode) | Type (Table: screen_mode) | Company_name (Table: phone) | Hardware_Model_name (Table: phone) | Accreditation_type (Table: phone) | Accreditation_level (Table: phone) | Date (Table: phone) | chip_model (Table: phone) | screen_mode (Table: phone)
What is the name of the department with the most credits?,SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1,* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
"For each position, what is the average number of points for players in that position?","SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION",* (Table: competition_result) | Club_ID (Table: club) | name (Table: club) | Region (Table: club) | Start_year (Table: club) | Rank (Table: club_rank) | Club_ID (Table: club_rank) | Gold (Table: club_rank) | Silver (Table: club_rank) | Bronze (Table: club_rank) | Total (Table: club_rank) | Player_ID (Table: player) | name (Table: player) | Position (Table: player) | Club_ID (Table: player) | Apps (Table: player) | Tries (Table: player) | Goals (Table: player) | Points (Table: player) | Competition_ID (Table: competition) | Year (Table: competition) | Competition_type (Table: competition) | Country (Table: competition) | Competition_ID (Table: competition_result) | Club_ID_1 (Table: competition_result) | Club_ID_2 (Table: competition_result) | Score (Table: competition_result)
"What are the distinct years in which the competitions type is not ""Tournament""?","SELECT DISTINCT YEAR FROM competition WHERE Competition_type != ""Tournament""",* (Table: competition_result) | Club_ID (Table: club) | name (Table: club) | Region (Table: club) | Start_year (Table: club) | Rank (Table: club_rank) | Club_ID (Table: club_rank) | Gold (Table: club_rank) | Silver (Table: club_rank) | Bronze (Table: club_rank) | Total (Table: club_rank) | Player_ID (Table: player) | name (Table: player) | Position (Table: player) | Club_ID (Table: player) | Apps (Table: player) | Tries (Table: player) | Goals (Table: player) | Points (Table: player) | Competition_ID (Table: competition) | Year (Table: competition) | Competition_type (Table: competition) | Country (Table: competition) | Competition_ID (Table: competition_result) | Club_ID_1 (Table: competition_result) | Club_ID_2 (Table: competition_result) | Score (Table: competition_result)
"How many proteins are associated with an institution founded after 1880 or an institution with type ""Private""?",SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private',* (Table: protein) | building_id (Table: building) | Name (Table: building) | Street_address (Table: building) | Years_as_tallest (Table: building) | Height_feet (Table: building) | Floors (Table: building) | Institution_id (Table: Institution) | Institution (Table: Institution) | Location (Table: Institution) | Founded (Table: Institution) | Type (Table: Institution) | Enrollment (Table: Institution) | Team (Table: Institution) | Primary_Conference (Table: Institution) | building_id (Table: Institution) | common_name (Table: protein) | protein_name (Table: protein) | divergence_from_human_lineage (Table: protein) | accession_number (Table: protein) | sequence_length (Table: protein) | sequence_identity_to_human_protein (Table: protein) | Institution_id (Table: protein)
How many projects are there?,SELECT count(*) FROM Projects,* (Table: Accounts) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Budget_Type_Code (Table: Ref_Budget_Codes) | Budget_Type_Description (Table: Ref_Budget_Codes) | Project_ID (Table: Projects) | Project_Details (Table: Projects) | Document_ID (Table: Documents) | Document_Type_Code (Table: Documents) | Project_ID (Table: Documents) | Document_Date (Table: Documents) | Document_Name (Table: Documents) | Document_Description (Table: Documents) | Other_Details (Table: Documents) | Statement_ID (Table: Statements) | Statement_Details (Table: Statements) | Document_ID (Table: Documents_with_Expenses) | Budget_Type_Code (Table: Documents_with_Expenses) | Document_Details (Table: Documents_with_Expenses) | Account_ID (Table: Accounts) | Statement_ID (Table: Accounts) | Account_Details (Table: Accounts)
"Find the first names of students whose first names contain letter ""a"".",SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%',* (Table: Gradeconversion) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty) | DNO (Table: Department) | Division (Table: Department) | DName (Table: Department) | Room (Table: Department) | Building (Table: Department) | DPhone (Table: Department) | FacID (Table: Member_of) | DNO (Table: Member_of) | Appt_Type (Table: Member_of) | CID (Table: Course) | CName (Table: Course) | Credits (Table: Course) | Instructor (Table: Course) | Days (Table: Course) | Hours (Table: Course) | DNO (Table: Course) | StuID (Table: Minor_in) | DNO (Table: Minor_in) | StuID (Table: Enrolled_in) | CID (Table: Enrolled_in) | Grade (Table: Enrolled_in) | lettergrade (Table: Gradeconversion) | gradepoint (Table: Gradeconversion)
List all the types of forms.,SELECT DISTINCT form_type_code FROM forms,* (Table: Party_Services) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | town_city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | service_id (Table: Services) | service_type_code (Table: Services) | service_name (Table: Services) | service_descriptio (Table: Services) | form_id (Table: Forms) | form_type_code (Table: Forms) | service_id (Table: Forms) | form_number (Table: Forms) | form_name (Table: Forms) | form_description (Table: Forms) | individual_id (Table: Individuals) | individual_first_name (Table: Individuals) | individual_middle_name (Table: Individuals) | inidividual_phone (Table: Individuals) | individual_email (Table: Individuals) | individual_address (Table: Individuals) | individual_last_name (Table: Individuals) | organization_id (Table: Organizations) | date_formed (Table: Organizations) | organization_name (Table: Organizations) | uk_vat_number (Table: Organizations) | party_id (Table: Parties) | payment_method_code (Table: Parties) | party_phone (Table: Parties) | party_email (Table: Parties) | individual_id (Table: Organization_Contact_Individuals) | organization_id (Table: Organization_Contact_Individuals) | date_contact_from (Table: Organization_Contact_Individuals) | date_contact_to (Table: Organization_Contact_Individuals) | party_id (Table: Party_Addresses) | address_id (Table: Party_Addresses) | date_address_from (Table: Party_Addresses) | address_type_code (Table: Party_Addresses) | date_address_to (Table: Party_Addresses) | party_id (Table: Party_Forms) | form_id (Table: Party_Forms) | date_completion_started (Table: Party_Forms) | form_status_code (Table: Party_Forms) | date_fully_completed (Table: Party_Forms) | booking_id (Table: Party_Services) | customer_id (Table: Party_Services) | service_id (Table: Party_Services) | service_datetime (Table: Party_Services) | booking_made_date (Table: Party_Services)
"For each competition, count the number of matches.","SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition",* (Table: hosting_city) | City_ID (Table: city) | City (Table: city) | Hanzi (Table: city) | Hanyu_Pinyin (Table: city) | Regional_Population (Table: city) | GDP (Table: city) | Match_ID (Table: match) | Date (Table: match) | Venue (Table: match) | Score (Table: match) | Result (Table: match) | Competition (Table: match) | City_ID (Table: temperature) | Jan (Table: temperature) | Feb (Table: temperature) | Mar (Table: temperature) | Apr (Table: temperature) | Jun (Table: temperature) | Jul (Table: temperature) | Aug (Table: temperature) | Sep (Table: temperature) | Oct (Table: temperature) | Nov (Table: temperature) | Dec (Table: temperature) | Year (Table: hosting_city) | Match_ID (Table: hosting_city) | Host_City (Table: hosting_city)
How many flights do we have?,SELECT count(*) FROM Flight,* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
"What is the title, credit value, and department name for courses with more than one prerequisite?","SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
"Show the prices of publications whose publisher is either ""Person"" or ""Wiley""","SELECT Price FROM publication WHERE Publisher  =  ""Person"" OR Publisher  =  ""Wiley""",* (Table: book) | Publication_ID (Table: publication) | Book_ID (Table: publication) | Publisher (Table: publication) | Publication_Date (Table: publication) | Price (Table: publication) | Book_ID (Table: book) | Title (Table: book) | Issues (Table: book) | Writer (Table: book)
What is the title of the prerequisite class of International Finance course?,SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance'),* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Find the name of customers who have both saving and checking account types.,SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking',* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
Find the name of the teacher who teaches the largest number of students.,"SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",* (Table: teachers) | LastName (Table: list) | FirstName (Table: list) | Grade (Table: list) | Classroom (Table: list) | LastName (Table: teachers) | FirstName (Table: teachers) | Classroom (Table: teachers)
What are the first names of all history professors who do not teach?,SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num,* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
What is the detail of each visitor?,SELECT Tourist_Details FROM VISITORS,* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
display the employee number and name( first name and last name ) for all employees who work in a department with any employee whose name contains a ’T’.,"SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )",* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
"show the titles, and authors or editors for all books made after the year 1989.","SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",* (Table: culture_company) | book_club_id (Table: book_club) | Year (Table: book_club) | Author_or_Editor (Table: book_club) | Book_Title (Table: book_club) | Publisher (Table: book_club) | Category (Table: book_club) | Result (Table: book_club) | movie_id (Table: movie) | Title (Table: movie) | Year (Table: movie) | Director (Table: movie) | Budget_million (Table: movie) | Gross_worldwide (Table: movie) | Company_name (Table: culture_company) | Type (Table: culture_company) | Incorporated_in (Table: culture_company) | Group_Equity_Shareholding (Table: culture_company) | book_club_id (Table: culture_company) | movie_id (Table: culture_company)
List the id of students who registered some courses and the number of their registered courses?,"SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",* (Table: Candidate_Assessments) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | person_id (Table: People) | first_name (Table: People) | middle_name (Table: People) | last_name (Table: People) | cell_mobile_number (Table: People) | email_address (Table: People) | login_name (Table: People) | password (Table: People) | student_id (Table: Students) | student_details (Table: Students) | course_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | other_details (Table: Courses) | person_address_id (Table: People_Addresses) | person_id (Table: People_Addresses) | address_id (Table: People_Addresses) | date_from (Table: People_Addresses) | date_to (Table: People_Addresses) | student_id (Table: Student_Course_Registrations) | course_id (Table: Student_Course_Registrations) | registration_date (Table: Student_Course_Registrations) | student_id (Table: Student_Course_Attendance) | course_id (Table: Student_Course_Attendance) | date_of_attendance (Table: Student_Course_Attendance) | candidate_id (Table: Candidates) | candidate_details (Table: Candidates) | candidate_id (Table: Candidate_Assessments) | qualification (Table: Candidate_Assessments) | assessment_date (Table: Candidate_Assessments) | asessment_outcome_code (Table: Candidate_Assessments)
Find the names of all instructors in Comp. Sci. department with salary > 80000.,SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000,* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Who is the nominee who has been nominated for the most musicals?,SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1,* (Table: actor) | Musical_ID (Table: musical) | Name (Table: musical) | Year (Table: musical) | Award (Table: musical) | Category (Table: musical) | Nominee (Table: musical) | Result (Table: musical) | Actor_ID (Table: actor) | Name (Table: actor) | Musical_ID (Table: actor) | Character (Table: actor) | Duration (Table: actor) | age (Table: actor)
Please list the countries and years of film market estimations.,"SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID",* (Table: film_market_estimation) | Film_ID (Table: film) | Title (Table: film) | Studio (Table: film) | Director (Table: film) | Gross_in_dollar (Table: film) | Market_ID (Table: market) | Country (Table: market) | Number_cities (Table: market) | Estimation_ID (Table: film_market_estimation) | Low_Estimate (Table: film_market_estimation) | High_Estimate (Table: film_market_estimation) | Film_ID (Table: film_market_estimation) | Type (Table: film_market_estimation) | Market_ID (Table: film_market_estimation) | Year (Table: film_market_estimation)
"What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?",SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount),* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
Find the country of all appelations who have at most three wines.,SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3,* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
Show the name for regions not affected.,SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region),* (Table: affected_region) | Storm_ID (Table: storm) | Name (Table: storm) | Dates_active (Table: storm) | Max_speed (Table: storm) | Damage_millions_USD (Table: storm) | Number_Deaths (Table: storm) | Region_id (Table: region) | Region_code (Table: region) | Region_name (Table: region) | Region_id (Table: affected_region) | Storm_ID (Table: affected_region) | Number_city_affected (Table: affected_region)
List the name and gender for all artists who released songs in March.,"SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE ""%Mar%""",* (Table: song) | g_name (Table: genre) | rating (Table: genre) | most_popular_in (Table: genre) | artist_name (Table: artist) | country (Table: artist) | gender (Table: artist) | preferred_genre (Table: artist) | f_id (Table: files) | artist_name (Table: files) | file_size (Table: files) | duration (Table: files) | formats (Table: files) | song_name (Table: song) | artist_name (Table: song) | country (Table: song) | f_id (Table: song) | genre_is (Table: song) | rating (Table: song) | languages (Table: song) | releasedate (Table: song) | resolution (Table: song)
What is the age of the friend of Zach with longest year relationship?,SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach'),* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
Show company name and main industry without a gas station.,"SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",* (Table: station_company) | Company_ID (Table: company) | Rank (Table: company) | Company (Table: company) | Headquarters (Table: company) | Main_Industry (Table: company) | Sales_billion (Table: company) | Profits_billion (Table: company) | Assets_billion (Table: company) | Market_Value (Table: company) | Station_ID (Table: gas_station) | Open_Year (Table: gas_station) | Location (Table: gas_station) | Manager_Name (Table: gas_station) | Vice_Manager_Name (Table: gas_station) | Representative_Name (Table: gas_station) | Station_ID (Table: station_company) | Company_ID (Table: station_company) | Rank_of_the_Year (Table: station_company)
Show the document name and the document date for all documents on project with details 'Graph Database project'.,"SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'",* (Table: Accounts) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Budget_Type_Code (Table: Ref_Budget_Codes) | Budget_Type_Description (Table: Ref_Budget_Codes) | Project_ID (Table: Projects) | Project_Details (Table: Projects) | Document_ID (Table: Documents) | Document_Type_Code (Table: Documents) | Project_ID (Table: Documents) | Document_Date (Table: Documents) | Document_Name (Table: Documents) | Document_Description (Table: Documents) | Other_Details (Table: Documents) | Statement_ID (Table: Statements) | Statement_Details (Table: Statements) | Document_ID (Table: Documents_with_Expenses) | Budget_Type_Code (Table: Documents_with_Expenses) | Document_Details (Table: Documents_with_Expenses) | Account_ID (Table: Accounts) | Statement_ID (Table: Accounts) | Account_Details (Table: Accounts)
Show the average population of all counties.,SELECT avg(Population) FROM county,* (Table: election) | County_Id (Table: county) | County_name (Table: county) | Population (Table: county) | Zip_code (Table: county) | Party_ID (Table: party) | Year (Table: party) | Party (Table: party) | Governor (Table: party) | Lieutenant_Governor (Table: party) | Comptroller (Table: party) | Attorney_General (Table: party) | US_Senate (Table: party) | Election_ID (Table: election) | Counties_Represented (Table: election) | District (Table: election) | Delegate (Table: election) | Party (Table: election) | First_Elected (Table: election) | Committee (Table: election)
What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?,SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000,* (Table: Rating) | mID (Table: Movie) | title (Table: Movie) | year (Table: Movie) | director (Table: Movie) | rID (Table: Reviewer) | name (Table: Reviewer) | rID (Table: Rating) | mID (Table: Rating) | stars (Table: Rating) | ratingDate (Table: Rating)
What cities do students live in?,SELECT DISTINCT city_code FROM Student,* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
Which store owns most items?,SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1,* (Table: store) | actor_id (Table: actor) | first_name (Table: actor) | last_name (Table: actor) | last_update (Table: actor) | address_id (Table: address) | address (Table: address) | address2 (Table: address) | district (Table: address) | city_id (Table: address) | postal_code (Table: address) | phone (Table: address) | last_update (Table: address) | category_id (Table: category) | name (Table: category) | last_update (Table: category) | city_id (Table: city) | city (Table: city) | country_id (Table: city) | last_update (Table: city) | country_id (Table: country) | country (Table: country) | last_update (Table: country) | customer_id (Table: customer) | store_id (Table: customer) | first_name (Table: customer) | last_name (Table: customer) | email (Table: customer) | address_id (Table: customer) | active (Table: customer) | create_date (Table: customer) | last_update (Table: customer) | film_id (Table: film) | title (Table: film) | description (Table: film) | release_year (Table: film) | language_id (Table: film) | original_language_id (Table: film) | rental_duration (Table: film) | rental_rate (Table: film) | length (Table: film) | replacement_cost (Table: film) | rating (Table: film) | special_features (Table: film) | last_update (Table: film) | actor_id (Table: film_actor) | film_id (Table: film_actor) | last_update (Table: film_actor) | film_id (Table: film_category) | category_id (Table: film_category) | last_update (Table: film_category) | film_id (Table: film_text) | title (Table: film_text) | description (Table: film_text) | inventory_id (Table: inventory) | film_id (Table: inventory) | store_id (Table: inventory) | last_update (Table: inventory) | language_id (Table: language) | name (Table: language) | last_update (Table: language) | payment_id (Table: payment) | customer_id (Table: payment) | staff_id (Table: payment) | rental_id (Table: payment) | amount (Table: payment) | payment_date (Table: payment) | last_update (Table: payment) | rental_id (Table: rental) | rental_date (Table: rental) | inventory_id (Table: rental) | customer_id (Table: rental) | return_date (Table: rental) | staff_id (Table: rental) | last_update (Table: rental) | staff_id (Table: staff) | first_name (Table: staff) | last_name (Table: staff) | address_id (Table: staff) | picture (Table: staff) | email (Table: staff) | store_id (Table: staff) | active (Table: staff) | username (Table: staff) | password (Table: staff) | last_update (Table: staff) | store_id (Table: store) | manager_staff_id (Table: store) | address_id (Table: store) | last_update (Table: store)
What is the average price for flights from Los Angeles to Honolulu.,"SELECT avg(price) FROM Flight WHERE origin  =  ""Los Angeles"" AND destination  =  ""Honolulu""",* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
"Find the name, class and rank of all captains.","SELECT name ,  CLASS ,  rank FROM captain",* (Table: Ship) | Captain_ID (Table: captain) | Name (Table: captain) | Ship_ID (Table: captain) | age (Table: captain) | Class (Table: captain) | Rank (Table: captain) | Ship_ID (Table: Ship) | Name (Table: Ship) | Type (Table: Ship) | Built_Year (Table: Ship) | Class (Table: Ship) | Flag (Table: Ship)
List the names and origins of people who are not body builders.,"SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id",* (Table: people) | Body_Builder_ID (Table: body_builder) | People_ID (Table: body_builder) | Snatch (Table: body_builder) | Clean_Jerk (Table: body_builder) | Total (Table: body_builder) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Birth_Date (Table: people) | Birth_Place (Table: people)
"Count the number of clubs located at ""HHH"".","SELECT count(*) FROM club WHERE clublocation  =  ""HHH""",* (Table: Member_of_club) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | ClubID (Table: Club) | ClubName (Table: Club) | ClubDesc (Table: Club) | ClubLocation (Table: Club) | StuID (Table: Member_of_club) | ClubID (Table: Member_of_club) | Position (Table: Member_of_club)
"What are the famous titles and ages of each artist, listed in descending order by age?","SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC",* (Table: music_festival) | Artist_ID (Table: artist) | Artist (Table: artist) | Age (Table: artist) | Famous_Title (Table: artist) | Famous_Release_date (Table: artist) | Volume_ID (Table: volume) | Volume_Issue (Table: volume) | Issue_Date (Table: volume) | Weeks_on_Top (Table: volume) | Song (Table: volume) | Artist_ID (Table: volume) | ID (Table: music_festival) | Music_Festival (Table: music_festival) | Date_of_ceremony (Table: music_festival) | Category (Table: music_festival) | Volume (Table: music_festival) | Result (Table: music_festival)
How many distinct students are enrolled in courses?,SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment,* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
List the names of all distinct wines ordered by price.,SELECT DISTINCT Name FROM WINE ORDER BY price,* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
Find the names of customers who are not living in the state of California.,SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California',* (Table: Order_Deliveries) | product_id (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | product_description (Table: Products) | address_id (Table: Addresses) | address_details (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | date_became_customer (Table: Customers) | regular_order_id (Table: Regular_Orders) | distributer_id (Table: Regular_Orders) | regular_order_id (Table: Regular_Order_Products) | product_id (Table: Regular_Order_Products) | actual_order_id (Table: Actual_Orders) | order_status_code (Table: Actual_Orders) | regular_order_id (Table: Actual_Orders) | actual_order_date (Table: Actual_Orders) | actual_order_id (Table: Actual_Order_Products) | product_id (Table: Actual_Order_Products) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | address_type (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | route_id (Table: Delivery_Routes) | route_name (Table: Delivery_Routes) | other_route_details (Table: Delivery_Routes) | location_code (Table: Delivery_Route_Locations) | route_id (Table: Delivery_Route_Locations) | location_address_id (Table: Delivery_Route_Locations) | location_name (Table: Delivery_Route_Locations) | truck_id (Table: Trucks) | truck_licence_number (Table: Trucks) | truck_details (Table: Trucks) | employee_id (Table: Employees) | employee_address_id (Table: Employees) | employee_name (Table: Employees) | employee_phone (Table: Employees) | location_code (Table: Order_Deliveries) | actual_order_id (Table: Order_Deliveries) | delivery_status_code (Table: Order_Deliveries) | driver_employee_id (Table: Order_Deliveries) | truck_id (Table: Order_Deliveries) | delivery_date (Table: Order_Deliveries)
List countries that have more than one swimmer.,"SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1",* (Table: record) | ID (Table: swimmer) | name (Table: swimmer) | Nationality (Table: swimmer) | meter_100 (Table: swimmer) | meter_200 (Table: swimmer) | meter_300 (Table: swimmer) | meter_400 (Table: swimmer) | meter_500 (Table: swimmer) | meter_600 (Table: swimmer) | meter_700 (Table: swimmer) | Time (Table: swimmer) | ID (Table: stadium) | name (Table: stadium) | Capacity (Table: stadium) | City (Table: stadium) | Country (Table: stadium) | Opening_year (Table: stadium) | ID (Table: event) | Name (Table: event) | Stadium_ID (Table: event) | Year (Table: event) | ID (Table: record) | Result (Table: record) | Swimmer_ID (Table: record) | Event_ID (Table: record)
what is the salary and name of the employee who has the most number of aircraft certificates?,"SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
"For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.","SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",* (Table: Rating) | mID (Table: Movie) | title (Table: Movie) | year (Table: Movie) | director (Table: Movie) | rID (Table: Reviewer) | name (Table: Reviewer) | rID (Table: Rating) | mID (Table: Rating) | stars (Table: Rating) | ratingDate (Table: Rating)
"Show the id, name of each festival and the number of artworks it has nominated.","SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID",* (Table: nomination) | Festival_ID (Table: festival_detail) | Festival_Name (Table: festival_detail) | Chair_Name (Table: festival_detail) | Location (Table: festival_detail) | Year (Table: festival_detail) | Num_of_Audience (Table: festival_detail) | Artwork_ID (Table: artwork) | Type (Table: artwork) | Name (Table: artwork) | Artwork_ID (Table: nomination) | Festival_ID (Table: nomination) | Result (Table: nomination)
What are the prices of wines produced before the year of 2010?,SELECT Price FROM WINE WHERE YEAR  <  2010,* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
Find the number of students taught by TARRING LEIA.,"SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  ""TARRING"" AND T2.lastname  =  ""LEIA""",* (Table: teachers) | LastName (Table: list) | FirstName (Table: list) | Grade (Table: list) | Classroom (Table: list) | LastName (Table: teachers) | FirstName (Table: teachers) | Classroom (Table: teachers)
"How many songs, on average, are sung by a female artist?","SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  ""Female""",* (Table: song) | g_name (Table: genre) | rating (Table: genre) | most_popular_in (Table: genre) | artist_name (Table: artist) | country (Table: artist) | gender (Table: artist) | preferred_genre (Table: artist) | f_id (Table: files) | artist_name (Table: files) | file_size (Table: files) | duration (Table: files) | formats (Table: files) | song_name (Table: song) | artist_name (Table: song) | country (Table: song) | f_id (Table: song) | genre_is (Table: song) | rating (Table: song) | languages (Table: song) | releasedate (Table: song) | resolution (Table: song)
List the number of people injured by perpetrators in ascending order.,SELECT Injured FROM perpetrator ORDER BY Injured ASC,* (Table: people) | Perpetrator_ID (Table: perpetrator) | People_ID (Table: perpetrator) | Date (Table: perpetrator) | Year (Table: perpetrator) | Location (Table: perpetrator) | Country (Table: perpetrator) | Killed (Table: perpetrator) | Injured (Table: perpetrator) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Home Town (Table: people)
"What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?","SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",* (Table: station_company) | Company_ID (Table: company) | Rank (Table: company) | Company (Table: company) | Headquarters (Table: company) | Main_Industry (Table: company) | Sales_billion (Table: company) | Profits_billion (Table: company) | Assets_billion (Table: company) | Market_Value (Table: company) | Station_ID (Table: gas_station) | Open_Year (Table: gas_station) | Location (Table: gas_station) | Manager_Name (Table: gas_station) | Vice_Manager_Name (Table: gas_station) | Representative_Name (Table: gas_station) | Station_ID (Table: station_company) | Company_ID (Table: station_company) | Rank_of_the_Year (Table: station_company)
Who is the founder of Sony?,SELECT founder FROM manufacturers WHERE name  =  'Sony',* (Table: Products) | Code (Table: Manufacturers) | Name (Table: Manufacturers) | Headquarter (Table: Manufacturers) | Founder (Table: Manufacturers) | Revenue (Table: Manufacturers) | Code (Table: Products) | Name (Table: Products) | Price (Table: Products) | Manufacturer (Table: Products)
Show different carriers of phones together with the number of phones with each carrier.,"SELECT Carrier ,  COUNT(*) FROM phone GROUP BY Carrier",* (Table: phone_market) | Name (Table: phone) | Phone_ID (Table: phone) | Memory_in_G (Table: phone) | Carrier (Table: phone) | Price (Table: phone) | Market_ID (Table: market) | District (Table: market) | Num_of_employees (Table: market) | Num_of_shops (Table: market) | Ranking (Table: market) | Market_ID (Table: phone_market) | Phone_ID (Table: phone_market) | Num_of_stock (Table: phone_market)
What are the first and last names of all students who are not living in the city HKG and order the results by age?,"SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age",* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
What are the first name and department name of all employees?,"SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
Which counties have two or more delegates? Give me the county names.,SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2,* (Table: election) | County_Id (Table: county) | County_name (Table: county) | Population (Table: county) | Zip_code (Table: county) | Party_ID (Table: party) | Year (Table: party) | Party (Table: party) | Governor (Table: party) | Lieutenant_Governor (Table: party) | Comptroller (Table: party) | Attorney_General (Table: party) | US_Senate (Table: party) | Election_ID (Table: election) | Counties_Represented (Table: election) | District (Table: election) | Delegate (Table: election) | Party (Table: election) | First_Elected (Table: election) | Committee (Table: election)
What are the names and cities of the branches that do not have any registered members?,"SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",* (Table: purchase) | Member_ID (Table: member) | Card_Number (Table: member) | Name (Table: member) | Hometown (Table: member) | Level (Table: member) | Branch_ID (Table: branch) | Name (Table: branch) | Open_year (Table: branch) | Address_road (Table: branch) | City (Table: branch) | membership_amount (Table: branch) | Member_ID (Table: membership_register_branch) | Branch_ID (Table: membership_register_branch) | Register_Year (Table: membership_register_branch) | Member_ID (Table: purchase) | Branch_ID (Table: purchase) | Year (Table: purchase) | Total_pounds (Table: purchase)
List the locations that are shared by more than two wrestlers.,SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2,* (Table: Elimination) | Wrestler_ID (Table: wrestler) | Name (Table: wrestler) | Reign (Table: wrestler) | Days_held (Table: wrestler) | Location (Table: wrestler) | Event (Table: wrestler) | Elimination_ID (Table: Elimination) | Wrestler_ID (Table: Elimination) | Team (Table: Elimination) | Eliminated_By (Table: Elimination) | Elimination_Move (Table: Elimination) | Time (Table: Elimination)
Give the average number of cities within markets that had a low market estimation larger than 10000?,SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000,* (Table: film_market_estimation) | Film_ID (Table: film) | Title (Table: film) | Studio (Table: film) | Director (Table: film) | Gross_in_dollar (Table: film) | Market_ID (Table: market) | Country (Table: market) | Number_cities (Table: market) | Estimation_ID (Table: film_market_estimation) | Low_Estimate (Table: film_market_estimation) | High_Estimate (Table: film_market_estimation) | Film_ID (Table: film_market_estimation) | Type (Table: film_market_estimation) | Market_ID (Table: film_market_estimation) | Year (Table: film_market_estimation)
What is the average age of female (sex is F) students?,"SELECT avg(Age) FROM STUDENT WHERE Sex  =  ""F""",* (Table: Voting_record) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | StuID (Table: Voting_record) | Registration_Date (Table: Voting_record) | Election_Cycle (Table: Voting_record) | President_Vote (Table: Voting_record) | Vice_President_Vote (Table: Voting_record) | Secretary_Vote (Table: Voting_record) | Treasurer_Vote (Table: Voting_record) | Class_President_Vote (Table: Voting_record) | Class_Senator_Vote (Table: Voting_record)
What is the name of the instructor who advises the student with the greatest number of total credits?,SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1,* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Which of the mill names contains the french word 'Moulin'?,SELECT name FROM mill WHERE name LIKE '%Moulin%',* (Table: mill) | id (Table: architect) | name (Table: architect) | nationality (Table: architect) | gender (Table: architect) | architect_id (Table: bridge) | id (Table: bridge) | name (Table: bridge) | location (Table: bridge) | length_meters (Table: bridge) | length_feet (Table: bridge) | architect_id (Table: mill) | id (Table: mill) | location (Table: mill) | name (Table: mill) | type (Table: mill) | built_year (Table: mill) | notes (Table: mill)
Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.,"SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'",* (Table: accelerator_compatible_browser) | id (Table: Web_client_accelerator) | name (Table: Web_client_accelerator) | Operating_system (Table: Web_client_accelerator) | Client (Table: Web_client_accelerator) | Connection (Table: Web_client_accelerator) | id (Table: browser) | name (Table: browser) | market_share (Table: browser) | accelerator_id (Table: accelerator_compatible_browser) | browser_id (Table: accelerator_compatible_browser) | compatible_since_year (Table: accelerator_compatible_browser)
List the name and the number of stations for all the cities that have at least 15 stations.,"SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",* (Table: weather) | id (Table: station) | name (Table: station) | lat (Table: station) | long (Table: station) | dock_count (Table: station) | city (Table: station) | installation_date (Table: station) | station_id (Table: status) | bikes_available (Table: status) | docks_available (Table: status) | time (Table: status) | id (Table: trip) | duration (Table: trip) | start_date (Table: trip) | start_station_name (Table: trip) | start_station_id (Table: trip) | end_date (Table: trip) | end_station_name (Table: trip) | end_station_id (Table: trip) | bike_id (Table: trip) | subscription_type (Table: trip) | zip_code (Table: trip) | date (Table: weather) | max_temperature_f (Table: weather) | mean_temperature_f (Table: weather) | min_temperature_f (Table: weather) | max_dew_point_f (Table: weather) | mean_dew_point_f (Table: weather) | min_dew_point_f (Table: weather) | max_humidity (Table: weather) | mean_humidity (Table: weather) | min_humidity (Table: weather) | max_sea_level_pressure_inches (Table: weather) | mean_sea_level_pressure_inches (Table: weather) | min_sea_level_pressure_inches (Table: weather) | max_visibility_miles (Table: weather) | mean_visibility_miles (Table: weather) | min_visibility_miles (Table: weather) | max_wind_Speed_mph (Table: weather) | mean_wind_speed_mph (Table: weather) | max_gust_speed_mph (Table: weather) | precipitation_inches (Table: weather) | cloud_cover (Table: weather) | events (Table: weather) | wind_dir_degrees (Table: weather) | zip_code (Table: weather)
What are names of the movies that are either made before 1980 or directed by James Cameron?,"SELECT title FROM Movie WHERE director  =  ""James Cameron"" OR YEAR   <  1980",* (Table: Rating) | mID (Table: Movie) | title (Table: Movie) | year (Table: Movie) | director (Table: Movie) | rID (Table: Reviewer) | name (Table: Reviewer) | rID (Table: Rating) | mID (Table: Rating) | stars (Table: Rating) | ratingDate (Table: Rating)
Find the branch name of the bank that has the most number of customers.,SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1,* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
How many drama workshop groups are there in each city? Return both the city and the count.,"SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town",* (Table: Invoice_Items) | payment_method_code (Table: Ref_Payment_Methods) | payment_method_description (Table: Ref_Payment_Methods) | Service_Type_Code (Table: Ref_Service_Types) | Parent_Service_Type_Code (Table: Ref_Service_Types) | Service_Type_Description (Table: Ref_Service_Types) | Address_ID (Table: Addresses) | Line_1 (Table: Addresses) | Line_2 (Table: Addresses) | City_Town (Table: Addresses) | State_County (Table: Addresses) | Other_Details (Table: Addresses) | Product_ID (Table: Products) | Product_Name (Table: Products) | Product_Price (Table: Products) | Product_Description (Table: Products) | Other_Product_Service_Details (Table: Products) | Marketing_Region_Code (Table: Marketing_Regions) | Marketing_Region_Name (Table: Marketing_Regions) | Marketing_Region_Descriptrion (Table: Marketing_Regions) | Other_Details (Table: Marketing_Regions) | Client_ID (Table: Clients) | Address_ID (Table: Clients) | Customer_Email_Address (Table: Clients) | Customer_Name (Table: Clients) | Customer_Phone (Table: Clients) | Other_Details (Table: Clients) | Workshop_Group_ID (Table: Drama_Workshop_Groups) | Address_ID (Table: Drama_Workshop_Groups) | Currency_Code (Table: Drama_Workshop_Groups) | Marketing_Region_Code (Table: Drama_Workshop_Groups) | Store_Name (Table: Drama_Workshop_Groups) | Store_Phone (Table: Drama_Workshop_Groups) | Store_Email_Address (Table: Drama_Workshop_Groups) | Other_Details (Table: Drama_Workshop_Groups) | Performer_ID (Table: Performers) | Address_ID (Table: Performers) | Customer_Name (Table: Performers) | Customer_Phone (Table: Performers) | Customer_Email_Address (Table: Performers) | Other_Details (Table: Performers) | Customer_ID (Table: Customers) | Address_ID (Table: Customers) | Customer_Name (Table: Customers) | Customer_Phone (Table: Customers) | Customer_Email_Address (Table: Customers) | Other_Details (Table: Customers) | Store_ID (Table: Stores) | Address_ID (Table: Stores) | Marketing_Region_Code (Table: Stores) | Store_Name (Table: Stores) | Store_Phone (Table: Stores) | Store_Email_Address (Table: Stores) | Other_Details (Table: Stores) | Booking_ID (Table: Bookings) | Customer_ID (Table: Bookings) | Workshop_Group_ID (Table: Bookings) | Status_Code (Table: Bookings) | Store_ID (Table: Bookings) | Order_Date (Table: Bookings) | Planned_Delivery_Date (Table: Bookings) | Actual_Delivery_Date (Table: Bookings) | Other_Order_Details (Table: Bookings) | Order_ID (Table: Performers_in_Bookings) | Performer_ID (Table: Performers_in_Bookings) | Order_ID (Table: Customer_Orders) | Customer_ID (Table: Customer_Orders) | Store_ID (Table: Customer_Orders) | Order_Date (Table: Customer_Orders) | Planned_Delivery_Date (Table: Customer_Orders) | Actual_Delivery_Date (Table: Customer_Orders) | Other_Order_Details (Table: Customer_Orders) | Order_Item_ID (Table: Order_Items) | Order_ID (Table: Order_Items) | Product_ID (Table: Order_Items) | Order_Quantity (Table: Order_Items) | Other_Item_Details (Table: Order_Items) | Invoice_ID (Table: Invoices) | Order_ID (Table: Invoices) | payment_method_code (Table: Invoices) | Product_ID (Table: Invoices) | Order_Quantity (Table: Invoices) | Other_Item_Details (Table: Invoices) | Order_Item_ID (Table: Invoices) | Service_ID (Table: Services) | Service_Type_Code (Table: Services) | Workshop_Group_ID (Table: Services) | Product_Description (Table: Services) | Product_Name (Table: Services) | Product_Price (Table: Services) | Other_Product_Service_Details (Table: Services) | Order_ID (Table: Bookings_Services) | Product_ID (Table: Bookings_Services) | Invoice_Item_ID (Table: Invoice_Items) | Invoice_ID (Table: Invoice_Items) | Order_ID (Table: Invoice_Items) | Order_Item_ID (Table: Invoice_Items) | Product_ID (Table: Invoice_Items) | Order_Quantity (Table: Invoice_Items) | Other_Item_Details (Table: Invoice_Items)
Find the number of records of each policy type and its type code.,"SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code",* (Table: Claims_Processing) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Staff_ID (Table: Staff) | Staff_Details (Table: Staff) | Policy_ID (Table: Policies) | Customer_ID (Table: Policies) | Policy_Type_Code (Table: Policies) | Start_Date (Table: Policies) | End_Date (Table: Policies) | Claim_Header_ID (Table: Claim_Headers) | Claim_Status_Code (Table: Claim_Headers) | Claim_Type_Code (Table: Claim_Headers) | Policy_ID (Table: Claim_Headers) | Date_of_Claim (Table: Claim_Headers) | Date_of_Settlement (Table: Claim_Headers) | Amount_Claimed (Table: Claim_Headers) | Amount_Piad (Table: Claim_Headers) | Claim_ID (Table: Claims_Documents) | Document_Type_Code (Table: Claims_Documents) | Created_by_Staff_ID (Table: Claims_Documents) | Created_Date (Table: Claims_Documents) | Claim_Stage_ID (Table: Claims_Processing_Stages) | Next_Claim_Stage_ID (Table: Claims_Processing_Stages) | Claim_Status_Name (Table: Claims_Processing_Stages) | Claim_Status_Description (Table: Claims_Processing_Stages) | Claim_Processing_ID (Table: Claims_Processing) | Claim_ID (Table: Claims_Processing) | Claim_Outcome_Code (Table: Claims_Processing) | Claim_Stage_ID (Table: Claims_Processing) | Staff_ID (Table: Claims_Processing)
Return the founded year for the school with the largest enrollment.,SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1,* (Table: university) | Team_ID (Table: basketball_match) | School_ID (Table: basketball_match) | Team_Name (Table: basketball_match) | ACC_Regular_Season (Table: basketball_match) | ACC_Percent (Table: basketball_match) | ACC_Home (Table: basketball_match) | ACC_Road (Table: basketball_match) | All_Games (Table: basketball_match) | All_Games_Percent (Table: basketball_match) | All_Home (Table: basketball_match) | All_Road (Table: basketball_match) | All_Neutral (Table: basketball_match) | School_ID (Table: university) | School (Table: university) | Location (Table: university) | Founded (Table: university) | Affiliation (Table: university) | Enrollment (Table: university) | Nickname (Table: university) | Primary_conference (Table: university)
How many distinct incident type codes are there?,SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident,* (Table: Students_in_Detention) | address_type_code (Table: Ref_Address_Types) | address_type_description (Table: Ref_Address_Types) | detention_type_code (Table: Ref_Detention_Type) | detention_type_description (Table: Ref_Detention_Type) | incident_type_code (Table: Ref_Incident_Type) | incident_type_description (Table: Ref_Incident_Type) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | line_3 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | student_id (Table: Students) | address_id (Table: Students) | first_name (Table: Students) | middle_name (Table: Students) | last_name (Table: Students) | cell_mobile_number (Table: Students) | email_address (Table: Students) | date_first_rental (Table: Students) | date_left_university (Table: Students) | other_student_details (Table: Students) | teacher_id (Table: Teachers) | address_id (Table: Teachers) | first_name (Table: Teachers) | middle_name (Table: Teachers) | last_name (Table: Teachers) | gender (Table: Teachers) | cell_mobile_number (Table: Teachers) | email_address (Table: Teachers) | other_details (Table: Teachers) | notes_id (Table: Assessment_Notes) | student_id (Table: Assessment_Notes) | teacher_id (Table: Assessment_Notes) | date_of_notes (Table: Assessment_Notes) | text_of_notes (Table: Assessment_Notes) | other_details (Table: Assessment_Notes) | incident_id (Table: Behavior_Incident) | incident_type_code (Table: Behavior_Incident) | student_id (Table: Behavior_Incident) | date_incident_start (Table: Behavior_Incident) | date_incident_end (Table: Behavior_Incident) | incident_summary (Table: Behavior_Incident) | recommendations (Table: Behavior_Incident) | other_details (Table: Behavior_Incident) | detention_id (Table: Detention) | detention_type_code (Table: Detention) | teacher_id (Table: Detention) | datetime_detention_start (Table: Detention) | datetime_detention_end (Table: Detention) | detention_summary (Table: Detention) | other_details (Table: Detention) | student_id (Table: Student_Addresses) | address_id (Table: Student_Addresses) | date_address_from (Table: Student_Addresses) | date_address_to (Table: Student_Addresses) | monthly_rental (Table: Student_Addresses) | other_details (Table: Student_Addresses) | student_id (Table: Students_in_Detention) | detention_id (Table: Students_in_Detention) | incident_id (Table: Students_in_Detention)
Find the name of the train whose route runs through greatest number of stations.,SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1,* (Table: weekly_weather) | id (Table: train) | train_number (Table: train) | name (Table: train) | origin (Table: train) | destination (Table: train) | time (Table: train) | interval (Table: train) | id (Table: station) | network_name (Table: station) | services (Table: station) | local_authority (Table: station) | train_id (Table: route) | station_id (Table: route) | station_id (Table: weekly_weather) | day_of_week (Table: weekly_weather) | high_temperature (Table: weekly_weather) | low_temperature (Table: weekly_weather) | precipitation (Table: weekly_weather) | wind_speed_mph (Table: weekly_weather)
Find the number of classes in each department.,"SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code",* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
Find the number of different products that are produced by companies at different headquarter cities.,"SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter",* (Table: Products) | Code (Table: Manufacturers) | Name (Table: Manufacturers) | Headquarter (Table: Manufacturers) | Founder (Table: Manufacturers) | Revenue (Table: Manufacturers) | Code (Table: Products) | Name (Table: Products) | Price (Table: Products) | Manufacturer (Table: Products)
"What are the names of perpetrators whose country is not ""China""?","SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != ""China""",* (Table: people) | Perpetrator_ID (Table: perpetrator) | People_ID (Table: perpetrator) | Date (Table: perpetrator) | Year (Table: perpetrator) | Location (Table: perpetrator) | Country (Table: perpetrator) | Killed (Table: perpetrator) | Injured (Table: perpetrator) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Home Town (Table: people)
Count the number of schools.,SELECT count(*) FROM school,* (Table: endowment) | School_id (Table: School) | School_name (Table: School) | Location (Table: School) | Mascot (Table: School) | Enrollment (Table: School) | IHSAA_Class (Table: School) | IHSAA_Football_Class (Table: School) | County (Table: School) | School_id (Table: budget) | Year (Table: budget) | Budgeted (Table: budget) | total_budget_percent_budgeted (Table: budget) | Invested (Table: budget) | total_budget_percent_invested (Table: budget) | Budget_invested_percent (Table: budget) | endowment_id (Table: endowment) | School_id (Table: endowment) | donator_name (Table: endowment) | amount (Table: endowment)
What are total salaries and department id for each department that has more than 2 employees?,"SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2",* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
How many different types of transactions are there?,SELECT count(DISTINCT transaction_type) FROM Financial_Transactions,* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
Find the customer who started a policy most recently.,SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies),* (Table: Claims_Processing) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Staff_ID (Table: Staff) | Staff_Details (Table: Staff) | Policy_ID (Table: Policies) | Customer_ID (Table: Policies) | Policy_Type_Code (Table: Policies) | Start_Date (Table: Policies) | End_Date (Table: Policies) | Claim_Header_ID (Table: Claim_Headers) | Claim_Status_Code (Table: Claim_Headers) | Claim_Type_Code (Table: Claim_Headers) | Policy_ID (Table: Claim_Headers) | Date_of_Claim (Table: Claim_Headers) | Date_of_Settlement (Table: Claim_Headers) | Amount_Claimed (Table: Claim_Headers) | Amount_Piad (Table: Claim_Headers) | Claim_ID (Table: Claims_Documents) | Document_Type_Code (Table: Claims_Documents) | Created_by_Staff_ID (Table: Claims_Documents) | Created_Date (Table: Claims_Documents) | Claim_Stage_ID (Table: Claims_Processing_Stages) | Next_Claim_Stage_ID (Table: Claims_Processing_Stages) | Claim_Status_Name (Table: Claims_Processing_Stages) | Claim_Status_Description (Table: Claims_Processing_Stages) | Claim_Processing_ID (Table: Claims_Processing) | Claim_ID (Table: Claims_Processing) | Claim_Outcome_Code (Table: Claims_Processing) | Claim_Stage_ID (Table: Claims_Processing) | Staff_ID (Table: Claims_Processing)
Sort the information about course authors and tutors in alphabetical order of the personal name.,SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name,* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
"Show the id and star rating of each hotel, ordered by its price from low to high.","SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
List the name of ships in ascending order of tonnage.,SELECT Name FROM ship ORDER BY Tonnage ASC,* (Table: ship) | Mission_ID (Table: mission) | Ship_ID (Table: mission) | Code (Table: mission) | Launched_Year (Table: mission) | Location (Table: mission) | Speed_knots (Table: mission) | Fate (Table: mission) | Ship_ID (Table: ship) | Name (Table: ship) | Type (Table: ship) | Nationality (Table: ship) | Tonnage (Table: ship)
Find the stories of the building with the largest height.,SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1,* (Table: Office_locations) | id (Table: buildings) | name (Table: buildings) | City (Table: buildings) | Height (Table: buildings) | Stories (Table: buildings) | Status (Table: buildings) | id (Table: Companies) | name (Table: Companies) | Headquarters (Table: Companies) | Industry (Table: Companies) | Sales_billion (Table: Companies) | Profits_billion (Table: Companies) | Assets_billion (Table: Companies) | Market_Value_billion (Table: Companies) | building_id (Table: Office_locations) | company_id (Table: Office_locations) | move_in_year (Table: Office_locations)
What are the average ages for male and female students?,"SELECT avg(age) ,  sex FROM Student GROUP BY sex",* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
What is the average number of people injured by all perpetrators?,SELECT avg(Injured) FROM perpetrator,* (Table: people) | Perpetrator_ID (Table: perpetrator) | People_ID (Table: perpetrator) | Date (Table: perpetrator) | Year (Table: perpetrator) | Location (Table: perpetrator) | Country (Table: perpetrator) | Killed (Table: perpetrator) | Injured (Table: perpetrator) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Home Town (Table: people)
How many drivers did not participate in the races held in 2009?,SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 ),* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
What is the name of the activity with the most students?,SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1,* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
"How many coaches does each club has? List the club id, name and the number of coaches.","SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",* (Table: match_result) | Player_ID (Table: player) | Sponsor_name (Table: player) | Player_name (Table: player) | Gender (Table: player) | Residence (Table: player) | Occupation (Table: player) | Votes (Table: player) | Rank (Table: player) | Club_ID (Table: club) | Club_name (Table: club) | Region (Table: club) | Start_year (Table: club) | Coach_ID (Table: coach) | Coach_name (Table: coach) | Gender (Table: coach) | Club_ID (Table: coach) | Rank (Table: coach) | Player_ID (Table: player_coach) | Coach_ID (Table: player_coach) | Starting_year (Table: player_coach) | Rank (Table: match_result) | Club_ID (Table: match_result) | Gold (Table: match_result) | Big_Silver (Table: match_result) | Small_Silver (Table: match_result) | Bronze (Table: match_result) | Points (Table: match_result)
What are the top 5 countries by number of invoices and how many do they have?,"SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
Find the last names of students studying in room 111.,SELECT lastname FROM list WHERE classroom  =  111,* (Table: teachers) | LastName (Table: list) | FirstName (Table: list) | Grade (Table: list) | Classroom (Table: list) | LastName (Table: teachers) | FirstName (Table: teachers) | Classroom (Table: teachers)
What are the distinct types of mills that are built by American or Canadian architects?,SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian',* (Table: mill) | id (Table: architect) | name (Table: architect) | nationality (Table: architect) | gender (Table: architect) | architect_id (Table: bridge) | id (Table: bridge) | name (Table: bridge) | location (Table: bridge) | length_meters (Table: bridge) | length_feet (Table: bridge) | architect_id (Table: mill) | id (Table: mill) | location (Table: mill) | name (Table: mill) | type (Table: mill) | built_year (Table: mill) | notes (Table: mill)
What is the name and sex of the candidate with the highest support rate?,"SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",* (Table: people) | Candidate_ID (Table: candidate) | People_ID (Table: candidate) | Poll_Source (Table: candidate) | Date (Table: candidate) | Support_rate (Table: candidate) | Consider_rate (Table: candidate) | Oppose_rate (Table: candidate) | Unsure_rate (Table: candidate) | People_ID (Table: people) | Sex (Table: people) | Name (Table: people) | Date_of_Birth (Table: people) | Height (Table: people) | Weight (Table: people)
"What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?","SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2",* (Table: Tasks) | document_type_code (Table: Document_Types) | document_description (Table: Document_Types) | document_id (Table: Documents) | document_type_code (Table: Documents) | grant_id (Table: Documents) | sent_date (Table: Documents) | response_received_date (Table: Documents) | other_details (Table: Documents) | grant_id (Table: Grants) | organisation_id (Table: Grants) | grant_amount (Table: Grants) | grant_start_date (Table: Grants) | grant_end_date (Table: Grants) | other_details (Table: Grants) | organisation_type (Table: Organisation_Types) | organisation_type_description (Table: Organisation_Types) | organisation_id (Table: Organisations) | organisation_type (Table: Organisations) | organisation_details (Table: Organisations) | project_id (Table: Project_Outcomes) | outcome_code (Table: Project_Outcomes) | outcome_details (Table: Project_Outcomes) | staff_id (Table: Project_Staff) | project_id (Table: Project_Staff) | role_code (Table: Project_Staff) | date_from (Table: Project_Staff) | date_to (Table: Project_Staff) | other_details (Table: Project_Staff) | project_id (Table: Projects) | organisation_id (Table: Projects) | project_details (Table: Projects) | outcome_code (Table: Research_Outcomes) | outcome_description (Table: Research_Outcomes) | staff_id (Table: Research_Staff) | employer_organisation_id (Table: Research_Staff) | staff_details (Table: Research_Staff) | role_code (Table: Staff_Roles) | role_description (Table: Staff_Roles) | task_id (Table: Tasks) | project_id (Table: Tasks) | task_details (Table: Tasks) | eg Agree Objectives (Table: Tasks)
What is the average credit score for customers who have taken a loan?,SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan),* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
"Which paper is published in an institution in ""USA"" and have ""Turon"" as its second author?","SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  ""USA"" AND t2.authorder  =  2 AND t1.lname  =  ""Turon""",* (Table: Authorship) | instID (Table: Inst) | name (Table: Inst) | country (Table: Inst) | authID (Table: Authors) | lname (Table: Authors) | fname (Table: Authors) | paperID (Table: Papers) | title (Table: Papers) | authID (Table: Authorship) | instID (Table: Authorship) | paperID (Table: Authorship) | authOrder (Table: Authorship)
What are the names of members who are not in charge of any events?,SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id,* (Table: party_events) | Region_ID (Table: region) | Region_name (Table: region) | Date (Table: region) | Label (Table: region) | Format (Table: region) | Catalogue (Table: region) | Party_ID (Table: party) | Minister (Table: party) | Took_office (Table: party) | Left_office (Table: party) | Region_ID (Table: party) | Party_name (Table: party) | Member_ID (Table: member) | Member_Name (Table: member) | Party_ID (Table: member) | In_office (Table: member) | Event_ID (Table: party_events) | Event_Name (Table: party_events) | Party_ID (Table: party_events) | Member_in_charge_ID (Table: party_events)
What is the id of the instructor who advises of all students from History department?,SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History',* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.,SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80,* (Table: Acceptance) | Workshop_ID (Table: workshop) | Date (Table: workshop) | Venue (Table: workshop) | Name (Table: workshop) | Submission_ID (Table: submission) | Scores (Table: submission) | Author (Table: submission) | College (Table: submission) | Submission_ID (Table: Acceptance) | Workshop_ID (Table: Acceptance) | Result (Table: Acceptance)
"Who is performing in the back stage position for the song ""Badlands""? Show the first name and the last name.","SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  ""Badlands"" AND T1.StagePosition  =  ""back""",* (Table: Vocals) | SongId (Table: Songs) | Title (Table: Songs) | AId (Table: Albums) | Title (Table: Albums) | Year (Table: Albums) | Label (Table: Albums) | Type (Table: Albums) | Id (Table: Band) | Firstname (Table: Band) | Lastname (Table: Band) | SongId (Table: Instruments) | BandmateId (Table: Instruments) | Instrument (Table: Instruments) | SongId (Table: Performance) | Bandmate (Table: Performance) | StagePosition (Table: Performance) | AlbumId (Table: Tracklists) | Position (Table: Tracklists) | SongId (Table: Tracklists) | SongId (Table: Vocals) | Bandmate (Table: Vocals) | Type (Table: Vocals)
"Please list the years of film market estimations when the market is in country ""Japan"" in descending order.","SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  ""Japan"" ORDER BY T1.Year DESC",* (Table: film_market_estimation) | Film_ID (Table: film) | Title (Table: film) | Studio (Table: film) | Director (Table: film) | Gross_in_dollar (Table: film) | Market_ID (Table: market) | Country (Table: market) | Number_cities (Table: market) | Estimation_ID (Table: film_market_estimation) | Low_Estimate (Table: film_market_estimation) | High_Estimate (Table: film_market_estimation) | Film_ID (Table: film_market_estimation) | Type (Table: film_market_estimation) | Market_ID (Table: film_market_estimation) | Year (Table: film_market_estimation)
How many weddings are there in year 2016?,SELECT count(*) FROM wedding WHERE YEAR  =  2016,* (Table: wedding) | People_ID (Table: people) | Name (Table: people) | Country (Table: people) | Is_Male (Table: people) | Age (Table: people) | Church_ID (Table: church) | Name (Table: church) | Organized_by (Table: church) | Open_Date (Table: church) | Continuation_of (Table: church) | Church_ID (Table: wedding) | Male_ID (Table: wedding) | Female_ID (Table: wedding) | Year (Table: wedding)
Find the names of all wines produced in 2008.,"SELECT Name FROM WINE WHERE YEAR  =  ""2008""",* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
What are all the different first names of the drivers who are in position as standing and won?,SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1,* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
How many king beds are there?,SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';,* (Table: Reservations) | RoomId (Table: Rooms) | roomName (Table: Rooms) | beds (Table: Rooms) | bedType (Table: Rooms) | maxOccupancy (Table: Rooms) | basePrice (Table: Rooms) | decor (Table: Rooms) | Code (Table: Reservations) | Room (Table: Reservations) | CheckIn (Table: Reservations) | CheckOut (Table: Reservations) | Rate (Table: Reservations) | LastName (Table: Reservations) | FirstName (Table: Reservations) | Adults (Table: Reservations) | Kids (Table: Reservations)
"How many team franchises are active, with active value 'Y'?",SELECT count(*) FROM team_franchise WHERE active = 'Y';,* (Table: team_half) | player_id (Table: all_star) | year (Table: all_star) | game_num (Table: all_star) | game_id (Table: all_star) | team_id (Table: all_star) | league_id (Table: all_star) | gp (Table: all_star) | starting_pos (Table: all_star) | year (Table: appearances) | team_id (Table: appearances) | league_id (Table: appearances) | player_id (Table: appearances) | g_all (Table: appearances) | gs (Table: appearances) | g_batting (Table: appearances) | g_defense (Table: appearances) | g_p (Table: appearances) | g_c (Table: appearances) | g_1b (Table: appearances) | g_2b (Table: appearances) | g_3b (Table: appearances) | g_ss (Table: appearances) | g_lf (Table: appearances) | g_cf (Table: appearances) | g_rf (Table: appearances) | g_of (Table: appearances) | g_dh (Table: appearances) | g_ph (Table: appearances) | g_pr (Table: appearances) | player_id (Table: manager_award) | award_id (Table: manager_award) | year (Table: manager_award) | league_id (Table: manager_award) | tie (Table: manager_award) | notes (Table: manager_award) | player_id (Table: player_award) | award_id (Table: player_award) | year (Table: player_award) | league_id (Table: player_award) | tie (Table: player_award) | notes (Table: player_award) | award_id (Table: manager_award_vote) | year (Table: manager_award_vote) | league_id (Table: manager_award_vote) | player_id (Table: manager_award_vote) | points_won (Table: manager_award_vote) | points_max (Table: manager_award_vote) | votes_first (Table: manager_award_vote) | award_id (Table: player_award_vote) | year (Table: player_award_vote) | league_id (Table: player_award_vote) | player_id (Table: player_award_vote) | points_won (Table: player_award_vote) | points_max (Table: player_award_vote) | votes_first (Table: player_award_vote) | player_id (Table: batting) | year (Table: batting) | stint (Table: batting) | team_id (Table: batting) | league_id (Table: batting) | g (Table: batting) | ab (Table: batting) | r (Table: batting) | h (Table: batting) | double (Table: batting) | triple (Table: batting) | hr (Table: batting) | rbi (Table: batting) | sb (Table: batting) | cs (Table: batting) | bb (Table: batting) | so (Table: batting) | ibb (Table: batting) | hbp (Table: batting) | sh (Table: batting) | sf (Table: batting) | g_idp (Table: batting) | year (Table: batting_postseason) | round (Table: batting_postseason) | player_id (Table: batting_postseason) | team_id (Table: batting_postseason) | league_id (Table: batting_postseason) | g (Table: batting_postseason) | ab (Table: batting_postseason) | r (Table: batting_postseason) | h (Table: batting_postseason) | double (Table: batting_postseason) | triple (Table: batting_postseason) | hr (Table: batting_postseason) | rbi (Table: batting_postseason) | sb (Table: batting_postseason) | cs (Table: batting_postseason) | bb (Table: batting_postseason) | so (Table: batting_postseason) | ibb (Table: batting_postseason) | hbp (Table: batting_postseason) | sh (Table: batting_postseason) | sf (Table: batting_postseason) | g_idp (Table: batting_postseason) | player_id (Table: player_college) | college_id (Table: player_college) | year (Table: player_college) | player_id (Table: fielding) | year (Table: fielding) | stint (Table: fielding) | team_id (Table: fielding) | league_id (Table: fielding) | pos (Table: fielding) | g (Table: fielding) | gs (Table: fielding) | inn_outs (Table: fielding) | po (Table: fielding) | a (Table: fielding) | e (Table: fielding) | dp (Table: fielding) | pb (Table: fielding) | wp (Table: fielding) | sb (Table: fielding) | cs (Table: fielding) | zr (Table: fielding) | player_id (Table: fielding_outfield) | year (Table: fielding_outfield) | stint (Table: fielding_outfield) | glf (Table: fielding_outfield) | gcf (Table: fielding_outfield) | grf (Table: fielding_outfield) | player_id (Table: fielding_postseason) | year (Table: fielding_postseason) | team_id (Table: fielding_postseason) | league_id (Table: fielding_postseason) | round (Table: fielding_postseason) | pos (Table: fielding_postseason) | g (Table: fielding_postseason) | gs (Table: fielding_postseason) | inn_outs (Table: fielding_postseason) | po (Table: fielding_postseason) | a (Table: fielding_postseason) | e (Table: fielding_postseason) | dp (Table: fielding_postseason) | tp (Table: fielding_postseason) | pb (Table: fielding_postseason) | sb (Table: fielding_postseason) | cs (Table: fielding_postseason) | player_id (Table: hall_of_fame) | yearid (Table: hall_of_fame) | votedby (Table: hall_of_fame) | ballots (Table: hall_of_fame) | needed (Table: hall_of_fame) | votes (Table: hall_of_fame) | inducted (Table: hall_of_fame) | category (Table: hall_of_fame) | needed_note (Table: hall_of_fame) | year (Table: home_game) | league_id (Table: home_game) | team_id (Table: home_game) | park_id (Table: home_game) | span_first (Table: home_game) | span_last (Table: home_game) | games (Table: home_game) | openings (Table: home_game) | attendance (Table: home_game) | player_id (Table: manager) | year (Table: manager) | team_id (Table: manager) | league_id (Table: manager) | inseason (Table: manager) | g (Table: manager) | w (Table: manager) | l (Table: manager) | rank (Table: manager) | plyr_mgr (Table: manager) | player_id (Table: manager_half) | year (Table: manager_half) | team_id (Table: manager_half) | league_id (Table: manager_half) | inseason (Table: manager_half) | half (Table: manager_half) | g (Table: manager_half) | w (Table: manager_half) | l (Table: manager_half) | rank (Table: manager_half) | player_id (Table: player) | birth_year (Table: player) | birth_month (Table: player) | birth_day (Table: player) | birth_country (Table: player) | birth_state (Table: player) | birth_city (Table: player) | death_year (Table: player) | death_month (Table: player) | death_day (Table: player) | death_country (Table: player) | death_state (Table: player) | death_city (Table: player) | name_first (Table: player) | name_last (Table: player) | name_given (Table: player) | weight (Table: player) | height (Table: player) | bats (Table: player) | throws (Table: player) | debut (Table: player) | final_game (Table: player) | retro_id (Table: player) | bbref_id (Table: player) | park_id (Table: park) | park_name (Table: park) | park_alias (Table: park) | city (Table: park) | state (Table: park) | country (Table: park) | player_id (Table: pitching) | year (Table: pitching) | stint (Table: pitching) | team_id (Table: pitching) | league_id (Table: pitching) | w (Table: pitching) | l (Table: pitching) | g (Table: pitching) | gs (Table: pitching) | cg (Table: pitching) | sho (Table: pitching) | sv (Table: pitching) | ipouts (Table: pitching) | h (Table: pitching) | er (Table: pitching) | hr (Table: pitching) | bb (Table: pitching) | so (Table: pitching) | baopp (Table: pitching) | era (Table: pitching) | ibb (Table: pitching) | wp (Table: pitching) | hbp (Table: pitching) | bk (Table: pitching) | bfp (Table: pitching) | gf (Table: pitching) | r (Table: pitching) | sh (Table: pitching) | sf (Table: pitching) | g_idp (Table: pitching) | player_id (Table: pitching_postseason) | year (Table: pitching_postseason) | round (Table: pitching_postseason) | team_id (Table: pitching_postseason) | league_id (Table: pitching_postseason) | w (Table: pitching_postseason) | l (Table: pitching_postseason) | g (Table: pitching_postseason) | gs (Table: pitching_postseason) | cg (Table: pitching_postseason) | sho (Table: pitching_postseason) | sv (Table: pitching_postseason) | ipouts (Table: pitching_postseason) | h (Table: pitching_postseason) | er (Table: pitching_postseason) | hr (Table: pitching_postseason) | bb (Table: pitching_postseason) | so (Table: pitching_postseason) | baopp (Table: pitching_postseason) | era (Table: pitching_postseason) | ibb (Table: pitching_postseason) | wp (Table: pitching_postseason) | hbp (Table: pitching_postseason) | bk (Table: pitching_postseason) | bfp (Table: pitching_postseason) | gf (Table: pitching_postseason) | r (Table: pitching_postseason) | sh (Table: pitching_postseason) | sf (Table: pitching_postseason) | g_idp (Table: pitching_postseason) | year (Table: salary) | team_id (Table: salary) | league_id (Table: salary) | player_id (Table: salary) | salary (Table: salary) | college_id (Table: college) | name_full (Table: college) | city (Table: college) | state (Table: college) | country (Table: college) | year (Table: postseason) | round (Table: postseason) | team_id_winner (Table: postseason) | league_id_winner (Table: postseason) | team_id_loser (Table: postseason) | league_id_loser (Table: postseason) | wins (Table: postseason) | losses (Table: postseason) | ties (Table: postseason) | year (Table: team) | league_id (Table: team) | team_id (Table: team) | franchise_id (Table: team) | div_id (Table: team) | rank (Table: team) | g (Table: team) | ghome (Table: team) | w (Table: team) | l (Table: team) | div_win (Table: team) | wc_win (Table: team) | lg_win (Table: team) | ws_win (Table: team) | r (Table: team) | ab (Table: team) | h (Table: team) | double (Table: team) | triple (Table: team) | hr (Table: team) | bb (Table: team) | so (Table: team) | sb (Table: team) | cs (Table: team) | hbp (Table: team) | sf (Table: team) | ra (Table: team) | er (Table: team) | era (Table: team) | cg (Table: team) | sho (Table: team) | sv (Table: team) | ipouts (Table: team) | ha (Table: team) | hra (Table: team) | bba (Table: team) | soa (Table: team) | e (Table: team) | dp (Table: team) | fp (Table: team) | name (Table: team) | park (Table: team) | attendance (Table: team) | bpf (Table: team) | ppf (Table: team) | team_id_br (Table: team) | team_id_lahman45 (Table: team) | team_id_retro (Table: team) | franchise_id (Table: team_franchise) | franchise_name (Table: team_franchise) | active (Table: team_franchise) | na_assoc (Table: team_franchise) | year (Table: team_half) | league_id (Table: team_half) | team_id (Table: team_half) | half (Table: team_half) | div_id (Table: team_half) | div_win (Table: team_half) | rank (Table: team_half) | g (Table: team_half) | w (Table: team_half) | l (Table: team_half)
Count the number of chip model that do not have wifi.,SELECT count(*) FROM chip_model WHERE wifi  =  'No',* (Table: phone) | Model_name (Table: chip_model) | Launch_year (Table: chip_model) | RAM_MiB (Table: chip_model) | ROM_MiB (Table: chip_model) | Slots (Table: chip_model) | WiFi (Table: chip_model) | Bluetooth (Table: chip_model) | Graphics_mode (Table: screen_mode) | Char_cells (Table: screen_mode) | Pixels (Table: screen_mode) | Hardware_colours (Table: screen_mode) | used_kb (Table: screen_mode) | map (Table: screen_mode) | Type (Table: screen_mode) | Company_name (Table: phone) | Hardware_Model_name (Table: phone) | Accreditation_type (Table: phone) | Accreditation_level (Table: phone) | Date (Table: phone) | chip_model (Table: phone) | screen_mode (Table: phone)
What is the theme and artist name for the exhibition with a ticket price higher than the average?,"SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)",* (Table: exhibition_record) | Artist_ID (Table: artist) | Name (Table: artist) | Country (Table: artist) | Year_Join (Table: artist) | Age (Table: artist) | Exhibition_ID (Table: exhibition) | Year (Table: exhibition) | Theme (Table: exhibition) | Artist_ID (Table: exhibition) | Ticket_Price (Table: exhibition) | Exhibition_ID (Table: exhibition_record) | Date (Table: exhibition_record) | Attendance (Table: exhibition_record)
Count the number of submissions.,SELECT count(*) FROM submission,* (Table: Acceptance) | Workshop_ID (Table: workshop) | Date (Table: workshop) | Venue (Table: workshop) | Name (Table: workshop) | Submission_ID (Table: submission) | Scores (Table: submission) | Author (Table: submission) | College (Table: submission) | Submission_ID (Table: Acceptance) | Workshop_ID (Table: Acceptance) | Result (Table: Acceptance)
What is the velocity of the pilot named 'Thompson'?,SELECT avg(velocity) FROM flight WHERE pilot  =  'Thompson',* (Table: flight) | id (Table: airport) | City (Table: airport) | Country (Table: airport) | IATA (Table: airport) | ICAO (Table: airport) | name (Table: airport) | id (Table: operate_company) | name (Table: operate_company) | Type (Table: operate_company) | Principal_activities (Table: operate_company) | Incorporated_in (Table: operate_company) | Group_Equity_Shareholding (Table: operate_company) | id (Table: flight) | Vehicle_Flight_number (Table: flight) | Date (Table: flight) | Pilot (Table: flight) | Velocity (Table: flight) | Altitude (Table: flight) | airport_id (Table: flight) | company_id (Table: flight)
How many professors who are from either Accounting or Biology department?,SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology',* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
What are the name and id of the three highest priced rooms?,"SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",* (Table: Reservations) | RoomId (Table: Rooms) | roomName (Table: Rooms) | beds (Table: Rooms) | bedType (Table: Rooms) | maxOccupancy (Table: Rooms) | basePrice (Table: Rooms) | decor (Table: Rooms) | Code (Table: Reservations) | Room (Table: Reservations) | CheckIn (Table: Reservations) | CheckOut (Table: Reservations) | Rate (Table: Reservations) | LastName (Table: Reservations) | FirstName (Table: Reservations) | Adults (Table: Reservations) | Kids (Table: Reservations)
"Give me the payment Id, the date and the amount for all the payments processed with Visa.","SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'",* (Table: Payments) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Policy_ID (Table: Customer_Policies) | Customer_ID (Table: Customer_Policies) | Policy_Type_Code (Table: Customer_Policies) | Start_Date (Table: Customer_Policies) | End_Date (Table: Customer_Policies) | Claim_ID (Table: Claims) | Policy_ID (Table: Claims) | Date_Claim_Made (Table: Claims) | Date_Claim_Settled (Table: Claims) | Amount_Claimed (Table: Claims) | Amount_Settled (Table: Claims) | Settlement_ID (Table: Settlements) | Claim_ID (Table: Settlements) | Date_Claim_Made (Table: Settlements) | Date_Claim_Settled (Table: Settlements) | Amount_Claimed (Table: Settlements) | Amount_Settled (Table: Settlements) | Customer_Policy_ID (Table: Settlements) | Payment_ID (Table: Payments) | Settlement_ID (Table: Payments) | Payment_Method_Code (Table: Payments) | Date_Payment_Made (Table: Payments) | Amount_Payment (Table: Payments)
What are the different types of transactions?,SELECT DISTINCT transaction_type FROM Financial_Transactions,* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
"What are the official native languages that contain the string ""English"".","SELECT Official_native_language FROM country WHERE Official_native_language LIKE ""%English%""",* (Table: player) | Country_id (Table: country) | Country_name (Table: country) | Capital (Table: country) | Official_native_language (Table: country) | Team_id (Table: team) | Name (Table: team) | Season (Table: match_season) | Player (Table: match_season) | Position (Table: match_season) | Country (Table: match_season) | Team (Table: match_season) | Draft_Pick_Number (Table: match_season) | Draft_Class (Table: match_season) | College (Table: match_season) | Player_ID (Table: player) | Player (Table: player) | Years_Played (Table: player) | Total_WL (Table: player) | Singles_WL (Table: player) | Doubles_WL (Table: player) | Team (Table: player)
List all pilot names in ascending alphabetical order.,SELECT Name FROM pilot ORDER BY Name ASC,* (Table: airport_aircraft) | Pilot_Id (Table: pilot) | Name (Table: pilot) | Age (Table: pilot) | Aircraft_ID (Table: aircraft) | Aircraft (Table: aircraft) | Description (Table: aircraft) | Max_Gross_Weight (Table: aircraft) | Total_disk_area (Table: aircraft) | Max_disk_Loading (Table: aircraft) | Round (Table: match) | Location (Table: match) | Country (Table: match) | Date (Table: match) | Fastest_Qualifying (Table: match) | Winning_Pilot (Table: match) | Winning_Aircraft (Table: match) | Airport_ID (Table: airport) | Airport_Name (Table: airport) | Total_Passengers (Table: airport) | %_Change_2007 (Table: airport) | International_Passengers (Table: airport) | Domestic_Passengers (Table: airport) | Transit_Passengers (Table: airport) | Aircraft_Movements (Table: airport) | Freight_Metric_Tonnes (Table: airport) | ID (Table: airport_aircraft) | Airport_ID (Table: airport_aircraft) | Aircraft_ID (Table: airport_aircraft)
What are the title and issues of the books?,"SELECT Title ,  Issues FROM book",* (Table: book) | Publication_ID (Table: publication) | Book_ID (Table: publication) | Publisher (Table: publication) | Publication_Date (Table: publication) | Price (Table: publication) | Book_ID (Table: book) | Title (Table: book) | Issues (Table: book) | Writer (Table: book)
Find out 5 customers who most recently purchased something. List customers' first and last name.,"SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
What is the most popular full name of the actors?,"SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",* (Table: store) | actor_id (Table: actor) | first_name (Table: actor) | last_name (Table: actor) | last_update (Table: actor) | address_id (Table: address) | address (Table: address) | address2 (Table: address) | district (Table: address) | city_id (Table: address) | postal_code (Table: address) | phone (Table: address) | last_update (Table: address) | category_id (Table: category) | name (Table: category) | last_update (Table: category) | city_id (Table: city) | city (Table: city) | country_id (Table: city) | last_update (Table: city) | country_id (Table: country) | country (Table: country) | last_update (Table: country) | customer_id (Table: customer) | store_id (Table: customer) | first_name (Table: customer) | last_name (Table: customer) | email (Table: customer) | address_id (Table: customer) | active (Table: customer) | create_date (Table: customer) | last_update (Table: customer) | film_id (Table: film) | title (Table: film) | description (Table: film) | release_year (Table: film) | language_id (Table: film) | original_language_id (Table: film) | rental_duration (Table: film) | rental_rate (Table: film) | length (Table: film) | replacement_cost (Table: film) | rating (Table: film) | special_features (Table: film) | last_update (Table: film) | actor_id (Table: film_actor) | film_id (Table: film_actor) | last_update (Table: film_actor) | film_id (Table: film_category) | category_id (Table: film_category) | last_update (Table: film_category) | film_id (Table: film_text) | title (Table: film_text) | description (Table: film_text) | inventory_id (Table: inventory) | film_id (Table: inventory) | store_id (Table: inventory) | last_update (Table: inventory) | language_id (Table: language) | name (Table: language) | last_update (Table: language) | payment_id (Table: payment) | customer_id (Table: payment) | staff_id (Table: payment) | rental_id (Table: payment) | amount (Table: payment) | payment_date (Table: payment) | last_update (Table: payment) | rental_id (Table: rental) | rental_date (Table: rental) | inventory_id (Table: rental) | customer_id (Table: rental) | return_date (Table: rental) | staff_id (Table: rental) | last_update (Table: rental) | staff_id (Table: staff) | first_name (Table: staff) | last_name (Table: staff) | address_id (Table: staff) | picture (Table: staff) | email (Table: staff) | store_id (Table: staff) | active (Table: staff) | username (Table: staff) | password (Table: staff) | last_update (Table: staff) | store_id (Table: store) | manager_staff_id (Table: store) | address_id (Table: store) | last_update (Table: store)
Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.,"SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  ""NYC"" AND T2.Election_Cycle  =  ""Spring""",* (Table: Voting_record) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | StuID (Table: Voting_record) | Registration_Date (Table: Voting_record) | Election_Cycle (Table: Voting_record) | President_Vote (Table: Voting_record) | Vice_President_Vote (Table: Voting_record) | Secretary_Vote (Table: Voting_record) | Treasurer_Vote (Table: Voting_record) | Class_President_Vote (Table: Voting_record) | Class_Senator_Vote (Table: Voting_record)
How many unique labels are there for albums?,SELECT count(DISTINCT label) FROM albums,* (Table: Vocals) | SongId (Table: Songs) | Title (Table: Songs) | AId (Table: Albums) | Title (Table: Albums) | Year (Table: Albums) | Label (Table: Albums) | Type (Table: Albums) | Id (Table: Band) | Firstname (Table: Band) | Lastname (Table: Band) | SongId (Table: Instruments) | BandmateId (Table: Instruments) | Instrument (Table: Instruments) | SongId (Table: Performance) | Bandmate (Table: Performance) | StagePosition (Table: Performance) | AlbumId (Table: Tracklists) | Position (Table: Tracklists) | SongId (Table: Tracklists) | SongId (Table: Vocals) | Bandmate (Table: Vocals) | Type (Table: Vocals)
What are the distinct payment method codes in all the invoices?,SELECT DISTINCT payment_method_code FROM INVOICES,* (Table: Invoice_Items) | payment_method_code (Table: Ref_Payment_Methods) | payment_method_description (Table: Ref_Payment_Methods) | Service_Type_Code (Table: Ref_Service_Types) | Parent_Service_Type_Code (Table: Ref_Service_Types) | Service_Type_Description (Table: Ref_Service_Types) | Address_ID (Table: Addresses) | Line_1 (Table: Addresses) | Line_2 (Table: Addresses) | City_Town (Table: Addresses) | State_County (Table: Addresses) | Other_Details (Table: Addresses) | Product_ID (Table: Products) | Product_Name (Table: Products) | Product_Price (Table: Products) | Product_Description (Table: Products) | Other_Product_Service_Details (Table: Products) | Marketing_Region_Code (Table: Marketing_Regions) | Marketing_Region_Name (Table: Marketing_Regions) | Marketing_Region_Descriptrion (Table: Marketing_Regions) | Other_Details (Table: Marketing_Regions) | Client_ID (Table: Clients) | Address_ID (Table: Clients) | Customer_Email_Address (Table: Clients) | Customer_Name (Table: Clients) | Customer_Phone (Table: Clients) | Other_Details (Table: Clients) | Workshop_Group_ID (Table: Drama_Workshop_Groups) | Address_ID (Table: Drama_Workshop_Groups) | Currency_Code (Table: Drama_Workshop_Groups) | Marketing_Region_Code (Table: Drama_Workshop_Groups) | Store_Name (Table: Drama_Workshop_Groups) | Store_Phone (Table: Drama_Workshop_Groups) | Store_Email_Address (Table: Drama_Workshop_Groups) | Other_Details (Table: Drama_Workshop_Groups) | Performer_ID (Table: Performers) | Address_ID (Table: Performers) | Customer_Name (Table: Performers) | Customer_Phone (Table: Performers) | Customer_Email_Address (Table: Performers) | Other_Details (Table: Performers) | Customer_ID (Table: Customers) | Address_ID (Table: Customers) | Customer_Name (Table: Customers) | Customer_Phone (Table: Customers) | Customer_Email_Address (Table: Customers) | Other_Details (Table: Customers) | Store_ID (Table: Stores) | Address_ID (Table: Stores) | Marketing_Region_Code (Table: Stores) | Store_Name (Table: Stores) | Store_Phone (Table: Stores) | Store_Email_Address (Table: Stores) | Other_Details (Table: Stores) | Booking_ID (Table: Bookings) | Customer_ID (Table: Bookings) | Workshop_Group_ID (Table: Bookings) | Status_Code (Table: Bookings) | Store_ID (Table: Bookings) | Order_Date (Table: Bookings) | Planned_Delivery_Date (Table: Bookings) | Actual_Delivery_Date (Table: Bookings) | Other_Order_Details (Table: Bookings) | Order_ID (Table: Performers_in_Bookings) | Performer_ID (Table: Performers_in_Bookings) | Order_ID (Table: Customer_Orders) | Customer_ID (Table: Customer_Orders) | Store_ID (Table: Customer_Orders) | Order_Date (Table: Customer_Orders) | Planned_Delivery_Date (Table: Customer_Orders) | Actual_Delivery_Date (Table: Customer_Orders) | Other_Order_Details (Table: Customer_Orders) | Order_Item_ID (Table: Order_Items) | Order_ID (Table: Order_Items) | Product_ID (Table: Order_Items) | Order_Quantity (Table: Order_Items) | Other_Item_Details (Table: Order_Items) | Invoice_ID (Table: Invoices) | Order_ID (Table: Invoices) | payment_method_code (Table: Invoices) | Product_ID (Table: Invoices) | Order_Quantity (Table: Invoices) | Other_Item_Details (Table: Invoices) | Order_Item_ID (Table: Invoices) | Service_ID (Table: Services) | Service_Type_Code (Table: Services) | Workshop_Group_ID (Table: Services) | Product_Description (Table: Services) | Product_Name (Table: Services) | Product_Price (Table: Services) | Other_Product_Service_Details (Table: Services) | Order_ID (Table: Bookings_Services) | Product_ID (Table: Bookings_Services) | Invoice_Item_ID (Table: Invoice_Items) | Invoice_ID (Table: Invoice_Items) | Order_ID (Table: Invoice_Items) | Order_Item_ID (Table: Invoice_Items) | Product_ID (Table: Invoice_Items) | Order_Quantity (Table: Invoice_Items) | Other_Item_Details (Table: Invoice_Items)
What are the names of representatives and the dates of elections they participated in.,"SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID",* (Table: representative) | Election_ID (Table: election) | Representative_ID (Table: election) | Date (Table: election) | Votes (Table: election) | Vote_Percent (Table: election) | Seats (Table: election) | Place (Table: election) | Representative_ID (Table: representative) | Name (Table: representative) | State (Table: representative) | Party (Table: representative) | Lifespan (Table: representative)
"What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?","SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",* (Table: people) | Entrepreneur_ID (Table: entrepreneur) | People_ID (Table: entrepreneur) | Company (Table: entrepreneur) | Money_Requested (Table: entrepreneur) | Investor (Table: entrepreneur) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Date_of_Birth (Table: people)
What is all the information regarding employees with salaries above the minimum and under 2500?,SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500,* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
Find the title of course whose prerequisite is course Differential Geometry.,SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry'),* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Return the dates of ceremony and the results of all music festivals,"SELECT Date_of_ceremony ,  RESULT FROM music_festival",* (Table: music_festival) | Artist_ID (Table: artist) | Artist (Table: artist) | Age (Table: artist) | Famous_Title (Table: artist) | Famous_Release_date (Table: artist) | Volume_ID (Table: volume) | Volume_Issue (Table: volume) | Issue_Date (Table: volume) | Weeks_on_Top (Table: volume) | Song (Table: volume) | Artist_ID (Table: volume) | ID (Table: music_festival) | Music_Festival (Table: music_festival) | Date_of_ceremony (Table: music_festival) | Category (Table: music_festival) | Volume (Table: music_festival) | Result (Table: music_festival)
"Show the album names, ids and the number of tracks for each album.","SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",* (Table: Track) | AlbumId (Table: Album) | Title (Table: Album) | ArtistId (Table: Album) | ArtistId (Table: Artist) | Name (Table: Artist) | CustomerId (Table: Customer) | FirstName (Table: Customer) | LastName (Table: Customer) | Company (Table: Customer) | Address (Table: Customer) | City (Table: Customer) | State (Table: Customer) | Country (Table: Customer) | PostalCode (Table: Customer) | Phone (Table: Customer) | Fax (Table: Customer) | Email (Table: Customer) | SupportRepId (Table: Customer) | EmployeeId (Table: Employee) | LastName (Table: Employee) | FirstName (Table: Employee) | Title (Table: Employee) | ReportsTo (Table: Employee) | BirthDate (Table: Employee) | HireDate (Table: Employee) | Address (Table: Employee) | City (Table: Employee) | State (Table: Employee) | Country (Table: Employee) | PostalCode (Table: Employee) | Phone (Table: Employee) | Fax (Table: Employee) | Email (Table: Employee) | GenreId (Table: Genre) | Name (Table: Genre) | InvoiceId (Table: Invoice) | CustomerId (Table: Invoice) | InvoiceDate (Table: Invoice) | BillingAddress (Table: Invoice) | BillingCity (Table: Invoice) | BillingState (Table: Invoice) | BillingCountry (Table: Invoice) | BillingPostalCode (Table: Invoice) | Total (Table: Invoice) | InvoiceLineId (Table: InvoiceLine) | InvoiceId (Table: InvoiceLine) | TrackId (Table: InvoiceLine) | UnitPrice (Table: InvoiceLine) | Quantity (Table: InvoiceLine) | MediaTypeId (Table: MediaType) | Name (Table: MediaType) | PlaylistId (Table: Playlist) | Name (Table: Playlist) | PlaylistId (Table: PlaylistTrack) | TrackId (Table: PlaylistTrack) | TrackId (Table: Track) | Name (Table: Track) | AlbumId (Table: Track) | MediaTypeId (Table: Track) | GenreId (Table: Track) | Composer (Table: Track) | Milliseconds (Table: Track) | Bytes (Table: Track) | UnitPrice (Table: Track)
Find the male friend of Alice whose job is a doctor?,SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor',* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.,"SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",* (Table: weather) | id (Table: station) | name (Table: station) | lat (Table: station) | long (Table: station) | dock_count (Table: station) | city (Table: station) | installation_date (Table: station) | station_id (Table: status) | bikes_available (Table: status) | docks_available (Table: status) | time (Table: status) | id (Table: trip) | duration (Table: trip) | start_date (Table: trip) | start_station_name (Table: trip) | start_station_id (Table: trip) | end_date (Table: trip) | end_station_name (Table: trip) | end_station_id (Table: trip) | bike_id (Table: trip) | subscription_type (Table: trip) | zip_code (Table: trip) | date (Table: weather) | max_temperature_f (Table: weather) | mean_temperature_f (Table: weather) | min_temperature_f (Table: weather) | max_dew_point_f (Table: weather) | mean_dew_point_f (Table: weather) | min_dew_point_f (Table: weather) | max_humidity (Table: weather) | mean_humidity (Table: weather) | min_humidity (Table: weather) | max_sea_level_pressure_inches (Table: weather) | mean_sea_level_pressure_inches (Table: weather) | min_sea_level_pressure_inches (Table: weather) | max_visibility_miles (Table: weather) | mean_visibility_miles (Table: weather) | min_visibility_miles (Table: weather) | max_wind_Speed_mph (Table: weather) | mean_wind_speed_mph (Table: weather) | max_gust_speed_mph (Table: weather) | precipitation_inches (Table: weather) | cloud_cover (Table: weather) | events (Table: weather) | wind_dir_degrees (Table: weather) | zip_code (Table: weather)
Find the number of different airports which are the destinations of the American Airlines.,SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines',* (Table: airlines) | rid (Table: routes) | dst_apid (Table: routes) | dst_ap (Table: routes) | src_apid (Table: routes) | src_ap (Table: routes) | alid (Table: routes) | airline (Table: routes) | codeshare (Table: routes) | apid (Table: airports) | name (Table: airports) | city (Table: airports) | country (Table: airports) | x (Table: airports) | y (Table: airports) | elevation (Table: airports) | iata (Table: airports) | icao (Table: airports) | alid (Table: airlines) | name (Table: airlines) | iata (Table: airlines) | icao (Table: airlines) | callsign (Table: airlines) | country (Table: airlines) | active (Table: airlines)
"For each county, find the name of the county and the number of delegates from that county.","SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",* (Table: election) | County_Id (Table: county) | County_name (Table: county) | Population (Table: county) | Zip_code (Table: county) | Party_ID (Table: party) | Year (Table: party) | Party (Table: party) | Governor (Table: party) | Lieutenant_Governor (Table: party) | Comptroller (Table: party) | Attorney_General (Table: party) | US_Senate (Table: party) | Election_ID (Table: election) | Counties_Represented (Table: election) | District (Table: election) | Delegate (Table: election) | Party (Table: election) | First_Elected (Table: election) | Committee (Table: election)
What are the names and capitals of each country?,"SELECT Country_name ,  Capital FROM country",* (Table: player) | Country_id (Table: country) | Country_name (Table: country) | Capital (Table: country) | Official_native_language (Table: country) | Team_id (Table: team) | Name (Table: team) | Season (Table: match_season) | Player (Table: match_season) | Position (Table: match_season) | Country (Table: match_season) | Team (Table: match_season) | Draft_Pick_Number (Table: match_season) | Draft_Class (Table: match_season) | College (Table: match_season) | Player_ID (Table: player) | Player (Table: player) | Years_Played (Table: player) | Total_WL (Table: player) | Singles_WL (Table: player) | Doubles_WL (Table: player) | Team (Table: player)
Show all the buildings that have at least 10 professors.,"SELECT building FROM Faculty WHERE rank  =  ""Professor"" GROUP BY building HAVING count(*)  >=  10",* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
Find the number of dorms that have some amenity.,SELECT count(DISTINCT dormid) FROM has_amenity,* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
How many lessons taught by staff whose first name has letter 'a' in it?,"SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE ""%a%""",* (Table: Lessons) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | staff_id (Table: Staff) | staff_address_id (Table: Staff) | nickname (Table: Staff) | first_name (Table: Staff) | middle_name (Table: Staff) | last_name (Table: Staff) | date_of_birth (Table: Staff) | date_joined_staff (Table: Staff) | date_left_staff (Table: Staff) | vehicle_id (Table: Vehicles) | vehicle_details (Table: Vehicles) | customer_id (Table: Customers) | customer_address_id (Table: Customers) | customer_status_code (Table: Customers) | date_became_customer (Table: Customers) | date_of_birth (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | amount_outstanding (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | cell_mobile_phone_number (Table: Customers) | customer_id (Table: Customer_Payments) | datetime_payment (Table: Customer_Payments) | payment_method_code (Table: Customer_Payments) | amount_payment (Table: Customer_Payments) | lesson_id (Table: Lessons) | customer_id (Table: Lessons) | lesson_status_code (Table: Lessons) | staff_id (Table: Lessons) | vehicle_id (Table: Lessons) | lesson_date (Table: Lessons) | lesson_time (Table: Lessons) | price (Table: Lessons)
Find the checking balance of the accounts whose savings balance is higher than the average savings balance.,SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings)),* (Table: CHECKING) | custid (Table: ACCOUNTS) | name (Table: ACCOUNTS) | custid (Table: SAVINGS) | balance (Table: SAVINGS) | custid (Table: CHECKING) | balance (Table: CHECKING)
"What are the different customer ids, and how many cards does each one hold?","SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id",* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
Find the ids of the nurses who are on call in block floor 1 and block code 1.,SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1,* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
What are the first and last names of the 5 customers who purchased something most recently?,"SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
Show all transaction types.,SELECT DISTINCT transaction_type FROM Financial_Transactions,* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
What are the names of perpetrators?,SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID,* (Table: people) | Perpetrator_ID (Table: perpetrator) | People_ID (Table: perpetrator) | Date (Table: perpetrator) | Year (Table: perpetrator) | Location (Table: perpetrator) | Country (Table: perpetrator) | Killed (Table: perpetrator) | Injured (Table: perpetrator) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Home Town (Table: people)
What are the total enrollments of universities of each affiliation type?,"SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation",* (Table: university) | Team_ID (Table: basketball_match) | School_ID (Table: basketball_match) | Team_Name (Table: basketball_match) | ACC_Regular_Season (Table: basketball_match) | ACC_Percent (Table: basketball_match) | ACC_Home (Table: basketball_match) | ACC_Road (Table: basketball_match) | All_Games (Table: basketball_match) | All_Games_Percent (Table: basketball_match) | All_Home (Table: basketball_match) | All_Road (Table: basketball_match) | All_Neutral (Table: basketball_match) | School_ID (Table: university) | School (Table: university) | Location (Table: university) | Founded (Table: university) | Affiliation (Table: university) | Enrollment (Table: university) | Nickname (Table: university) | Primary_conference (Table: university)
Show the status shared by cities with population bigger than 1500 and smaller than 500.,SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500,* (Table: competition_record) | City_ID (Table: city) | Official_Name (Table: city) | Status (Table: city) | Area_km_2 (Table: city) | Population (Table: city) | Census_Ranking (Table: city) | Farm_ID (Table: farm) | Year (Table: farm) | Total_Horses (Table: farm) | Working_Horses (Table: farm) | Total_Cattle (Table: farm) | Oxen (Table: farm) | Bulls (Table: farm) | Cows (Table: farm) | Pigs (Table: farm) | Sheep_and_Goats (Table: farm) | Competition_ID (Table: farm_competition) | Year (Table: farm_competition) | Theme (Table: farm_competition) | Host_city_ID (Table: farm_competition) | Hosts (Table: farm_competition) | Competition_ID (Table: competition_record) | Farm_ID (Table: competition_record) | Rank (Table: competition_record)
What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?,SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7,* (Table: weather) | id (Table: station) | name (Table: station) | lat (Table: station) | long (Table: station) | dock_count (Table: station) | city (Table: station) | installation_date (Table: station) | station_id (Table: status) | bikes_available (Table: status) | docks_available (Table: status) | time (Table: status) | id (Table: trip) | duration (Table: trip) | start_date (Table: trip) | start_station_name (Table: trip) | start_station_id (Table: trip) | end_date (Table: trip) | end_station_name (Table: trip) | end_station_id (Table: trip) | bike_id (Table: trip) | subscription_type (Table: trip) | zip_code (Table: trip) | date (Table: weather) | max_temperature_f (Table: weather) | mean_temperature_f (Table: weather) | min_temperature_f (Table: weather) | max_dew_point_f (Table: weather) | mean_dew_point_f (Table: weather) | min_dew_point_f (Table: weather) | max_humidity (Table: weather) | mean_humidity (Table: weather) | min_humidity (Table: weather) | max_sea_level_pressure_inches (Table: weather) | mean_sea_level_pressure_inches (Table: weather) | min_sea_level_pressure_inches (Table: weather) | max_visibility_miles (Table: weather) | mean_visibility_miles (Table: weather) | min_visibility_miles (Table: weather) | max_wind_Speed_mph (Table: weather) | mean_wind_speed_mph (Table: weather) | max_gust_speed_mph (Table: weather) | precipitation_inches (Table: weather) | cloud_cover (Table: weather) | events (Table: weather) | wind_dir_degrees (Table: weather) | zip_code (Table: weather)
How many students have a food allergy?,"SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  ""food""",* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
How many lessons were in cancelled state?,"SELECT count(*) FROM Lessons WHERE lesson_status_code = ""Cancelled"";",* (Table: Lessons) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | staff_id (Table: Staff) | staff_address_id (Table: Staff) | nickname (Table: Staff) | first_name (Table: Staff) | middle_name (Table: Staff) | last_name (Table: Staff) | date_of_birth (Table: Staff) | date_joined_staff (Table: Staff) | date_left_staff (Table: Staff) | vehicle_id (Table: Vehicles) | vehicle_details (Table: Vehicles) | customer_id (Table: Customers) | customer_address_id (Table: Customers) | customer_status_code (Table: Customers) | date_became_customer (Table: Customers) | date_of_birth (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | amount_outstanding (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | cell_mobile_phone_number (Table: Customers) | customer_id (Table: Customer_Payments) | datetime_payment (Table: Customer_Payments) | payment_method_code (Table: Customer_Payments) | amount_payment (Table: Customer_Payments) | lesson_id (Table: Lessons) | customer_id (Table: Lessons) | lesson_status_code (Table: Lessons) | staff_id (Table: Lessons) | vehicle_id (Table: Lessons) | lesson_date (Table: Lessons) | lesson_time (Table: Lessons) | price (Table: Lessons)
How many movie ratings have more than 3 stars?,SELECT count(*) FROM Rating WHERE stars  >  3,* (Table: Rating) | mID (Table: Movie) | title (Table: Movie) | year (Table: Movie) | director (Table: Movie) | rID (Table: Reviewer) | name (Table: Reviewer) | rID (Table: Rating) | mID (Table: Rating) | stars (Table: Rating) | ratingDate (Table: Rating)
How many faculty do we have?,SELECT count(*) FROM Faculty,* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
Find the famous titles of artists that do not have any volume.,SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume),* (Table: music_festival) | Artist_ID (Table: artist) | Artist (Table: artist) | Age (Table: artist) | Famous_Title (Table: artist) | Famous_Release_date (Table: artist) | Volume_ID (Table: volume) | Volume_Issue (Table: volume) | Issue_Date (Table: volume) | Weeks_on_Top (Table: volume) | Song (Table: volume) | Artist_ID (Table: volume) | ID (Table: music_festival) | Music_Festival (Table: music_festival) | Date_of_ceremony (Table: music_festival) | Category (Table: music_festival) | Volume (Table: music_festival) | Result (Table: music_festival)
List the builders of railways in ascending alphabetical order.,SELECT Builder FROM railway ORDER BY Builder ASC,* (Table: railway_manage) | Railway_ID (Table: railway) | Railway (Table: railway) | Builder (Table: railway) | Built (Table: railway) | Wheels (Table: railway) | Location (Table: railway) | ObjectNumber (Table: railway) | Train_ID (Table: train) | Train_Num (Table: train) | Name (Table: train) | From (Table: train) | Arrival (Table: train) | Railway_ID (Table: train) | Manager_ID (Table: manager) | Name (Table: manager) | Country (Table: manager) | Working_year_starts (Table: manager) | Age (Table: manager) | Level (Table: manager) | Railway_ID (Table: railway_manage) | Manager_ID (Table: railway_manage) | From_Year (Table: railway_manage)
Return the name of the heaviest entrepreneur.,SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1,* (Table: people) | Entrepreneur_ID (Table: entrepreneur) | People_ID (Table: entrepreneur) | Company (Table: entrepreneur) | Money_Requested (Table: entrepreneur) | Investor (Table: entrepreneur) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Date_of_Birth (Table: people)
Show different teams in eliminations and the number of eliminations from each team.,"SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",* (Table: Elimination) | Wrestler_ID (Table: wrestler) | Name (Table: wrestler) | Reign (Table: wrestler) | Days_held (Table: wrestler) | Location (Table: wrestler) | Event (Table: wrestler) | Elimination_ID (Table: Elimination) | Wrestler_ID (Table: Elimination) | Team (Table: Elimination) | Eliminated_By (Table: Elimination) | Elimination_Move (Table: Elimination) | Time (Table: Elimination)
Show ids for all the male faculty.,SELECT FacID FROM Faculty WHERE Sex  =  'M',* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
What are the email addresses and date of births for all customers who have a first name of Carole?,"SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = ""Carole""",* (Table: Lessons) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | staff_id (Table: Staff) | staff_address_id (Table: Staff) | nickname (Table: Staff) | first_name (Table: Staff) | middle_name (Table: Staff) | last_name (Table: Staff) | date_of_birth (Table: Staff) | date_joined_staff (Table: Staff) | date_left_staff (Table: Staff) | vehicle_id (Table: Vehicles) | vehicle_details (Table: Vehicles) | customer_id (Table: Customers) | customer_address_id (Table: Customers) | customer_status_code (Table: Customers) | date_became_customer (Table: Customers) | date_of_birth (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | amount_outstanding (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | cell_mobile_phone_number (Table: Customers) | customer_id (Table: Customer_Payments) | datetime_payment (Table: Customer_Payments) | payment_method_code (Table: Customer_Payments) | amount_payment (Table: Customer_Payments) | lesson_id (Table: Lessons) | customer_id (Table: Lessons) | lesson_status_code (Table: Lessons) | staff_id (Table: Lessons) | vehicle_id (Table: Lessons) | lesson_date (Table: Lessons) | lesson_time (Table: Lessons) | price (Table: Lessons)
What is the name and description for document type code RV?,"SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  ""RV""",* (Table: Documents_to_be_Destroyed) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Calendar_Date (Table: Ref_Calendar) | Day_Number (Table: Ref_Calendar) | Location_Code (Table: Ref_Locations) | Location_Name (Table: Ref_Locations) | Location_Description (Table: Ref_Locations) | Role_Code (Table: Roles) | Role_Name (Table: Roles) | Role_Description (Table: Roles) | Document_ID (Table: All_Documents) | Date_Stored (Table: All_Documents) | Document_Type_Code (Table: All_Documents) | Document_Name (Table: All_Documents) | Document_Description (Table: All_Documents) | Other_Details (Table: All_Documents) | Employee_ID (Table: Employees) | Role_Code (Table: Employees) | Employee_Name (Table: Employees) | Gender_MFU (Table: Employees) | Date_of_Birth (Table: Employees) | Other_Details (Table: Employees) | Document_ID (Table: Document_Locations) | Location_Code (Table: Document_Locations) | Date_in_Location_From (Table: Document_Locations) | Date_in_Locaton_To (Table: Document_Locations) | Document_ID (Table: Documents_to_be_Destroyed) | Destruction_Authorised_by_Employee_ID (Table: Documents_to_be_Destroyed) | Destroyed_by_Employee_ID (Table: Documents_to_be_Destroyed) | Planned_Destruction_Date (Table: Documents_to_be_Destroyed) | Actual_Destruction_Date (Table: Documents_to_be_Destroyed) | Other_Details (Table: Documents_to_be_Destroyed)
Count the number of films whose title contains the word 'Dummy'.,"SELECT count(*) FROM film WHERE title LIKE ""%Dummy%""",* (Table: schedule) | Film_ID (Table: film) | Rank_in_series (Table: film) | Number_in_season (Table: film) | Title (Table: film) | Directed_by (Table: film) | Original_air_date (Table: film) | Production_code (Table: film) | Cinema_ID (Table: cinema) | Name (Table: cinema) | Openning_year (Table: cinema) | Capacity (Table: cinema) | Location (Table: cinema) | Cinema_ID (Table: schedule) | Film_ID (Table: schedule) | Date (Table: schedule) | Show_times_per_day (Table: schedule) | Price (Table: schedule)
List all the contact channel codes that were used less than 5 times.,SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5,* (Table: Order_Items) | address_id (Table: Addresses) | address_content (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | product_id (Table: Products) | product_details (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | date_became_customer (Table: Customers) | other_customer_details (Table: Customers) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | customer_id (Table: Customer_Contact_Channels) | channel_code (Table: Customer_Contact_Channels) | active_from_date (Table: Customer_Contact_Channels) | active_to_date (Table: Customer_Contact_Channels) | contact_number (Table: Customer_Contact_Channels) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status (Table: Customer_Orders) | order_date (Table: Customer_Orders) | order_details (Table: Customer_Orders) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | order_quantity (Table: Order_Items)
"Return the average, minimum, maximum, and total transaction amounts.","SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
What are the full names of customers with the account name 900?,"SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  ""900""",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
List the titles of all items in alphabetic order .,SELECT title FROM item ORDER BY title,* (Table: trust) | i_id (Table: item) | title (Table: item) | a_id (Table: review) | u_id (Table: review) | i_id (Table: review) | rating (Table: review) | rank (Table: review) | u_id (Table: useracct) | name (Table: useracct) | source_u_id (Table: trust) | target_u_id (Table: trust) | trust (Table: trust)
Find the ids and names of stations from which at least 200 trips started.,"SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",* (Table: weather) | id (Table: station) | name (Table: station) | lat (Table: station) | long (Table: station) | dock_count (Table: station) | city (Table: station) | installation_date (Table: station) | station_id (Table: status) | bikes_available (Table: status) | docks_available (Table: status) | time (Table: status) | id (Table: trip) | duration (Table: trip) | start_date (Table: trip) | start_station_name (Table: trip) | start_station_id (Table: trip) | end_date (Table: trip) | end_station_name (Table: trip) | end_station_id (Table: trip) | bike_id (Table: trip) | subscription_type (Table: trip) | zip_code (Table: trip) | date (Table: weather) | max_temperature_f (Table: weather) | mean_temperature_f (Table: weather) | min_temperature_f (Table: weather) | max_dew_point_f (Table: weather) | mean_dew_point_f (Table: weather) | min_dew_point_f (Table: weather) | max_humidity (Table: weather) | mean_humidity (Table: weather) | min_humidity (Table: weather) | max_sea_level_pressure_inches (Table: weather) | mean_sea_level_pressure_inches (Table: weather) | min_sea_level_pressure_inches (Table: weather) | max_visibility_miles (Table: weather) | mean_visibility_miles (Table: weather) | min_visibility_miles (Table: weather) | max_wind_Speed_mph (Table: weather) | mean_wind_speed_mph (Table: weather) | max_gust_speed_mph (Table: weather) | precipitation_inches (Table: weather) | cloud_cover (Table: weather) | events (Table: weather) | wind_dir_degrees (Table: weather) | zip_code (Table: weather)
What are the names of all schools that have students trying out for the position of goal and 'mid'-field.,SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid',* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
What are the total purchases for members rated at level 6?,SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6,* (Table: purchase) | Member_ID (Table: member) | Card_Number (Table: member) | Name (Table: member) | Hometown (Table: member) | Level (Table: member) | Branch_ID (Table: branch) | Name (Table: branch) | Open_year (Table: branch) | Address_road (Table: branch) | City (Table: branch) | membership_amount (Table: branch) | Member_ID (Table: membership_register_branch) | Branch_ID (Table: membership_register_branch) | Register_Year (Table: membership_register_branch) | Member_ID (Table: purchase) | Branch_ID (Table: purchase) | Year (Table: purchase) | Total_pounds (Table: purchase)
How many counties are there?,SELECT count(*) FROM county_public_safety,* (Table: city) | County_ID (Table: county_public_safety) | Name (Table: county_public_safety) | Population (Table: county_public_safety) | Police_officers (Table: county_public_safety) | Residents_per_officer (Table: county_public_safety) | Case_burden (Table: county_public_safety) | Crime_rate (Table: county_public_safety) | Police_force (Table: county_public_safety) | Location (Table: county_public_safety) | City_ID (Table: city) | County_ID (Table: city) | Name (Table: city) | White (Table: city) | Black (Table: city) | Amerindian (Table: city) | Asian (Table: city) | Multiracial (Table: city) | Hispanic (Table: city)
Show names of cities and names of counties they are in.,"SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID",* (Table: city) | County_ID (Table: county_public_safety) | Name (Table: county_public_safety) | Population (Table: county_public_safety) | Police_officers (Table: county_public_safety) | Residents_per_officer (Table: county_public_safety) | Case_burden (Table: county_public_safety) | Crime_rate (Table: county_public_safety) | Police_force (Table: county_public_safety) | Location (Table: county_public_safety) | City_ID (Table: city) | County_ID (Table: city) | Name (Table: city) | White (Table: city) | Black (Table: city) | Amerindian (Table: city) | Asian (Table: city) | Multiracial (Table: city) | Hispanic (Table: city)
Count the number of colors.,SELECT count(*) FROM ref_colors,* (Table: Product_Characteristics) | characteristic_type_code (Table: Ref_Characteristic_Types) | characteristic_type_description (Table: Ref_Characteristic_Types) | color_code (Table: Ref_Colors) | color_description (Table: Ref_Colors) | product_category_code (Table: Ref_Product_Categories) | product_category_description (Table: Ref_Product_Categories) | unit_of_measure (Table: Ref_Product_Categories) | characteristic_id (Table: Characteristics) | characteristic_type_code (Table: Characteristics) | characteristic_data_type (Table: Characteristics) | characteristic_name (Table: Characteristics) | other_characteristic_details (Table: Characteristics) | product_id (Table: Products) | color_code (Table: Products) | product_category_code (Table: Products) | product_name (Table: Products) | typical_buying_price (Table: Products) | typical_selling_price (Table: Products) | product_description (Table: Products) | other_product_details (Table: Products) | product_id (Table: Product_Characteristics) | characteristic_id (Table: Product_Characteristics) | product_characteristic_value (Table: Product_Characteristics)
Find all the cities that have 2 to 4 parks.,SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;,* (Table: team_half) | player_id (Table: all_star) | year (Table: all_star) | game_num (Table: all_star) | game_id (Table: all_star) | team_id (Table: all_star) | league_id (Table: all_star) | gp (Table: all_star) | starting_pos (Table: all_star) | year (Table: appearances) | team_id (Table: appearances) | league_id (Table: appearances) | player_id (Table: appearances) | g_all (Table: appearances) | gs (Table: appearances) | g_batting (Table: appearances) | g_defense (Table: appearances) | g_p (Table: appearances) | g_c (Table: appearances) | g_1b (Table: appearances) | g_2b (Table: appearances) | g_3b (Table: appearances) | g_ss (Table: appearances) | g_lf (Table: appearances) | g_cf (Table: appearances) | g_rf (Table: appearances) | g_of (Table: appearances) | g_dh (Table: appearances) | g_ph (Table: appearances) | g_pr (Table: appearances) | player_id (Table: manager_award) | award_id (Table: manager_award) | year (Table: manager_award) | league_id (Table: manager_award) | tie (Table: manager_award) | notes (Table: manager_award) | player_id (Table: player_award) | award_id (Table: player_award) | year (Table: player_award) | league_id (Table: player_award) | tie (Table: player_award) | notes (Table: player_award) | award_id (Table: manager_award_vote) | year (Table: manager_award_vote) | league_id (Table: manager_award_vote) | player_id (Table: manager_award_vote) | points_won (Table: manager_award_vote) | points_max (Table: manager_award_vote) | votes_first (Table: manager_award_vote) | award_id (Table: player_award_vote) | year (Table: player_award_vote) | league_id (Table: player_award_vote) | player_id (Table: player_award_vote) | points_won (Table: player_award_vote) | points_max (Table: player_award_vote) | votes_first (Table: player_award_vote) | player_id (Table: batting) | year (Table: batting) | stint (Table: batting) | team_id (Table: batting) | league_id (Table: batting) | g (Table: batting) | ab (Table: batting) | r (Table: batting) | h (Table: batting) | double (Table: batting) | triple (Table: batting) | hr (Table: batting) | rbi (Table: batting) | sb (Table: batting) | cs (Table: batting) | bb (Table: batting) | so (Table: batting) | ibb (Table: batting) | hbp (Table: batting) | sh (Table: batting) | sf (Table: batting) | g_idp (Table: batting) | year (Table: batting_postseason) | round (Table: batting_postseason) | player_id (Table: batting_postseason) | team_id (Table: batting_postseason) | league_id (Table: batting_postseason) | g (Table: batting_postseason) | ab (Table: batting_postseason) | r (Table: batting_postseason) | h (Table: batting_postseason) | double (Table: batting_postseason) | triple (Table: batting_postseason) | hr (Table: batting_postseason) | rbi (Table: batting_postseason) | sb (Table: batting_postseason) | cs (Table: batting_postseason) | bb (Table: batting_postseason) | so (Table: batting_postseason) | ibb (Table: batting_postseason) | hbp (Table: batting_postseason) | sh (Table: batting_postseason) | sf (Table: batting_postseason) | g_idp (Table: batting_postseason) | player_id (Table: player_college) | college_id (Table: player_college) | year (Table: player_college) | player_id (Table: fielding) | year (Table: fielding) | stint (Table: fielding) | team_id (Table: fielding) | league_id (Table: fielding) | pos (Table: fielding) | g (Table: fielding) | gs (Table: fielding) | inn_outs (Table: fielding) | po (Table: fielding) | a (Table: fielding) | e (Table: fielding) | dp (Table: fielding) | pb (Table: fielding) | wp (Table: fielding) | sb (Table: fielding) | cs (Table: fielding) | zr (Table: fielding) | player_id (Table: fielding_outfield) | year (Table: fielding_outfield) | stint (Table: fielding_outfield) | glf (Table: fielding_outfield) | gcf (Table: fielding_outfield) | grf (Table: fielding_outfield) | player_id (Table: fielding_postseason) | year (Table: fielding_postseason) | team_id (Table: fielding_postseason) | league_id (Table: fielding_postseason) | round (Table: fielding_postseason) | pos (Table: fielding_postseason) | g (Table: fielding_postseason) | gs (Table: fielding_postseason) | inn_outs (Table: fielding_postseason) | po (Table: fielding_postseason) | a (Table: fielding_postseason) | e (Table: fielding_postseason) | dp (Table: fielding_postseason) | tp (Table: fielding_postseason) | pb (Table: fielding_postseason) | sb (Table: fielding_postseason) | cs (Table: fielding_postseason) | player_id (Table: hall_of_fame) | yearid (Table: hall_of_fame) | votedby (Table: hall_of_fame) | ballots (Table: hall_of_fame) | needed (Table: hall_of_fame) | votes (Table: hall_of_fame) | inducted (Table: hall_of_fame) | category (Table: hall_of_fame) | needed_note (Table: hall_of_fame) | year (Table: home_game) | league_id (Table: home_game) | team_id (Table: home_game) | park_id (Table: home_game) | span_first (Table: home_game) | span_last (Table: home_game) | games (Table: home_game) | openings (Table: home_game) | attendance (Table: home_game) | player_id (Table: manager) | year (Table: manager) | team_id (Table: manager) | league_id (Table: manager) | inseason (Table: manager) | g (Table: manager) | w (Table: manager) | l (Table: manager) | rank (Table: manager) | plyr_mgr (Table: manager) | player_id (Table: manager_half) | year (Table: manager_half) | team_id (Table: manager_half) | league_id (Table: manager_half) | inseason (Table: manager_half) | half (Table: manager_half) | g (Table: manager_half) | w (Table: manager_half) | l (Table: manager_half) | rank (Table: manager_half) | player_id (Table: player) | birth_year (Table: player) | birth_month (Table: player) | birth_day (Table: player) | birth_country (Table: player) | birth_state (Table: player) | birth_city (Table: player) | death_year (Table: player) | death_month (Table: player) | death_day (Table: player) | death_country (Table: player) | death_state (Table: player) | death_city (Table: player) | name_first (Table: player) | name_last (Table: player) | name_given (Table: player) | weight (Table: player) | height (Table: player) | bats (Table: player) | throws (Table: player) | debut (Table: player) | final_game (Table: player) | retro_id (Table: player) | bbref_id (Table: player) | park_id (Table: park) | park_name (Table: park) | park_alias (Table: park) | city (Table: park) | state (Table: park) | country (Table: park) | player_id (Table: pitching) | year (Table: pitching) | stint (Table: pitching) | team_id (Table: pitching) | league_id (Table: pitching) | w (Table: pitching) | l (Table: pitching) | g (Table: pitching) | gs (Table: pitching) | cg (Table: pitching) | sho (Table: pitching) | sv (Table: pitching) | ipouts (Table: pitching) | h (Table: pitching) | er (Table: pitching) | hr (Table: pitching) | bb (Table: pitching) | so (Table: pitching) | baopp (Table: pitching) | era (Table: pitching) | ibb (Table: pitching) | wp (Table: pitching) | hbp (Table: pitching) | bk (Table: pitching) | bfp (Table: pitching) | gf (Table: pitching) | r (Table: pitching) | sh (Table: pitching) | sf (Table: pitching) | g_idp (Table: pitching) | player_id (Table: pitching_postseason) | year (Table: pitching_postseason) | round (Table: pitching_postseason) | team_id (Table: pitching_postseason) | league_id (Table: pitching_postseason) | w (Table: pitching_postseason) | l (Table: pitching_postseason) | g (Table: pitching_postseason) | gs (Table: pitching_postseason) | cg (Table: pitching_postseason) | sho (Table: pitching_postseason) | sv (Table: pitching_postseason) | ipouts (Table: pitching_postseason) | h (Table: pitching_postseason) | er (Table: pitching_postseason) | hr (Table: pitching_postseason) | bb (Table: pitching_postseason) | so (Table: pitching_postseason) | baopp (Table: pitching_postseason) | era (Table: pitching_postseason) | ibb (Table: pitching_postseason) | wp (Table: pitching_postseason) | hbp (Table: pitching_postseason) | bk (Table: pitching_postseason) | bfp (Table: pitching_postseason) | gf (Table: pitching_postseason) | r (Table: pitching_postseason) | sh (Table: pitching_postseason) | sf (Table: pitching_postseason) | g_idp (Table: pitching_postseason) | year (Table: salary) | team_id (Table: salary) | league_id (Table: salary) | player_id (Table: salary) | salary (Table: salary) | college_id (Table: college) | name_full (Table: college) | city (Table: college) | state (Table: college) | country (Table: college) | year (Table: postseason) | round (Table: postseason) | team_id_winner (Table: postseason) | league_id_winner (Table: postseason) | team_id_loser (Table: postseason) | league_id_loser (Table: postseason) | wins (Table: postseason) | losses (Table: postseason) | ties (Table: postseason) | year (Table: team) | league_id (Table: team) | team_id (Table: team) | franchise_id (Table: team) | div_id (Table: team) | rank (Table: team) | g (Table: team) | ghome (Table: team) | w (Table: team) | l (Table: team) | div_win (Table: team) | wc_win (Table: team) | lg_win (Table: team) | ws_win (Table: team) | r (Table: team) | ab (Table: team) | h (Table: team) | double (Table: team) | triple (Table: team) | hr (Table: team) | bb (Table: team) | so (Table: team) | sb (Table: team) | cs (Table: team) | hbp (Table: team) | sf (Table: team) | ra (Table: team) | er (Table: team) | era (Table: team) | cg (Table: team) | sho (Table: team) | sv (Table: team) | ipouts (Table: team) | ha (Table: team) | hra (Table: team) | bba (Table: team) | soa (Table: team) | e (Table: team) | dp (Table: team) | fp (Table: team) | name (Table: team) | park (Table: team) | attendance (Table: team) | bpf (Table: team) | ppf (Table: team) | team_id_br (Table: team) | team_id_lahman45 (Table: team) | team_id_retro (Table: team) | franchise_id (Table: team_franchise) | franchise_name (Table: team_franchise) | active (Table: team_franchise) | na_assoc (Table: team_franchise) | year (Table: team_half) | league_id (Table: team_half) | team_id (Table: team_half) | half (Table: team_half) | div_id (Table: team_half) | div_win (Table: team_half) | rank (Table: team_half) | g (Table: team_half) | w (Table: team_half) | l (Table: team_half)
"Show the residences that have both a player of gender ""M"" and a player of gender ""F"".","SELECT Residence FROM player WHERE gender  =  ""M"" INTERSECT SELECT Residence FROM player WHERE gender  =  ""F""",* (Table: match_result) | Player_ID (Table: player) | Sponsor_name (Table: player) | Player_name (Table: player) | Gender (Table: player) | Residence (Table: player) | Occupation (Table: player) | Votes (Table: player) | Rank (Table: player) | Club_ID (Table: club) | Club_name (Table: club) | Region (Table: club) | Start_year (Table: club) | Coach_ID (Table: coach) | Coach_name (Table: coach) | Gender (Table: coach) | Club_ID (Table: coach) | Rank (Table: coach) | Player_ID (Table: player_coach) | Coach_ID (Table: player_coach) | Starting_year (Table: player_coach) | Rank (Table: match_result) | Club_ID (Table: match_result) | Gold (Table: match_result) | Big_Silver (Table: match_result) | Small_Silver (Table: match_result) | Bronze (Table: match_result) | Points (Table: match_result)
Return all the distinct payment methods used by customers.,SELECT DISTINCT payment_method FROM customers,* (Table: Order_Items) | address_id (Table: Addresses) | address_content (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | product_id (Table: Products) | product_details (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | date_became_customer (Table: Customers) | other_customer_details (Table: Customers) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | customer_id (Table: Customer_Contact_Channels) | channel_code (Table: Customer_Contact_Channels) | active_from_date (Table: Customer_Contact_Channels) | active_to_date (Table: Customer_Contact_Channels) | contact_number (Table: Customer_Contact_Channels) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status (Table: Customer_Orders) | order_date (Table: Customer_Orders) | order_details (Table: Customer_Orders) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | order_quantity (Table: Order_Items)
What are the first names of student who only took one course?,SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1,* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
What is the average snatch score of body builders?,SELECT avg(Snatch) FROM body_builder,* (Table: people) | Body_Builder_ID (Table: body_builder) | People_ID (Table: body_builder) | Snatch (Table: body_builder) | Clean_Jerk (Table: body_builder) | Total (Table: body_builder) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Birth_Date (Table: people) | Birth_Place (Table: people)
On which day has it neither been foggy nor rained in the zip code of 94107?,"SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != ""Fog"" AND EVENTS != ""Rain""",* (Table: weather) | id (Table: station) | name (Table: station) | lat (Table: station) | long (Table: station) | dock_count (Table: station) | city (Table: station) | installation_date (Table: station) | station_id (Table: status) | bikes_available (Table: status) | docks_available (Table: status) | time (Table: status) | id (Table: trip) | duration (Table: trip) | start_date (Table: trip) | start_station_name (Table: trip) | start_station_id (Table: trip) | end_date (Table: trip) | end_station_name (Table: trip) | end_station_id (Table: trip) | bike_id (Table: trip) | subscription_type (Table: trip) | zip_code (Table: trip) | date (Table: weather) | max_temperature_f (Table: weather) | mean_temperature_f (Table: weather) | min_temperature_f (Table: weather) | max_dew_point_f (Table: weather) | mean_dew_point_f (Table: weather) | min_dew_point_f (Table: weather) | max_humidity (Table: weather) | mean_humidity (Table: weather) | min_humidity (Table: weather) | max_sea_level_pressure_inches (Table: weather) | mean_sea_level_pressure_inches (Table: weather) | min_sea_level_pressure_inches (Table: weather) | max_visibility_miles (Table: weather) | mean_visibility_miles (Table: weather) | min_visibility_miles (Table: weather) | max_wind_Speed_mph (Table: weather) | mean_wind_speed_mph (Table: weather) | max_gust_speed_mph (Table: weather) | precipitation_inches (Table: weather) | cloud_cover (Table: weather) | events (Table: weather) | wind_dir_degrees (Table: weather) | zip_code (Table: weather)
List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.,"SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;",* (Table: phone) | Model_name (Table: chip_model) | Launch_year (Table: chip_model) | RAM_MiB (Table: chip_model) | ROM_MiB (Table: chip_model) | Slots (Table: chip_model) | WiFi (Table: chip_model) | Bluetooth (Table: chip_model) | Graphics_mode (Table: screen_mode) | Char_cells (Table: screen_mode) | Pixels (Table: screen_mode) | Hardware_colours (Table: screen_mode) | used_kb (Table: screen_mode) | map (Table: screen_mode) | Type (Table: screen_mode) | Company_name (Table: phone) | Hardware_Model_name (Table: phone) | Accreditation_type (Table: phone) | Accreditation_level (Table: phone) | Date (Table: phone) | chip_model (Table: phone) | screen_mode (Table: phone)
How many types of products have Rodrick Heaney bought in total?,"SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  ""Rodrick Heaney""",* (Table: Order_Items) | address_id (Table: Addresses) | address_content (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | product_id (Table: Products) | product_details (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | date_became_customer (Table: Customers) | other_customer_details (Table: Customers) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | customer_id (Table: Customer_Contact_Channels) | channel_code (Table: Customer_Contact_Channels) | active_from_date (Table: Customer_Contact_Channels) | active_to_date (Table: Customer_Contact_Channels) | contact_number (Table: Customer_Contact_Channels) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status (Table: Customer_Orders) | order_date (Table: Customer_Orders) | order_details (Table: Customer_Orders) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | order_quantity (Table: Order_Items)
"What is the last name of the professor whose office is located in DRE 102, and when were they hired?","SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'",* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
Display the first name and department name for each employee.,"SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
What is the total amount of payment?,SELECT sum(Amount_Payment) FROM Payments,* (Table: Payments) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Policy_ID (Table: Customer_Policies) | Customer_ID (Table: Customer_Policies) | Policy_Type_Code (Table: Customer_Policies) | Start_Date (Table: Customer_Policies) | End_Date (Table: Customer_Policies) | Claim_ID (Table: Claims) | Policy_ID (Table: Claims) | Date_Claim_Made (Table: Claims) | Date_Claim_Settled (Table: Claims) | Amount_Claimed (Table: Claims) | Amount_Settled (Table: Claims) | Settlement_ID (Table: Settlements) | Claim_ID (Table: Settlements) | Date_Claim_Made (Table: Settlements) | Date_Claim_Settled (Table: Settlements) | Amount_Claimed (Table: Settlements) | Amount_Settled (Table: Settlements) | Customer_Policy_ID (Table: Settlements) | Payment_ID (Table: Payments) | Settlement_ID (Table: Payments) | Payment_Method_Code (Table: Payments) | Date_Payment_Made (Table: Payments) | Amount_Payment (Table: Payments)
Give the country id and corresponding count of cities in each country.,"SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id",* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
"What is the id, genre, and name of the artist for every English song ordered by ascending rating?","SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   ""english"" ORDER BY rating",* (Table: song) | g_name (Table: genre) | rating (Table: genre) | most_popular_in (Table: genre) | artist_name (Table: artist) | country (Table: artist) | gender (Table: artist) | preferred_genre (Table: artist) | f_id (Table: files) | artist_name (Table: files) | file_size (Table: files) | duration (Table: files) | formats (Table: files) | song_name (Table: song) | artist_name (Table: song) | country (Table: song) | f_id (Table: song) | genre_is (Table: song) | rating (Table: song) | languages (Table: song) | releasedate (Table: song) | resolution (Table: song)
How many professors are teaching class with code ACCT-211?,"SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  ""ACCT-211""",* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
What is the count of different game types?,SELECT count(DISTINCT gtype) FROM Video_games,* (Table: SportsInfo) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | GameID (Table: Video_Games) | GName (Table: Video_Games) | GType (Table: Video_Games) | StuID (Table: Plays_Games) | GameID (Table: Plays_Games) | Hours_Played (Table: Plays_Games) | StuID (Table: SportsInfo) | SportName (Table: SportsInfo) | HoursPerWeek (Table: SportsInfo) | GamesPlayed (Table: SportsInfo) | OnScholarship (Table: SportsInfo)
How many tourists did not make any visit?,SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits ),* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
Give the first name and job id for all employees in the Finance department.,"SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
What is the list of school locations sorted in ascending order of school enrollment?,SELECT LOCATION FROM school ORDER BY Enrollment ASC,* (Table: player) | School_ID (Table: school) | School (Table: school) | Location (Table: school) | Enrollment (Table: school) | Founded (Table: school) | Denomination (Table: school) | Boys_or_Girls (Table: school) | Day_or_Boarding (Table: school) | Year_Entered_Competition (Table: school) | School_Colors (Table: school) | School_ID (Table: school_details) | Nickname (Table: school_details) | Colors (Table: school_details) | League (Table: school_details) | Class (Table: school_details) | Division (Table: school_details) | School_Id (Table: school_performance) | School_Year (Table: school_performance) | Class_A (Table: school_performance) | Class_AA (Table: school_performance) | Player_ID (Table: player) | Player (Table: player) | Team (Table: player) | Age (Table: player) | Position (Table: player) | School_ID (Table: player)
Count the number of cards the customer with the first name Art and last name Turcotte has.,"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  ""Art"" AND T2.customer_last_name  =  ""Turcotte""",* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21',"SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'",* (Table: Timed_Locations_of_Things) | customer_id (Table: Customers) | customer_details (Table: Customers) | property_id (Table: Properties) | property_type_code (Table: Properties) | property_address (Table: Properties) | other_details (Table: Properties) | resident_id (Table: Residents) | property_id (Table: Residents) | date_moved_in (Table: Residents) | date_moved_out (Table: Residents) | other_details (Table: Residents) | organization_id (Table: Organizations) | parent_organization_id (Table: Organizations) | organization_details (Table: Organizations) | service_id (Table: Services) | organization_id (Table: Services) | service_type_code (Table: Services) | service_details (Table: Services) | resident_id (Table: Residents_Services) | service_id (Table: Residents_Services) | date_moved_in (Table: Residents_Services) | property_id (Table: Residents_Services) | date_requested (Table: Residents_Services) | date_provided (Table: Residents_Services) | other_details (Table: Residents_Services) | thing_id (Table: Things) | organization_id (Table: Things) | Type_of_Thing_Code (Table: Things) | service_type_code (Table: Things) | service_details (Table: Things) | Customer_Event_ID (Table: Customer_Events) | customer_id (Table: Customer_Events) | date_moved_in (Table: Customer_Events) | property_id (Table: Customer_Events) | resident_id (Table: Customer_Events) | thing_id (Table: Customer_Events) | Customer_Event_Note_ID (Table: Customer_Event_Notes) | Customer_Event_ID (Table: Customer_Event_Notes) | service_type_code (Table: Customer_Event_Notes) | resident_id (Table: Customer_Event_Notes) | property_id (Table: Customer_Event_Notes) | date_moved_in (Table: Customer_Event_Notes) | thing_id (Table: Timed_Status_of_Things) | Date_and_Date (Table: Timed_Status_of_Things) | Status_of_Thing_Code (Table: Timed_Status_of_Things) | thing_id (Table: Timed_Locations_of_Things) | Date_and_Time (Table: Timed_Locations_of_Things) | Location_Code (Table: Timed_Locations_of_Things)
What are the names of players who train between 500 and 1500 hours?,SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500,* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
What is the document type name and the document type description and creation date for all the documents?,"SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code",* (Table: Accounts) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Budget_Type_Code (Table: Ref_Budget_Codes) | Budget_Type_Description (Table: Ref_Budget_Codes) | Project_ID (Table: Projects) | Project_Details (Table: Projects) | Document_ID (Table: Documents) | Document_Type_Code (Table: Documents) | Project_ID (Table: Documents) | Document_Date (Table: Documents) | Document_Name (Table: Documents) | Document_Description (Table: Documents) | Other_Details (Table: Documents) | Statement_ID (Table: Statements) | Statement_Details (Table: Statements) | Document_ID (Table: Documents_with_Expenses) | Budget_Type_Code (Table: Documents_with_Expenses) | Document_Details (Table: Documents_with_Expenses) | Account_ID (Table: Accounts) | Statement_ID (Table: Accounts) | Account_Details (Table: Accounts)
Show the most common builder of railways.,SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1,* (Table: railway_manage) | Railway_ID (Table: railway) | Railway (Table: railway) | Builder (Table: railway) | Built (Table: railway) | Wheels (Table: railway) | Location (Table: railway) | ObjectNumber (Table: railway) | Train_ID (Table: train) | Train_Num (Table: train) | Name (Table: train) | From (Table: train) | Arrival (Table: train) | Railway_ID (Table: train) | Manager_ID (Table: manager) | Name (Table: manager) | Country (Table: manager) | Working_year_starts (Table: manager) | Age (Table: manager) | Level (Table: manager) | Railway_ID (Table: railway_manage) | Manager_ID (Table: railway_manage) | From_Year (Table: railway_manage)
"What is the name of the institution that ""Matthias Blume"" belongs to?","SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  ""Matthias"" AND t1.lname  =  ""Blume""",* (Table: Authorship) | instID (Table: Inst) | name (Table: Inst) | country (Table: Inst) | authID (Table: Authors) | lname (Table: Authors) | fname (Table: Authors) | paperID (Table: Papers) | title (Table: Papers) | authID (Table: Authorship) | instID (Table: Authorship) | paperID (Table: Authorship) | authOrder (Table: Authorship)
"How many members of ""Bootup Baltimore"" are older than 18?","SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  ""Bootup Baltimore"" AND t3.age  >  18",* (Table: Member_of_club) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | ClubID (Table: Club) | ClubName (Table: Club) | ClubDesc (Table: Club) | ClubLocation (Table: Club) | StuID (Table: Member_of_club) | ClubID (Table: Member_of_club) | Position (Table: Member_of_club)
What is the average age for all person?,SELECT avg(age) FROM Person,* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
Show the working years of managers in descending order of their level.,SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC,* (Table: railway_manage) | Railway_ID (Table: railway) | Railway (Table: railway) | Builder (Table: railway) | Built (Table: railway) | Wheels (Table: railway) | Location (Table: railway) | ObjectNumber (Table: railway) | Train_ID (Table: train) | Train_Num (Table: train) | Name (Table: train) | From (Table: train) | Arrival (Table: train) | Railway_ID (Table: train) | Manager_ID (Table: manager) | Name (Table: manager) | Country (Table: manager) | Working_year_starts (Table: manager) | Age (Table: manager) | Level (Table: manager) | Railway_ID (Table: railway_manage) | Manager_ID (Table: railway_manage) | From_Year (Table: railway_manage)
"How many services has each resident requested? List the resident id, details, and the count in descending order of the count.","SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC",* (Table: Timed_Locations_of_Things) | customer_id (Table: Customers) | customer_details (Table: Customers) | property_id (Table: Properties) | property_type_code (Table: Properties) | property_address (Table: Properties) | other_details (Table: Properties) | resident_id (Table: Residents) | property_id (Table: Residents) | date_moved_in (Table: Residents) | date_moved_out (Table: Residents) | other_details (Table: Residents) | organization_id (Table: Organizations) | parent_organization_id (Table: Organizations) | organization_details (Table: Organizations) | service_id (Table: Services) | organization_id (Table: Services) | service_type_code (Table: Services) | service_details (Table: Services) | resident_id (Table: Residents_Services) | service_id (Table: Residents_Services) | date_moved_in (Table: Residents_Services) | property_id (Table: Residents_Services) | date_requested (Table: Residents_Services) | date_provided (Table: Residents_Services) | other_details (Table: Residents_Services) | thing_id (Table: Things) | organization_id (Table: Things) | Type_of_Thing_Code (Table: Things) | service_type_code (Table: Things) | service_details (Table: Things) | Customer_Event_ID (Table: Customer_Events) | customer_id (Table: Customer_Events) | date_moved_in (Table: Customer_Events) | property_id (Table: Customer_Events) | resident_id (Table: Customer_Events) | thing_id (Table: Customer_Events) | Customer_Event_Note_ID (Table: Customer_Event_Notes) | Customer_Event_ID (Table: Customer_Event_Notes) | service_type_code (Table: Customer_Event_Notes) | resident_id (Table: Customer_Event_Notes) | property_id (Table: Customer_Event_Notes) | date_moved_in (Table: Customer_Event_Notes) | thing_id (Table: Timed_Status_of_Things) | Date_and_Date (Table: Timed_Status_of_Things) | Status_of_Thing_Code (Table: Timed_Status_of_Things) | thing_id (Table: Timed_Locations_of_Things) | Date_and_Time (Table: Timed_Locations_of_Things) | Location_Code (Table: Timed_Locations_of_Things)
What are the names and hours spent practicing of every student who received a yes at tryouts?,"SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
Find all the order items whose product id is 11. What are the order item ids?,SELECT order_item_id FROM order_items WHERE product_id = 11,* (Table: Shipment_Items) | customer_id (Table: Customers) | customer_name (Table: Customers) | customer_details (Table: Customers) | invoice_number (Table: Invoices) | invoice_date (Table: Invoices) | invoice_details (Table: Invoices) | order_id (Table: Orders) | customer_id (Table: Orders) | order_status (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | product_id (Table: Products) | product_name (Table: Products) | product_details (Table: Products) | order_item_id (Table: Order_Items) | product_id (Table: Order_Items) | order_id (Table: Order_Items) | order_item_status (Table: Order_Items) | order_item_details (Table: Order_Items) | shipment_id (Table: Shipments) | order_id (Table: Shipments) | invoice_number (Table: Shipments) | shipment_tracking_number (Table: Shipments) | shipment_date (Table: Shipments) | other_shipment_details (Table: Shipments) | shipment_id (Table: Shipment_Items) | order_item_id (Table: Shipment_Items)
What is the total number of customers across banks?,SELECT sum(no_of_customers) FROM bank,* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
Find the names of schools that have some players in the mid position but not in the goalie position.,SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie',* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
"What are the the songs in volumes, listed in ascending order?",SELECT Song FROM volume ORDER BY Song,* (Table: music_festival) | Artist_ID (Table: artist) | Artist (Table: artist) | Age (Table: artist) | Famous_Title (Table: artist) | Famous_Release_date (Table: artist) | Volume_ID (Table: volume) | Volume_Issue (Table: volume) | Issue_Date (Table: volume) | Weeks_on_Top (Table: volume) | Song (Table: volume) | Artist_ID (Table: volume) | ID (Table: music_festival) | Music_Festival (Table: music_festival) | Date_of_ceremony (Table: music_festival) | Category (Table: music_festival) | Volume (Table: music_festival) | Result (Table: music_festival)
List the names of all songs that have 4 minute duration or are in English.,"SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE ""4:%"" UNION SELECT song_name FROM song WHERE languages  =  ""english""",* (Table: song) | g_name (Table: genre) | rating (Table: genre) | most_popular_in (Table: genre) | artist_name (Table: artist) | country (Table: artist) | gender (Table: artist) | preferred_genre (Table: artist) | f_id (Table: files) | artist_name (Table: files) | file_size (Table: files) | duration (Table: files) | formats (Table: files) | song_name (Table: song) | artist_name (Table: song) | country (Table: song) | f_id (Table: song) | genre_is (Table: song) | rating (Table: song) | languages (Table: song) | releasedate (Table: song) | resolution (Table: song)
"What are all the different product names, and how many complains has each received?","SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name",* (Table: Complaints) | staff_id (Table: Staff) | gender (Table: Staff) | first_name (Table: Staff) | last_name (Table: Staff) | email_address (Table: Staff) | phone_number (Table: Staff) | customer_id (Table: Customers) | customer_type_code (Table: Customers) | address_line_1 (Table: Customers) | address_line_2 (Table: Customers) | town_city (Table: Customers) | state (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | product_id (Table: Products) | parent_product_id (Table: Products) | product_category_code (Table: Products) | date_product_first_available (Table: Products) | date_product_discontinued (Table: Products) | product_name (Table: Products) | product_description (Table: Products) | product_price (Table: Products) | complaint_id (Table: Complaints) | product_id (Table: Complaints) | customer_id (Table: Complaints) | complaint_outcome_code (Table: Complaints) | complaint_status_code (Table: Complaints) | complaint_type_code (Table: Complaints) | date_complaint_raised (Table: Complaints) | date_complaint_closed (Table: Complaints) | staff_id (Table: Complaints)
Return the different classes of races.,SELECT DISTINCT CLASS FROM race,* (Table: track) | Race_ID (Table: race) | Name (Table: race) | Class (Table: race) | Date (Table: race) | Track_ID (Table: race) | Track_ID (Table: track) | Name (Table: track) | Location (Table: track) | Seating (Table: track) | Year_Opened (Table: track)
What are the ids and details for all organizations that have grants of more than 6000 dollars?,"SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000",* (Table: Tasks) | document_type_code (Table: Document_Types) | document_description (Table: Document_Types) | document_id (Table: Documents) | document_type_code (Table: Documents) | grant_id (Table: Documents) | sent_date (Table: Documents) | response_received_date (Table: Documents) | other_details (Table: Documents) | grant_id (Table: Grants) | organisation_id (Table: Grants) | grant_amount (Table: Grants) | grant_start_date (Table: Grants) | grant_end_date (Table: Grants) | other_details (Table: Grants) | organisation_type (Table: Organisation_Types) | organisation_type_description (Table: Organisation_Types) | organisation_id (Table: Organisations) | organisation_type (Table: Organisations) | organisation_details (Table: Organisations) | project_id (Table: Project_Outcomes) | outcome_code (Table: Project_Outcomes) | outcome_details (Table: Project_Outcomes) | staff_id (Table: Project_Staff) | project_id (Table: Project_Staff) | role_code (Table: Project_Staff) | date_from (Table: Project_Staff) | date_to (Table: Project_Staff) | other_details (Table: Project_Staff) | project_id (Table: Projects) | organisation_id (Table: Projects) | project_details (Table: Projects) | outcome_code (Table: Research_Outcomes) | outcome_description (Table: Research_Outcomes) | staff_id (Table: Research_Staff) | employer_organisation_id (Table: Research_Staff) | staff_details (Table: Research_Staff) | role_code (Table: Staff_Roles) | role_description (Table: Staff_Roles) | task_id (Table: Tasks) | project_id (Table: Tasks) | task_details (Table: Tasks) | eg Agree Objectives (Table: Tasks)
List the names of members who did not attend any performance.,SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance),* (Table: member_attendance) | Member_ID (Table: member) | Name (Table: member) | Nationality (Table: member) | Role (Table: member) | Performance_ID (Table: performance) | Date (Table: performance) | Host (Table: performance) | Location (Table: performance) | Attendance (Table: performance) | Member_ID (Table: member_attendance) | Performance_ID (Table: member_attendance) | Num_of_Pieces (Table: member_attendance)
Please show the most common status of roller coasters.,SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1,* (Table: country) | Roller_Coaster_ID (Table: roller_coaster) | Name (Table: roller_coaster) | Park (Table: roller_coaster) | Country_ID (Table: roller_coaster) | Length (Table: roller_coaster) | Height (Table: roller_coaster) | Speed (Table: roller_coaster) | Opened (Table: roller_coaster) | Status (Table: roller_coaster) | Country_ID (Table: country) | Name (Table: country) | Population (Table: country) | Area (Table: country) | Languages (Table: country)
What are the titles and directors of the films were never presented in China?,"SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')",* (Table: film_market_estimation) | Film_ID (Table: film) | Title (Table: film) | Studio (Table: film) | Director (Table: film) | Gross_in_dollar (Table: film) | Market_ID (Table: market) | Country (Table: market) | Number_cities (Table: market) | Estimation_ID (Table: film_market_estimation) | Low_Estimate (Table: film_market_estimation) | High_Estimate (Table: film_market_estimation) | Film_ID (Table: film_market_estimation) | Type (Table: film_market_estimation) | Market_ID (Table: film_market_estimation) | Year (Table: film_market_estimation)
"What are the dates of the latest logon of the students with family name ""Jaskolski"" or ""Langosh""?","SELECT date_of_latest_logon FROM Students WHERE family_name  =  ""Jaskolski"" OR family_name  =  ""Langosh""",* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
Return the average enrollment of universities founded before 1850.,SELECT avg(enrollment) FROM university WHERE founded  <  1850,* (Table: university) | Team_ID (Table: basketball_match) | School_ID (Table: basketball_match) | Team_Name (Table: basketball_match) | ACC_Regular_Season (Table: basketball_match) | ACC_Percent (Table: basketball_match) | ACC_Home (Table: basketball_match) | ACC_Road (Table: basketball_match) | All_Games (Table: basketball_match) | All_Games_Percent (Table: basketball_match) | All_Home (Table: basketball_match) | All_Road (Table: basketball_match) | All_Neutral (Table: basketball_match) | School_ID (Table: university) | School (Table: university) | Location (Table: university) | Founded (Table: university) | Affiliation (Table: university) | Enrollment (Table: university) | Nickname (Table: university) | Primary_conference (Table: university)
What is the average length in feet of the bridges?,SELECT avg(length_feet) FROM bridge,* (Table: mill) | id (Table: architect) | name (Table: architect) | nationality (Table: architect) | gender (Table: architect) | architect_id (Table: bridge) | id (Table: bridge) | name (Table: bridge) | location (Table: bridge) | length_meters (Table: bridge) | length_feet (Table: bridge) | architect_id (Table: mill) | id (Table: mill) | location (Table: mill) | name (Table: mill) | type (Table: mill) | built_year (Table: mill) | notes (Table: mill)
Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.,"SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1",* (Table: Payments) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Policy_ID (Table: Customer_Policies) | Customer_ID (Table: Customer_Policies) | Policy_Type_Code (Table: Customer_Policies) | Start_Date (Table: Customer_Policies) | End_Date (Table: Customer_Policies) | Claim_ID (Table: Claims) | Policy_ID (Table: Claims) | Date_Claim_Made (Table: Claims) | Date_Claim_Settled (Table: Claims) | Amount_Claimed (Table: Claims) | Amount_Settled (Table: Claims) | Settlement_ID (Table: Settlements) | Claim_ID (Table: Settlements) | Date_Claim_Made (Table: Settlements) | Date_Claim_Settled (Table: Settlements) | Amount_Claimed (Table: Settlements) | Amount_Settled (Table: Settlements) | Customer_Policy_ID (Table: Settlements) | Payment_ID (Table: Payments) | Settlement_ID (Table: Payments) | Payment_Method_Code (Table: Payments) | Date_Payment_Made (Table: Payments) | Amount_Payment (Table: Payments)
What are the different names of the colleges involved in the tryout in alphabetical order?,SELECT DISTINCT cName FROM tryout ORDER BY cName,* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
How many tracks are in the AAC audio file media type?,"SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  ""AAC audio file""",* (Table: Track) | AlbumId (Table: Album) | Title (Table: Album) | ArtistId (Table: Album) | ArtistId (Table: Artist) | Name (Table: Artist) | CustomerId (Table: Customer) | FirstName (Table: Customer) | LastName (Table: Customer) | Company (Table: Customer) | Address (Table: Customer) | City (Table: Customer) | State (Table: Customer) | Country (Table: Customer) | PostalCode (Table: Customer) | Phone (Table: Customer) | Fax (Table: Customer) | Email (Table: Customer) | SupportRepId (Table: Customer) | EmployeeId (Table: Employee) | LastName (Table: Employee) | FirstName (Table: Employee) | Title (Table: Employee) | ReportsTo (Table: Employee) | BirthDate (Table: Employee) | HireDate (Table: Employee) | Address (Table: Employee) | City (Table: Employee) | State (Table: Employee) | Country (Table: Employee) | PostalCode (Table: Employee) | Phone (Table: Employee) | Fax (Table: Employee) | Email (Table: Employee) | GenreId (Table: Genre) | Name (Table: Genre) | InvoiceId (Table: Invoice) | CustomerId (Table: Invoice) | InvoiceDate (Table: Invoice) | BillingAddress (Table: Invoice) | BillingCity (Table: Invoice) | BillingState (Table: Invoice) | BillingCountry (Table: Invoice) | BillingPostalCode (Table: Invoice) | Total (Table: Invoice) | InvoiceLineId (Table: InvoiceLine) | InvoiceId (Table: InvoiceLine) | TrackId (Table: InvoiceLine) | UnitPrice (Table: InvoiceLine) | Quantity (Table: InvoiceLine) | MediaTypeId (Table: MediaType) | Name (Table: MediaType) | PlaylistId (Table: Playlist) | Name (Table: Playlist) | PlaylistId (Table: PlaylistTrack) | TrackId (Table: PlaylistTrack) | TrackId (Table: Track) | Name (Table: Track) | AlbumId (Table: Track) | MediaTypeId (Table: Track) | GenreId (Table: Track) | Composer (Table: Track) | Milliseconds (Table: Track) | Bytes (Table: Track) | UnitPrice (Table: Track)
List the names of courses in alphabetical order?,SELECT course_name FROM courses ORDER BY course_name,* (Table: Candidate_Assessments) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | person_id (Table: People) | first_name (Table: People) | middle_name (Table: People) | last_name (Table: People) | cell_mobile_number (Table: People) | email_address (Table: People) | login_name (Table: People) | password (Table: People) | student_id (Table: Students) | student_details (Table: Students) | course_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | other_details (Table: Courses) | person_address_id (Table: People_Addresses) | person_id (Table: People_Addresses) | address_id (Table: People_Addresses) | date_from (Table: People_Addresses) | date_to (Table: People_Addresses) | student_id (Table: Student_Course_Registrations) | course_id (Table: Student_Course_Registrations) | registration_date (Table: Student_Course_Registrations) | student_id (Table: Student_Course_Attendance) | course_id (Table: Student_Course_Attendance) | date_of_attendance (Table: Student_Course_Attendance) | candidate_id (Table: Candidates) | candidate_details (Table: Candidates) | candidate_id (Table: Candidate_Assessments) | qualification (Table: Candidate_Assessments) | assessment_date (Table: Candidate_Assessments) | asessment_outcome_code (Table: Candidate_Assessments)
Show the product ids and the number of unique orders containing each product.,"SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
Please show the most common type of ships.,SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1,* (Table: ship) | Mission_ID (Table: mission) | Ship_ID (Table: mission) | Code (Table: mission) | Launched_Year (Table: mission) | Location (Table: mission) | Speed_knots (Table: mission) | Fate (Table: mission) | Ship_ID (Table: ship) | Name (Table: ship) | Type (Table: ship) | Nationality (Table: ship) | Tonnage (Table: ship)
What are the songs in volumes that have resulted in a nomination at music festivals?,"SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  ""Nominated""",* (Table: music_festival) | Artist_ID (Table: artist) | Artist (Table: artist) | Age (Table: artist) | Famous_Title (Table: artist) | Famous_Release_date (Table: artist) | Volume_ID (Table: volume) | Volume_Issue (Table: volume) | Issue_Date (Table: volume) | Weeks_on_Top (Table: volume) | Song (Table: volume) | Artist_ID (Table: volume) | ID (Table: music_festival) | Music_Festival (Table: music_festival) | Date_of_ceremony (Table: music_festival) | Category (Table: music_festival) | Volume (Table: music_festival) | Result (Table: music_festival)
Find the states where have the colleges whose enrollments are less than the largest size.,SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college),* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
Which allergy type has least number of allergies?,SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1,* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
Who are the players from UCLA?,"SELECT Player FROM match_season WHERE College  =  ""UCLA""",* (Table: player) | Country_id (Table: country) | Country_name (Table: country) | Capital (Table: country) | Official_native_language (Table: country) | Team_id (Table: team) | Name (Table: team) | Season (Table: match_season) | Player (Table: match_season) | Position (Table: match_season) | Country (Table: match_season) | Team (Table: match_season) | Draft_Pick_Number (Table: match_season) | Draft_Class (Table: match_season) | College (Table: match_season) | Player_ID (Table: player) | Player (Table: player) | Years_Played (Table: player) | Total_WL (Table: player) | Singles_WL (Table: player) | Doubles_WL (Table: player) | Team (Table: player)
"Find the number of papers published by the institution ""University of Pennsylvania"".","SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""University of Pennsylvania""",* (Table: Authorship) | instID (Table: Inst) | name (Table: Inst) | country (Table: Inst) | authID (Table: Authors) | lname (Table: Authors) | fname (Table: Authors) | paperID (Table: Papers) | title (Table: Papers) | authID (Table: Authorship) | instID (Table: Authorship) | paperID (Table: Authorship) | authOrder (Table: Authorship)
"What is all the information about employees with D or S in their first name, ordered by salary descending?",SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC,* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
Find the total budgets of the Marketing or Finance department.,SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance',* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?,SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010,* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
"What are the maximum, minimum, and average booked count for the products booked?","SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked",* (Table: View_Product_Availability) | coupon_id (Table: Discount_Coupons) | date_issued (Table: Discount_Coupons) | coupon_amount (Table: Discount_Coupons) | customer_id (Table: Customers) | coupon_id (Table: Customers) | good_or_bad_customer (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | gender_mf (Table: Customers) | date_became_customer (Table: Customers) | date_last_hire (Table: Customers) | booking_id (Table: Bookings) | customer_id (Table: Bookings) | booking_status_code (Table: Bookings) | returned_damaged_yn (Table: Bookings) | booking_start_date (Table: Bookings) | booking_end_date (Table: Bookings) | count_hired (Table: Bookings) | amount_payable (Table: Bookings) | amount_of_discount (Table: Bookings) | amount_outstanding (Table: Bookings) | amount_of_refund (Table: Bookings) | product_id (Table: Products_for_Hire) | product_type_code (Table: Products_for_Hire) | daily_hire_cost (Table: Products_for_Hire) | product_name (Table: Products_for_Hire) | product_description (Table: Products_for_Hire) | payment_id (Table: Payments) | booking_id (Table: Payments) | customer_id (Table: Payments) | payment_type_code (Table: Payments) | amount_paid_in_full_yn (Table: Payments) | payment_date (Table: Payments) | amount_due (Table: Payments) | amount_paid (Table: Payments) | booking_id (Table: Products_Booked) | product_id (Table: Products_Booked) | returned_yn (Table: Products_Booked) | returned_late_yn (Table: Products_Booked) | booked_count (Table: Products_Booked) | booked_amount (Table: Products_Booked) | product_id (Table: View_Product_Availability) | booking_id (Table: View_Product_Availability) | status_date (Table: View_Product_Availability) | available_yn (Table: View_Product_Availability)
What are the names of tracks that contain the the word you in them?,SELECT Name FROM TRACK WHERE Name LIKE '%you%',* (Table: Track) | AlbumId (Table: Album) | Title (Table: Album) | ArtistId (Table: Album) | ArtistId (Table: Artist) | Name (Table: Artist) | CustomerId (Table: Customer) | FirstName (Table: Customer) | LastName (Table: Customer) | Company (Table: Customer) | Address (Table: Customer) | City (Table: Customer) | State (Table: Customer) | Country (Table: Customer) | PostalCode (Table: Customer) | Phone (Table: Customer) | Fax (Table: Customer) | Email (Table: Customer) | SupportRepId (Table: Customer) | EmployeeId (Table: Employee) | LastName (Table: Employee) | FirstName (Table: Employee) | Title (Table: Employee) | ReportsTo (Table: Employee) | BirthDate (Table: Employee) | HireDate (Table: Employee) | Address (Table: Employee) | City (Table: Employee) | State (Table: Employee) | Country (Table: Employee) | PostalCode (Table: Employee) | Phone (Table: Employee) | Fax (Table: Employee) | Email (Table: Employee) | GenreId (Table: Genre) | Name (Table: Genre) | InvoiceId (Table: Invoice) | CustomerId (Table: Invoice) | InvoiceDate (Table: Invoice) | BillingAddress (Table: Invoice) | BillingCity (Table: Invoice) | BillingState (Table: Invoice) | BillingCountry (Table: Invoice) | BillingPostalCode (Table: Invoice) | Total (Table: Invoice) | InvoiceLineId (Table: InvoiceLine) | InvoiceId (Table: InvoiceLine) | TrackId (Table: InvoiceLine) | UnitPrice (Table: InvoiceLine) | Quantity (Table: InvoiceLine) | MediaTypeId (Table: MediaType) | Name (Table: MediaType) | PlaylistId (Table: Playlist) | Name (Table: Playlist) | PlaylistId (Table: PlaylistTrack) | TrackId (Table: PlaylistTrack) | TrackId (Table: Track) | Name (Table: Track) | AlbumId (Table: Track) | MediaTypeId (Table: Track) | GenreId (Table: Track) | Composer (Table: Track) | Milliseconds (Table: Track) | Bytes (Table: Track) | UnitPrice (Table: Track)
Find the number and time of the train that goes from Chennai to Guruvayur.,"SELECT train_number ,  TIME FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur'",* (Table: weekly_weather) | id (Table: train) | train_number (Table: train) | name (Table: train) | origin (Table: train) | destination (Table: train) | time (Table: train) | interval (Table: train) | id (Table: station) | network_name (Table: station) | services (Table: station) | local_authority (Table: station) | train_id (Table: route) | station_id (Table: route) | station_id (Table: weekly_weather) | day_of_week (Table: weekly_weather) | high_temperature (Table: weekly_weather) | low_temperature (Table: weekly_weather) | precipitation (Table: weekly_weather) | wind_speed_mph (Table: weekly_weather)
Show the description of the transaction type that occurs most frequently.,SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1,* (Table: Transactions_Lots) | investor_id (Table: Investors) | Investor_details (Table: Investors) | lot_id (Table: Lots) | investor_id (Table: Lots) | lot_details (Table: Lots) | transaction_type_code (Table: Ref_Transaction_Types) | transaction_type_description (Table: Ref_Transaction_Types) | transaction_id (Table: Transactions) | investor_id (Table: Transactions) | transaction_type_code (Table: Transactions) | date_of_transaction (Table: Transactions) | amount_of_transaction (Table: Transactions) | share_count (Table: Transactions) | other_details (Table: Transactions) | sales_transaction_id (Table: Sales) | sales_details (Table: Sales) | purchase_transaction_id (Table: Purchases) | purchase_details (Table: Purchases) | transaction_id (Table: Transactions_Lots) | lot_id (Table: Transactions_Lots)
What are the names of all the subjects.,SELECT subject_name FROM SUBJECTS,* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
Find all the customer information in state NY.,"SELECT * FROM CUSTOMER WHERE State  =  ""NY""",* (Table: Track) | AlbumId (Table: Album) | Title (Table: Album) | ArtistId (Table: Album) | ArtistId (Table: Artist) | Name (Table: Artist) | CustomerId (Table: Customer) | FirstName (Table: Customer) | LastName (Table: Customer) | Company (Table: Customer) | Address (Table: Customer) | City (Table: Customer) | State (Table: Customer) | Country (Table: Customer) | PostalCode (Table: Customer) | Phone (Table: Customer) | Fax (Table: Customer) | Email (Table: Customer) | SupportRepId (Table: Customer) | EmployeeId (Table: Employee) | LastName (Table: Employee) | FirstName (Table: Employee) | Title (Table: Employee) | ReportsTo (Table: Employee) | BirthDate (Table: Employee) | HireDate (Table: Employee) | Address (Table: Employee) | City (Table: Employee) | State (Table: Employee) | Country (Table: Employee) | PostalCode (Table: Employee) | Phone (Table: Employee) | Fax (Table: Employee) | Email (Table: Employee) | GenreId (Table: Genre) | Name (Table: Genre) | InvoiceId (Table: Invoice) | CustomerId (Table: Invoice) | InvoiceDate (Table: Invoice) | BillingAddress (Table: Invoice) | BillingCity (Table: Invoice) | BillingState (Table: Invoice) | BillingCountry (Table: Invoice) | BillingPostalCode (Table: Invoice) | Total (Table: Invoice) | InvoiceLineId (Table: InvoiceLine) | InvoiceId (Table: InvoiceLine) | TrackId (Table: InvoiceLine) | UnitPrice (Table: InvoiceLine) | Quantity (Table: InvoiceLine) | MediaTypeId (Table: MediaType) | Name (Table: MediaType) | PlaylistId (Table: Playlist) | Name (Table: Playlist) | PlaylistId (Table: PlaylistTrack) | TrackId (Table: PlaylistTrack) | TrackId (Table: Track) | Name (Table: Track) | AlbumId (Table: Track) | MediaTypeId (Table: Track) | GenreId (Table: Track) | Composer (Table: Track) | Milliseconds (Table: Track) | Bytes (Table: Track) | UnitPrice (Table: Track)
"List the names of all distinct medications, ordered in an alphabetical order.",SELECT DISTINCT name FROM medication ORDER BY name,* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
Show different occupations along with the number of players in each occupation.,"SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation",* (Table: match_result) | Player_ID (Table: player) | Sponsor_name (Table: player) | Player_name (Table: player) | Gender (Table: player) | Residence (Table: player) | Occupation (Table: player) | Votes (Table: player) | Rank (Table: player) | Club_ID (Table: club) | Club_name (Table: club) | Region (Table: club) | Start_year (Table: club) | Coach_ID (Table: coach) | Coach_name (Table: coach) | Gender (Table: coach) | Club_ID (Table: coach) | Rank (Table: coach) | Player_ID (Table: player_coach) | Coach_ID (Table: player_coach) | Starting_year (Table: player_coach) | Rank (Table: match_result) | Club_ID (Table: match_result) | Gold (Table: match_result) | Big_Silver (Table: match_result) | Small_Silver (Table: match_result) | Bronze (Table: match_result) | Points (Table: match_result)
Please show the software platforms of devices in descending order of the count.,SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC,* (Table: stock) | Device_ID (Table: device) | Device (Table: device) | Carrier (Table: device) | Package_Version (Table: device) | Applications (Table: device) | Software_Platform (Table: device) | Shop_ID (Table: shop) | Shop_Name (Table: shop) | Location (Table: shop) | Open_Date (Table: shop) | Open_Year (Table: shop) | Shop_ID (Table: stock) | Device_ID (Table: stock) | Quantity (Table: stock)
What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.,SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details,* (Table: Tasks) | document_type_code (Table: Document_Types) | document_description (Table: Document_Types) | document_id (Table: Documents) | document_type_code (Table: Documents) | grant_id (Table: Documents) | sent_date (Table: Documents) | response_received_date (Table: Documents) | other_details (Table: Documents) | grant_id (Table: Grants) | organisation_id (Table: Grants) | grant_amount (Table: Grants) | grant_start_date (Table: Grants) | grant_end_date (Table: Grants) | other_details (Table: Grants) | organisation_type (Table: Organisation_Types) | organisation_type_description (Table: Organisation_Types) | organisation_id (Table: Organisations) | organisation_type (Table: Organisations) | organisation_details (Table: Organisations) | project_id (Table: Project_Outcomes) | outcome_code (Table: Project_Outcomes) | outcome_details (Table: Project_Outcomes) | staff_id (Table: Project_Staff) | project_id (Table: Project_Staff) | role_code (Table: Project_Staff) | date_from (Table: Project_Staff) | date_to (Table: Project_Staff) | other_details (Table: Project_Staff) | project_id (Table: Projects) | organisation_id (Table: Projects) | project_details (Table: Projects) | outcome_code (Table: Research_Outcomes) | outcome_description (Table: Research_Outcomes) | staff_id (Table: Research_Staff) | employer_organisation_id (Table: Research_Staff) | staff_details (Table: Research_Staff) | role_code (Table: Staff_Roles) | role_description (Table: Staff_Roles) | task_id (Table: Tasks) | project_id (Table: Tasks) | task_details (Table: Tasks) | eg Agree Objectives (Table: Tasks)
How many students are age 18?,SELECT count(*) FROM Student WHERE age  =  18,* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
Count the number of markets that have a number of cities lower than 300.,SELECT count(*) FROM market WHERE Number_cities  <  300,* (Table: film_market_estimation) | Film_ID (Table: film) | Title (Table: film) | Studio (Table: film) | Director (Table: film) | Gross_in_dollar (Table: film) | Market_ID (Table: market) | Country (Table: market) | Number_cities (Table: market) | Estimation_ID (Table: film_market_estimation) | Low_Estimate (Table: film_market_estimation) | High_Estimate (Table: film_market_estimation) | Film_ID (Table: film_market_estimation) | Type (Table: film_market_estimation) | Market_ID (Table: film_market_estimation) | Year (Table: film_market_estimation)
Which parties have hosts of age above 50? Give me the party locations.,SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50,* (Table: party_host) | Party_ID (Table: party) | Party_Theme (Table: party) | Location (Table: party) | First_year (Table: party) | Last_year (Table: party) | Number_of_hosts (Table: party) | Host_ID (Table: host) | Name (Table: host) | Nationality (Table: host) | Age (Table: host) | Party_ID (Table: party_host) | Host_ID (Table: party_host) | Is_Main_in_Charge (Table: party_host)
What are the positions with both players having more than 20 points and less than 10 points.,SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10,* (Table: competition_result) | Club_ID (Table: club) | name (Table: club) | Region (Table: club) | Start_year (Table: club) | Rank (Table: club_rank) | Club_ID (Table: club_rank) | Gold (Table: club_rank) | Silver (Table: club_rank) | Bronze (Table: club_rank) | Total (Table: club_rank) | Player_ID (Table: player) | name (Table: player) | Position (Table: player) | Club_ID (Table: player) | Apps (Table: player) | Tries (Table: player) | Goals (Table: player) | Points (Table: player) | Competition_ID (Table: competition) | Year (Table: competition) | Competition_type (Table: competition) | Country (Table: competition) | Competition_ID (Table: competition_result) | Club_ID_1 (Table: competition_result) | Club_ID_2 (Table: competition_result) | Score (Table: competition_result)
"What are the maximum, minimum and average home games each stadium held?","SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium",* (Table: injury_accident) | id (Table: stadium) | name (Table: stadium) | Home_Games (Table: stadium) | Average_Attendance (Table: stadium) | Total_Attendance (Table: stadium) | Capacity_Percentage (Table: stadium) | stadium_id (Table: game) | id (Table: game) | Season (Table: game) | Date (Table: game) | Home_team (Table: game) | Away_team (Table: game) | Score (Table: game) | Competition (Table: game) | game_id (Table: injury_accident) | id (Table: injury_accident) | Player (Table: injury_accident) | Injury (Table: injury_accident) | Number_of_matches (Table: injury_accident) | Source (Table: injury_accident)
Show the maximum share count of transactions where the amount is smaller than 10000,SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000,* (Table: Transactions_Lots) | investor_id (Table: Investors) | Investor_details (Table: Investors) | lot_id (Table: Lots) | investor_id (Table: Lots) | lot_details (Table: Lots) | transaction_type_code (Table: Ref_Transaction_Types) | transaction_type_description (Table: Ref_Transaction_Types) | transaction_id (Table: Transactions) | investor_id (Table: Transactions) | transaction_type_code (Table: Transactions) | date_of_transaction (Table: Transactions) | amount_of_transaction (Table: Transactions) | share_count (Table: Transactions) | other_details (Table: Transactions) | sales_transaction_id (Table: Sales) | sales_details (Table: Sales) | purchase_transaction_id (Table: Purchases) | purchase_details (Table: Purchases) | transaction_id (Table: Transactions_Lots) | lot_id (Table: Transactions_Lots)
In which year were most of ships built?,SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1,* (Table: Ship) | Captain_ID (Table: captain) | Name (Table: captain) | Ship_ID (Table: captain) | age (Table: captain) | Class (Table: captain) | Rank (Table: captain) | Ship_ID (Table: Ship) | Name (Table: Ship) | Type (Table: Ship) | Built_Year (Table: Ship) | Class (Table: Ship) | Flag (Table: Ship)
What is the joined year of the pilot of the highest rank?,SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1,* (Table: pilot_record) | Aircraft_ID (Table: aircraft) | Order_Year (Table: aircraft) | Manufacturer (Table: aircraft) | Model (Table: aircraft) | Fleet_Series (Table: aircraft) | Powertrain (Table: aircraft) | Fuel_Propulsion (Table: aircraft) | Pilot_ID (Table: pilot) | Pilot_name (Table: pilot) | Rank (Table: pilot) | Age (Table: pilot) | Nationality (Table: pilot) | Position (Table: pilot) | Join_Year (Table: pilot) | Team (Table: pilot) | Record_ID (Table: pilot_record) | Pilot_ID (Table: pilot_record) | Aircraft_ID (Table: pilot_record) | Date (Table: pilot_record)
"How many donors have endowment for school named ""Glenn""?","SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  ""Glenn""",* (Table: endowment) | School_id (Table: School) | School_name (Table: School) | Location (Table: School) | Mascot (Table: School) | Enrollment (Table: School) | IHSAA_Class (Table: School) | IHSAA_Football_Class (Table: School) | County (Table: School) | School_id (Table: budget) | Year (Table: budget) | Budgeted (Table: budget) | total_budget_percent_budgeted (Table: budget) | Invested (Table: budget) | total_budget_percent_invested (Table: budget) | Budget_invested_percent (Table: budget) | endowment_id (Table: endowment) | School_id (Table: endowment) | donator_name (Table: endowment) | amount (Table: endowment)
Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.,"SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != ""null"" OR  department_id != 40",* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
"display those employees who joined after 7th September, 1987.",SELECT * FROM employees WHERE hire_date  >  '1987-09-07',* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
What is the average price range of hotels for each each star rating code?,"SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code",* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
"List the open date of open year of the shop named ""Apple"".","SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  ""Apple""",* (Table: stock) | Device_ID (Table: device) | Device (Table: device) | Carrier (Table: device) | Package_Version (Table: device) | Applications (Table: device) | Software_Platform (Table: device) | Shop_ID (Table: shop) | Shop_Name (Table: shop) | Location (Table: shop) | Open_Date (Table: shop) | Open_Year (Table: shop) | Shop_ID (Table: stock) | Device_ID (Table: stock) | Quantity (Table: stock)
What is the id of the event with the most participants?,SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1,* (Table: Participants_in_Events) | Service_ID (Table: Services) | Service_Type_Code (Table: Services) | Participant_ID (Table: Participants) | Participant_Type_Code (Table: Participants) | Participant_Details (Table: Participants) | Event_ID (Table: Events) | Service_ID (Table: Events) | Event_Details (Table: Events) | Event_ID (Table: Participants_in_Events) | Participant_ID (Table: Participants_in_Events)
What are all locations of train stations?,SELECT DISTINCT LOCATION FROM station,* (Table: train_station) | Station_ID (Table: station) | Name (Table: station) | Annual_entry_exit (Table: station) | Annual_interchanges (Table: station) | Total_Passengers (Table: station) | Location (Table: station) | Main_Services (Table: station) | Number_of_Platforms (Table: station) | Train_ID (Table: train) | Name (Table: train) | Time (Table: train) | Service (Table: train) | Train_ID (Table: train_station) | Station_ID (Table: train_station)
What are the start date and end date of the booking that has booked the product named 'Book collection A'?,"SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'",* (Table: View_Product_Availability) | coupon_id (Table: Discount_Coupons) | date_issued (Table: Discount_Coupons) | coupon_amount (Table: Discount_Coupons) | customer_id (Table: Customers) | coupon_id (Table: Customers) | good_or_bad_customer (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | gender_mf (Table: Customers) | date_became_customer (Table: Customers) | date_last_hire (Table: Customers) | booking_id (Table: Bookings) | customer_id (Table: Bookings) | booking_status_code (Table: Bookings) | returned_damaged_yn (Table: Bookings) | booking_start_date (Table: Bookings) | booking_end_date (Table: Bookings) | count_hired (Table: Bookings) | amount_payable (Table: Bookings) | amount_of_discount (Table: Bookings) | amount_outstanding (Table: Bookings) | amount_of_refund (Table: Bookings) | product_id (Table: Products_for_Hire) | product_type_code (Table: Products_for_Hire) | daily_hire_cost (Table: Products_for_Hire) | product_name (Table: Products_for_Hire) | product_description (Table: Products_for_Hire) | payment_id (Table: Payments) | booking_id (Table: Payments) | customer_id (Table: Payments) | payment_type_code (Table: Payments) | amount_paid_in_full_yn (Table: Payments) | payment_date (Table: Payments) | amount_due (Table: Payments) | amount_paid (Table: Payments) | booking_id (Table: Products_Booked) | product_id (Table: Products_Booked) | returned_yn (Table: Products_Booked) | returned_late_yn (Table: Products_Booked) | booked_count (Table: Products_Booked) | booked_amount (Table: Products_Booked) | product_id (Table: View_Product_Availability) | booking_id (Table: View_Product_Availability) | status_date (Table: View_Product_Availability) | available_yn (Table: View_Product_Availability)
"List the names of customers who have once canceled the purchase of the product ""food"" (the item status is ""Cancel"").","SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = ""Cancel"" AND T4.product_name = ""food"" GROUP BY T1.customer_id HAVING count(*)  >=  1",* (Table: Shipment_Items) | customer_id (Table: Customers) | customer_name (Table: Customers) | customer_details (Table: Customers) | invoice_number (Table: Invoices) | invoice_date (Table: Invoices) | invoice_details (Table: Invoices) | order_id (Table: Orders) | customer_id (Table: Orders) | order_status (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | product_id (Table: Products) | product_name (Table: Products) | product_details (Table: Products) | order_item_id (Table: Order_Items) | product_id (Table: Order_Items) | order_id (Table: Order_Items) | order_item_status (Table: Order_Items) | order_item_details (Table: Order_Items) | shipment_id (Table: Shipments) | order_id (Table: Shipments) | invoice_number (Table: Shipments) | shipment_tracking_number (Table: Shipments) | shipment_date (Table: Shipments) | other_shipment_details (Table: Shipments) | shipment_id (Table: Shipment_Items) | order_item_id (Table: Shipment_Items)
What are the maximum and minimum settlement amount on record?,"SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements",* (Table: Settlements) | Customer_ID (Table: Customers) | Customer_name (Table: Customers) | Service_ID (Table: Services) | Service_name (Table: Services) | Policy_ID (Table: Available_Policies) | policy_type_code (Table: Available_Policies) | Customer_Phone (Table: Available_Policies) | Customer_ID (Table: Customers_Policies) | Policy_ID (Table: Customers_Policies) | Date_Opened (Table: Customers_Policies) | Date_Closed (Table: Customers_Policies) | FNOL_ID (Table: First_Notification_of_Loss) | Customer_ID (Table: First_Notification_of_Loss) | Policy_ID (Table: First_Notification_of_Loss) | Service_ID (Table: First_Notification_of_Loss) | Claim_ID (Table: Claims) | FNOL_ID (Table: Claims) | Effective_Date (Table: Claims) | Settlement_ID (Table: Settlements) | Claim_ID (Table: Settlements) | Effective_Date (Table: Settlements) | Settlement_Amount (Table: Settlements)
What are the names of all products that are not the most frequently-used maximum page size?,SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1),* (Table: store_district) | product_id (Table: product) | product (Table: product) | dimensions (Table: product) | dpi (Table: product) | pages_per_minute_color (Table: product) | max_page_size (Table: product) | interface (Table: product) | Store_ID (Table: store) | Store_Name (Table: store) | Type (Table: store) | Area_size (Table: store) | Number_of_product_category (Table: store) | Ranking (Table: store) | District_ID (Table: district) | District_name (Table: district) | Headquartered_City (Table: district) | City_Population (Table: district) | City_Area (Table: district) | Store_ID (Table: store_product) | Product_ID (Table: store_product) | Store_ID (Table: store_district) | District_ID (Table: store_district)
What are the ids and names of the architects who built at least 3 bridges ?,"SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3",* (Table: mill) | id (Table: architect) | name (Table: architect) | nationality (Table: architect) | gender (Table: architect) | architect_id (Table: bridge) | id (Table: bridge) | name (Table: bridge) | location (Table: bridge) | length_meters (Table: bridge) | length_feet (Table: bridge) | architect_id (Table: mill) | id (Table: mill) | location (Table: mill) | name (Table: mill) | type (Table: mill) | built_year (Table: mill) | notes (Table: mill)
Show the protein name and the institution name.,"SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",* (Table: protein) | building_id (Table: building) | Name (Table: building) | Street_address (Table: building) | Years_as_tallest (Table: building) | Height_feet (Table: building) | Floors (Table: building) | Institution_id (Table: Institution) | Institution (Table: Institution) | Location (Table: Institution) | Founded (Table: Institution) | Type (Table: Institution) | Enrollment (Table: Institution) | Team (Table: Institution) | Primary_Conference (Table: Institution) | building_id (Table: Institution) | common_name (Table: protein) | protein_name (Table: protein) | divergence_from_human_lineage (Table: protein) | accession_number (Table: protein) | sequence_length (Table: protein) | sequence_identity_to_human_protein (Table: protein) | Institution_id (Table: protein)
how many female dependents are there?,SELECT count(*) FROM dependent WHERE sex  =  'F',* (Table: dept_locations) | Essn (Table: works_on) | Pno (Table: works_on) | Hours (Table: works_on) | Fname (Table: employee) | Minit (Table: employee) | Lname (Table: employee) | Ssn (Table: employee) | Bdate (Table: employee) | Address (Table: employee) | Sex (Table: employee) | Salary (Table: employee) | Super_ssn (Table: employee) | Dno (Table: employee) | Dname (Table: department) | Dnumber (Table: department) | Mgr_ssn (Table: department) | Mgr_start_date (Table: department) | Pname (Table: project) | Pnumber (Table: project) | Plocation (Table: project) | Dnum (Table: project) | Essn (Table: dependent) | Dependent_name (Table: dependent) | Sex (Table: dependent) | Bdate (Table: dependent) | Relationship (Table: dependent) | Dnumber (Table: dept_locations) | Dlocation (Table: dept_locations)
Please show the police forces and the number of counties with each police force.,"SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force",* (Table: city) | County_ID (Table: county_public_safety) | Name (Table: county_public_safety) | Population (Table: county_public_safety) | Police_officers (Table: county_public_safety) | Residents_per_officer (Table: county_public_safety) | Case_burden (Table: county_public_safety) | Crime_rate (Table: county_public_safety) | Police_force (Table: county_public_safety) | Location (Table: county_public_safety) | City_ID (Table: city) | County_ID (Table: city) | Name (Table: city) | White (Table: city) | Black (Table: city) | Amerindian (Table: city) | Asian (Table: city) | Multiracial (Table: city) | Hispanic (Table: city)
Show the manager name for gas stations belonging to the ExxonMobil company.,SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil',* (Table: station_company) | Company_ID (Table: company) | Rank (Table: company) | Company (Table: company) | Headquarters (Table: company) | Main_Industry (Table: company) | Sales_billion (Table: company) | Profits_billion (Table: company) | Assets_billion (Table: company) | Market_Value (Table: company) | Station_ID (Table: gas_station) | Open_Year (Table: gas_station) | Location (Table: gas_station) | Manager_Name (Table: gas_station) | Vice_Manager_Name (Table: gas_station) | Representative_Name (Table: gas_station) | Station_ID (Table: station_company) | Company_ID (Table: station_company) | Rank_of_the_Year (Table: station_company)
Find the ids of reviewers who didn't only give 4 star.,SELECT rID FROM Rating WHERE stars != 4,* (Table: Rating) | mID (Table: Movie) | title (Table: Movie) | year (Table: Movie) | director (Table: Movie) | rID (Table: Reviewer) | name (Table: Reviewer) | rID (Table: Rating) | mID (Table: Rating) | stars (Table: Rating) | ratingDate (Table: Rating)
Who is the youngest male?,SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' ),* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
Find the distinct Advisor of students who have treasurer votes in the spring election cycle.,"SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  ""Spring""",* (Table: Voting_record) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | StuID (Table: Voting_record) | Registration_Date (Table: Voting_record) | Election_Cycle (Table: Voting_record) | President_Vote (Table: Voting_record) | Vice_President_Vote (Table: Voting_record) | Secretary_Vote (Table: Voting_record) | Treasurer_Vote (Table: Voting_record) | Class_President_Vote (Table: Voting_record) | Class_Senator_Vote (Table: Voting_record)
What are the different district names in order of descending city area?,SELECT DISTINCT District_name FROM district ORDER BY city_area DESC,* (Table: store_district) | product_id (Table: product) | product (Table: product) | dimensions (Table: product) | dpi (Table: product) | pages_per_minute_color (Table: product) | max_page_size (Table: product) | interface (Table: product) | Store_ID (Table: store) | Store_Name (Table: store) | Type (Table: store) | Area_size (Table: store) | Number_of_product_category (Table: store) | Ranking (Table: store) | District_ID (Table: district) | District_name (Table: district) | Headquartered_City (Table: district) | City_Population (Table: district) | City_Area (Table: district) | Store_ID (Table: store_product) | Product_ID (Table: store_product) | Store_ID (Table: store_district) | District_ID (Table: store_district)
What are the first and last names of all the candidates?,"SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",* (Table: Candidate_Assessments) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | person_id (Table: People) | first_name (Table: People) | middle_name (Table: People) | last_name (Table: People) | cell_mobile_number (Table: People) | email_address (Table: People) | login_name (Table: People) | password (Table: People) | student_id (Table: Students) | student_details (Table: Students) | course_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | other_details (Table: Courses) | person_address_id (Table: People_Addresses) | person_id (Table: People_Addresses) | address_id (Table: People_Addresses) | date_from (Table: People_Addresses) | date_to (Table: People_Addresses) | student_id (Table: Student_Course_Registrations) | course_id (Table: Student_Course_Registrations) | registration_date (Table: Student_Course_Registrations) | student_id (Table: Student_Course_Attendance) | course_id (Table: Student_Course_Attendance) | date_of_attendance (Table: Student_Course_Attendance) | candidate_id (Table: Candidates) | candidate_details (Table: Candidates) | candidate_id (Table: Candidate_Assessments) | qualification (Table: Candidate_Assessments) | assessment_date (Table: Candidate_Assessments) | asessment_outcome_code (Table: Candidate_Assessments)
"Find the name of all customers whose name contains ""Alex"".","SELECT customer_name FROM customers WHERE customer_name LIKE ""%Alex%""",* (Table: Order_Items) | address_id (Table: Addresses) | address_content (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | product_id (Table: Products) | product_details (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | date_became_customer (Table: Customers) | other_customer_details (Table: Customers) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | customer_id (Table: Customer_Contact_Channels) | channel_code (Table: Customer_Contact_Channels) | active_from_date (Table: Customer_Contact_Channels) | active_to_date (Table: Customer_Contact_Channels) | contact_number (Table: Customer_Contact_Channels) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status (Table: Customer_Orders) | order_date (Table: Customer_Orders) | order_details (Table: Customer_Orders) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | order_quantity (Table: Order_Items)
What are the languages that are used most often in songs?,SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1,* (Table: song) | g_name (Table: genre) | rating (Table: genre) | most_popular_in (Table: genre) | artist_name (Table: artist) | country (Table: artist) | gender (Table: artist) | preferred_genre (Table: artist) | f_id (Table: files) | artist_name (Table: files) | file_size (Table: files) | duration (Table: files) | formats (Table: files) | song_name (Table: song) | artist_name (Table: song) | country (Table: song) | f_id (Table: song) | genre_is (Table: song) | rating (Table: song) | languages (Table: song) | releasedate (Table: song) | resolution (Table: song)
"What are the names of colleges that have two or more players, listed in descending alphabetical order?",SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC,* (Table: player) | Country_id (Table: country) | Country_name (Table: country) | Capital (Table: country) | Official_native_language (Table: country) | Team_id (Table: team) | Name (Table: team) | Season (Table: match_season) | Player (Table: match_season) | Position (Table: match_season) | Country (Table: match_season) | Team (Table: match_season) | Draft_Pick_Number (Table: match_season) | Draft_Class (Table: match_season) | College (Table: match_season) | Player_ID (Table: player) | Player (Table: player) | Years_Played (Table: player) | Total_WL (Table: player) | Singles_WL (Table: player) | Doubles_WL (Table: player) | Team (Table: player)
What are the names of the artists that are from the UK and sang songs in English?,"SELECT artist_name FROM artist WHERE country  =  ""UK"" INTERSECT SELECT artist_name FROM song WHERE languages  =  ""english""",* (Table: song) | g_name (Table: genre) | rating (Table: genre) | most_popular_in (Table: genre) | artist_name (Table: artist) | country (Table: artist) | gender (Table: artist) | preferred_genre (Table: artist) | f_id (Table: files) | artist_name (Table: files) | file_size (Table: files) | duration (Table: files) | formats (Table: files) | song_name (Table: song) | artist_name (Table: song) | country (Table: song) | f_id (Table: song) | genre_is (Table: song) | rating (Table: song) | languages (Table: song) | releasedate (Table: song) | resolution (Table: song)
What is the name of teh studio that created the most films?,SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1,* (Table: film_market_estimation) | Film_ID (Table: film) | Title (Table: film) | Studio (Table: film) | Director (Table: film) | Gross_in_dollar (Table: film) | Market_ID (Table: market) | Country (Table: market) | Number_cities (Table: market) | Estimation_ID (Table: film_market_estimation) | Low_Estimate (Table: film_market_estimation) | High_Estimate (Table: film_market_estimation) | Film_ID (Table: film_market_estimation) | Type (Table: film_market_estimation) | Market_ID (Table: film_market_estimation) | Year (Table: film_market_estimation)
Count the number of ships.,SELECT count(*) FROM ship,* (Table: Ship) | Captain_ID (Table: captain) | Name (Table: captain) | Ship_ID (Table: captain) | age (Table: captain) | Class (Table: captain) | Rank (Table: captain) | Ship_ID (Table: Ship) | Name (Table: Ship) | Type (Table: Ship) | Built_Year (Table: Ship) | Class (Table: Ship) | Flag (Table: Ship)
What are the cities that do not have any branches with more than 100 members?,SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100,* (Table: purchase) | Member_ID (Table: member) | Card_Number (Table: member) | Name (Table: member) | Hometown (Table: member) | Level (Table: member) | Branch_ID (Table: branch) | Name (Table: branch) | Open_year (Table: branch) | Address_road (Table: branch) | City (Table: branch) | membership_amount (Table: branch) | Member_ID (Table: membership_register_branch) | Branch_ID (Table: membership_register_branch) | Register_Year (Table: membership_register_branch) | Member_ID (Table: purchase) | Branch_ID (Table: purchase) | Year (Table: purchase) | Total_pounds (Table: purchase)
Count the number of wrestlers.,SELECT count(*) FROM wrestler,* (Table: Elimination) | Wrestler_ID (Table: wrestler) | Name (Table: wrestler) | Reign (Table: wrestler) | Days_held (Table: wrestler) | Location (Table: wrestler) | Event (Table: wrestler) | Elimination_ID (Table: Elimination) | Wrestler_ID (Table: Elimination) | Team (Table: Elimination) | Eliminated_By (Table: Elimination) | Elimination_Move (Table: Elimination) | Time (Table: Elimination)
"List all information about customer master index, and sort them by details in descending order.",SELECT * FROM customer_master_index ORDER BY cmi_details DESC,* (Table: Electoral_Register) | master_customer_id (Table: Customer_Master_Index) | cmi_details (Table: Customer_Master_Index) | cmi_cross_ref_id (Table: CMI_Cross_References) | master_customer_id (Table: CMI_Cross_References) | source_system_code (Table: CMI_Cross_References) | council_tax_id (Table: Council_Tax) | cmi_cross_ref_id (Table: Council_Tax) | business_rates_id (Table: Business_Rates) | cmi_cross_ref_id (Table: Business_Rates) | council_tax_id (Table: Benefits_Overpayments) | cmi_cross_ref_id (Table: Benefits_Overpayments) | council_tax_id (Table: Parking_Fines) | cmi_cross_ref_id (Table: Parking_Fines) | council_tax_id (Table: Rent_Arrears) | cmi_cross_ref_id (Table: Rent_Arrears) | electoral_register_id (Table: Electoral_Register) | cmi_cross_ref_id (Table: Electoral_Register)
Count the number of distinct claim outcome codes.,SELECT count(DISTINCT claim_outcome_code) FROM claims_processing,* (Table: Claims_Processing) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Staff_ID (Table: Staff) | Staff_Details (Table: Staff) | Policy_ID (Table: Policies) | Customer_ID (Table: Policies) | Policy_Type_Code (Table: Policies) | Start_Date (Table: Policies) | End_Date (Table: Policies) | Claim_Header_ID (Table: Claim_Headers) | Claim_Status_Code (Table: Claim_Headers) | Claim_Type_Code (Table: Claim_Headers) | Policy_ID (Table: Claim_Headers) | Date_of_Claim (Table: Claim_Headers) | Date_of_Settlement (Table: Claim_Headers) | Amount_Claimed (Table: Claim_Headers) | Amount_Piad (Table: Claim_Headers) | Claim_ID (Table: Claims_Documents) | Document_Type_Code (Table: Claims_Documents) | Created_by_Staff_ID (Table: Claims_Documents) | Created_Date (Table: Claims_Documents) | Claim_Stage_ID (Table: Claims_Processing_Stages) | Next_Claim_Stage_ID (Table: Claims_Processing_Stages) | Claim_Status_Name (Table: Claims_Processing_Stages) | Claim_Status_Description (Table: Claims_Processing_Stages) | Claim_Processing_ID (Table: Claims_Processing) | Claim_ID (Table: Claims_Processing) | Claim_Outcome_Code (Table: Claims_Processing) | Claim_Stage_ID (Table: Claims_Processing) | Staff_ID (Table: Claims_Processing)
How many patients' prescriptions are made by physician John Dorian?,"SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = ""John Dorian""",* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
"What is the total horses record for each farm, sorted ascending?",SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC,* (Table: competition_record) | City_ID (Table: city) | Official_Name (Table: city) | Status (Table: city) | Area_km_2 (Table: city) | Population (Table: city) | Census_Ranking (Table: city) | Farm_ID (Table: farm) | Year (Table: farm) | Total_Horses (Table: farm) | Working_Horses (Table: farm) | Total_Cattle (Table: farm) | Oxen (Table: farm) | Bulls (Table: farm) | Cows (Table: farm) | Pigs (Table: farm) | Sheep_and_Goats (Table: farm) | Competition_ID (Table: farm_competition) | Year (Table: farm_competition) | Theme (Table: farm_competition) | Host_city_ID (Table: farm_competition) | Hosts (Table: farm_competition) | Competition_ID (Table: competition_record) | Farm_ID (Table: competition_record) | Rank (Table: competition_record)
"display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.","SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
"List the subject ID, name of subject and the number of courses available for each subject in ascending order of the course counts.","SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC",* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
List the names of all the distinct customers who bought a keyboard.,"SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  ""keyboard""",* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
Find the name of students who didn't take any course from Biology department.,SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology'),* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
How many train stations are there?,SELECT count(*) FROM station,* (Table: train_station) | Station_ID (Table: station) | Name (Table: station) | Annual_entry_exit (Table: station) | Annual_interchanges (Table: station) | Total_Passengers (Table: station) | Location (Table: station) | Main_Services (Table: station) | Number_of_Platforms (Table: station) | Train_ID (Table: train) | Name (Table: train) | Time (Table: train) | Service (Table: train) | Train_ID (Table: train_station) | Station_ID (Table: train_station)
Find the types and details for all premises and order by the premise type.,"SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type",* (Table: Order_Items) | premise_id (Table: Premises) | premises_type (Table: Premises) | premise_details (Table: Premises) | product_id (Table: Products) | product_category (Table: Products) | product_name (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | customer_address (Table: Customers) | customer_login (Table: Customers) | customer_password (Table: Customers) | mailshot_id (Table: Mailshot_Campaigns) | product_category (Table: Mailshot_Campaigns) | mailshot_name (Table: Mailshot_Campaigns) | mailshot_start_date (Table: Mailshot_Campaigns) | mailshot_end_date (Table: Mailshot_Campaigns) | customer_id (Table: Customer_Addresses) | premise_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type_code (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | shipping_method_code (Table: Customer_Orders) | order_placed_datetime (Table: Customer_Orders) | order_delivered_datetime (Table: Customer_Orders) | order_shipping_charges (Table: Customer_Orders) | mailshot_id (Table: Mailshot_Customers) | customer_id (Table: Mailshot_Customers) | outcome_code (Table: Mailshot_Customers) | mailshot_customer_date (Table: Mailshot_Customers) | item_id (Table: Order_Items) | order_item_status_code (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | item_status_code (Table: Order_Items) | item_delivered_datetime (Table: Order_Items) | item_order_quantity (Table: Order_Items)
What are the names of patients who are not taking the medication of Procrastin-X.,SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X',* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
What are the numbers of constructors for different nationalities?,"SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
Return the number of accounts that the customer with the first name Art and last name Turcotte has.,"SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  ""Art"" AND T2.customer_last_name  =  ""Turcotte""",* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?,"SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",* (Table: CHECKING) | custid (Table: ACCOUNTS) | name (Table: ACCOUNTS) | custid (Table: SAVINGS) | balance (Table: SAVINGS) | custid (Table: CHECKING) | balance (Table: CHECKING)
What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check',SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check',* (Table: View_Product_Availability) | coupon_id (Table: Discount_Coupons) | date_issued (Table: Discount_Coupons) | coupon_amount (Table: Discount_Coupons) | customer_id (Table: Customers) | coupon_id (Table: Customers) | good_or_bad_customer (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | gender_mf (Table: Customers) | date_became_customer (Table: Customers) | date_last_hire (Table: Customers) | booking_id (Table: Bookings) | customer_id (Table: Bookings) | booking_status_code (Table: Bookings) | returned_damaged_yn (Table: Bookings) | booking_start_date (Table: Bookings) | booking_end_date (Table: Bookings) | count_hired (Table: Bookings) | amount_payable (Table: Bookings) | amount_of_discount (Table: Bookings) | amount_outstanding (Table: Bookings) | amount_of_refund (Table: Bookings) | product_id (Table: Products_for_Hire) | product_type_code (Table: Products_for_Hire) | daily_hire_cost (Table: Products_for_Hire) | product_name (Table: Products_for_Hire) | product_description (Table: Products_for_Hire) | payment_id (Table: Payments) | booking_id (Table: Payments) | customer_id (Table: Payments) | payment_type_code (Table: Payments) | amount_paid_in_full_yn (Table: Payments) | payment_date (Table: Payments) | amount_due (Table: Payments) | amount_paid (Table: Payments) | booking_id (Table: Products_Booked) | product_id (Table: Products_Booked) | returned_yn (Table: Products_Booked) | returned_late_yn (Table: Products_Booked) | booked_count (Table: Products_Booked) | booked_amount (Table: Products_Booked) | product_id (Table: View_Product_Availability) | booking_id (Table: View_Product_Availability) | status_date (Table: View_Product_Availability) | available_yn (Table: View_Product_Availability)
Show all publishers which do not have a book in 1989.,SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989,* (Table: culture_company) | book_club_id (Table: book_club) | Year (Table: book_club) | Author_or_Editor (Table: book_club) | Book_Title (Table: book_club) | Publisher (Table: book_club) | Category (Table: book_club) | Result (Table: book_club) | movie_id (Table: movie) | Title (Table: movie) | Year (Table: movie) | Director (Table: movie) | Budget_million (Table: movie) | Gross_worldwide (Table: movie) | Company_name (Table: culture_company) | Type (Table: culture_company) | Incorporated_in (Table: culture_company) | Group_Equity_Shareholding (Table: culture_company) | book_club_id (Table: culture_company) | movie_id (Table: culture_company)
Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.,SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200,* (Table: climber) | Mountain_ID (Table: mountain) | Name (Table: mountain) | Height (Table: mountain) | Prominence (Table: mountain) | Range (Table: mountain) | Country (Table: mountain) | Climber_ID (Table: climber) | Name (Table: climber) | Country (Table: climber) | Time (Table: climber) | Points (Table: climber) | Mountain_ID (Table: climber)
What are the department ids for which more than 10 employees had a commission?,SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10,* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
What is the headquarter of the company with the largest sales?,SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1,* (Table: employment) | People_ID (Table: people) | Age (Table: people) | Name (Table: people) | Nationality (Table: people) | Graduation_College (Table: people) | Company_ID (Table: company) | Name (Table: company) | Headquarters (Table: company) | Industry (Table: company) | Sales_in_Billion (Table: company) | Profits_in_Billion (Table: company) | Assets_in_Billion (Table: company) | Market_Value_in_Billion (Table: company) | Company_ID (Table: employment) | People_ID (Table: employment) | Year_working (Table: employment)
What are the start date and end date of each apartment booking?,"SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings",* (Table: View_Unit_Status) | building_id (Table: Apartment_Buildings) | building_short_name (Table: Apartment_Buildings) | building_full_name (Table: Apartment_Buildings) | building_description (Table: Apartment_Buildings) | building_address (Table: Apartment_Buildings) | building_manager (Table: Apartment_Buildings) | building_phone (Table: Apartment_Buildings) | apt_id (Table: Apartments) | building_id (Table: Apartments) | apt_type_code (Table: Apartments) | apt_number (Table: Apartments) | bathroom_count (Table: Apartments) | bedroom_count (Table: Apartments) | room_count (Table: Apartments) | apt_id (Table: Apartment_Facilities) | facility_code (Table: Apartment_Facilities) | guest_id (Table: Guests) | gender_code (Table: Guests) | guest_first_name (Table: Guests) | guest_last_name (Table: Guests) | date_of_birth (Table: Guests) | apt_booking_id (Table: Apartment_Bookings) | apt_id (Table: Apartment_Bookings) | guest_id (Table: Apartment_Bookings) | booking_status_code (Table: Apartment_Bookings) | booking_start_date (Table: Apartment_Bookings) | booking_end_date (Table: Apartment_Bookings) | apt_id (Table: View_Unit_Status) | apt_booking_id (Table: View_Unit_Status) | status_date (Table: View_Unit_Status) | available_yn (Table: View_Unit_Status)
Show names for all employees who do not have certificate of Boeing 737-800.,"SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  ""Boeing 737-800""",* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
Show all director names who have a movie in both year 1999 and 2000.,SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999,* (Table: culture_company) | book_club_id (Table: book_club) | Year (Table: book_club) | Author_or_Editor (Table: book_club) | Book_Title (Table: book_club) | Publisher (Table: book_club) | Category (Table: book_club) | Result (Table: book_club) | movie_id (Table: movie) | Title (Table: movie) | Year (Table: movie) | Director (Table: movie) | Budget_million (Table: movie) | Gross_worldwide (Table: movie) | Company_name (Table: culture_company) | Type (Table: culture_company) | Incorporated_in (Table: culture_company) | Group_Equity_Shareholding (Table: culture_company) | book_club_id (Table: culture_company) | movie_id (Table: culture_company)
List all the names of schools with an endowment amount smaller than or equal to 10.,SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10,* (Table: endowment) | School_id (Table: School) | School_name (Table: School) | Location (Table: School) | Mascot (Table: School) | Enrollment (Table: School) | IHSAA_Class (Table: School) | IHSAA_Football_Class (Table: School) | County (Table: School) | School_id (Table: budget) | Year (Table: budget) | Budgeted (Table: budget) | total_budget_percent_budgeted (Table: budget) | Invested (Table: budget) | total_budget_percent_invested (Table: budget) | Budget_invested_percent (Table: budget) | endowment_id (Table: endowment) | School_id (Table: endowment) | donator_name (Table: endowment) | amount (Table: endowment)
What are all the employees without a department number?,"SELECT * FROM employees WHERE department_id  =  ""null""",* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
What are all the company names that have a book published by Alyson?,SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson',* (Table: culture_company) | book_club_id (Table: book_club) | Year (Table: book_club) | Author_or_Editor (Table: book_club) | Book_Title (Table: book_club) | Publisher (Table: book_club) | Category (Table: book_club) | Result (Table: book_club) | movie_id (Table: movie) | Title (Table: movie) | Year (Table: movie) | Director (Table: movie) | Budget_million (Table: movie) | Gross_worldwide (Table: movie) | Company_name (Table: culture_company) | Type (Table: culture_company) | Incorporated_in (Table: culture_company) | Group_Equity_Shareholding (Table: culture_company) | book_club_id (Table: culture_company) | movie_id (Table: culture_company)
Return the names of musicals who have the nominee Bob Fosse.,"SELECT Name FROM musical WHERE Nominee  =  ""Bob Fosse""",* (Table: actor) | Musical_ID (Table: musical) | Name (Table: musical) | Year (Table: musical) | Award (Table: musical) | Category (Table: musical) | Nominee (Table: musical) | Result (Table: musical) | Actor_ID (Table: actor) | Name (Table: actor) | Musical_ID (Table: actor) | Character (Table: actor) | Duration (Table: actor) | age (Table: actor)
What is the total amount of grants given by each organisations? Also list the organisation id.,"SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id",* (Table: Tasks) | document_type_code (Table: Document_Types) | document_description (Table: Document_Types) | document_id (Table: Documents) | document_type_code (Table: Documents) | grant_id (Table: Documents) | sent_date (Table: Documents) | response_received_date (Table: Documents) | other_details (Table: Documents) | grant_id (Table: Grants) | organisation_id (Table: Grants) | grant_amount (Table: Grants) | grant_start_date (Table: Grants) | grant_end_date (Table: Grants) | other_details (Table: Grants) | organisation_type (Table: Organisation_Types) | organisation_type_description (Table: Organisation_Types) | organisation_id (Table: Organisations) | organisation_type (Table: Organisations) | organisation_details (Table: Organisations) | project_id (Table: Project_Outcomes) | outcome_code (Table: Project_Outcomes) | outcome_details (Table: Project_Outcomes) | staff_id (Table: Project_Staff) | project_id (Table: Project_Staff) | role_code (Table: Project_Staff) | date_from (Table: Project_Staff) | date_to (Table: Project_Staff) | other_details (Table: Project_Staff) | project_id (Table: Projects) | organisation_id (Table: Projects) | project_details (Table: Projects) | outcome_code (Table: Research_Outcomes) | outcome_description (Table: Research_Outcomes) | staff_id (Table: Research_Staff) | employer_organisation_id (Table: Research_Staff) | staff_details (Table: Research_Staff) | role_code (Table: Staff_Roles) | role_description (Table: Staff_Roles) | task_id (Table: Tasks) | project_id (Table: Tasks) | task_details (Table: Tasks) | eg Agree Objectives (Table: Tasks)
How many customers are there in the customer type with the most customers?,SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1,* (Table: Complaints) | staff_id (Table: Staff) | gender (Table: Staff) | first_name (Table: Staff) | last_name (Table: Staff) | email_address (Table: Staff) | phone_number (Table: Staff) | customer_id (Table: Customers) | customer_type_code (Table: Customers) | address_line_1 (Table: Customers) | address_line_2 (Table: Customers) | town_city (Table: Customers) | state (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | product_id (Table: Products) | parent_product_id (Table: Products) | product_category_code (Table: Products) | date_product_first_available (Table: Products) | date_product_discontinued (Table: Products) | product_name (Table: Products) | product_description (Table: Products) | product_price (Table: Products) | complaint_id (Table: Complaints) | product_id (Table: Complaints) | customer_id (Table: Complaints) | complaint_outcome_code (Table: Complaints) | complaint_status_code (Table: Complaints) | complaint_type_code (Table: Complaints) | date_complaint_raised (Table: Complaints) | date_complaint_closed (Table: Complaints) | staff_id (Table: Complaints)
"For each movie that received more than 3 reviews, what is the average rating?","SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",* (Table: Rating) | mID (Table: Movie) | title (Table: Movie) | year (Table: Movie) | director (Table: Movie) | rID (Table: Reviewer) | name (Table: Reviewer) | rID (Table: Rating) | mID (Table: Rating) | stars (Table: Rating) | ratingDate (Table: Rating)
"Display the first and last name, and salary for those employees whose first name is ending with the letter m.","SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
What is the last name of the student who got a grade A in the class with code 10018.,SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018,* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
What is the name of the technician whose team is not 'NYY'?,"SELECT Name FROM technician WHERE Team != ""NYY""",* (Table: repair_assignment) | repair_ID (Table: repair) | name (Table: repair) | Launch_Date (Table: repair) | Notes (Table: repair) | Machine_ID (Table: machine) | Making_Year (Table: machine) | Class (Table: machine) | Team (Table: machine) | Machine_series (Table: machine) | value_points (Table: machine) | quality_rank (Table: machine) | technician_id (Table: technician) | Name (Table: technician) | Team (Table: technician) | Starting_Year (Table: technician) | Age (Table: technician) | technician_id (Table: repair_assignment) | repair_ID (Table: repair_assignment) | Machine_ID (Table: repair_assignment)
What are the names of the clients who do not have any booking?,SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID,* (Table: Invoice_Items) | payment_method_code (Table: Ref_Payment_Methods) | payment_method_description (Table: Ref_Payment_Methods) | Service_Type_Code (Table: Ref_Service_Types) | Parent_Service_Type_Code (Table: Ref_Service_Types) | Service_Type_Description (Table: Ref_Service_Types) | Address_ID (Table: Addresses) | Line_1 (Table: Addresses) | Line_2 (Table: Addresses) | City_Town (Table: Addresses) | State_County (Table: Addresses) | Other_Details (Table: Addresses) | Product_ID (Table: Products) | Product_Name (Table: Products) | Product_Price (Table: Products) | Product_Description (Table: Products) | Other_Product_Service_Details (Table: Products) | Marketing_Region_Code (Table: Marketing_Regions) | Marketing_Region_Name (Table: Marketing_Regions) | Marketing_Region_Descriptrion (Table: Marketing_Regions) | Other_Details (Table: Marketing_Regions) | Client_ID (Table: Clients) | Address_ID (Table: Clients) | Customer_Email_Address (Table: Clients) | Customer_Name (Table: Clients) | Customer_Phone (Table: Clients) | Other_Details (Table: Clients) | Workshop_Group_ID (Table: Drama_Workshop_Groups) | Address_ID (Table: Drama_Workshop_Groups) | Currency_Code (Table: Drama_Workshop_Groups) | Marketing_Region_Code (Table: Drama_Workshop_Groups) | Store_Name (Table: Drama_Workshop_Groups) | Store_Phone (Table: Drama_Workshop_Groups) | Store_Email_Address (Table: Drama_Workshop_Groups) | Other_Details (Table: Drama_Workshop_Groups) | Performer_ID (Table: Performers) | Address_ID (Table: Performers) | Customer_Name (Table: Performers) | Customer_Phone (Table: Performers) | Customer_Email_Address (Table: Performers) | Other_Details (Table: Performers) | Customer_ID (Table: Customers) | Address_ID (Table: Customers) | Customer_Name (Table: Customers) | Customer_Phone (Table: Customers) | Customer_Email_Address (Table: Customers) | Other_Details (Table: Customers) | Store_ID (Table: Stores) | Address_ID (Table: Stores) | Marketing_Region_Code (Table: Stores) | Store_Name (Table: Stores) | Store_Phone (Table: Stores) | Store_Email_Address (Table: Stores) | Other_Details (Table: Stores) | Booking_ID (Table: Bookings) | Customer_ID (Table: Bookings) | Workshop_Group_ID (Table: Bookings) | Status_Code (Table: Bookings) | Store_ID (Table: Bookings) | Order_Date (Table: Bookings) | Planned_Delivery_Date (Table: Bookings) | Actual_Delivery_Date (Table: Bookings) | Other_Order_Details (Table: Bookings) | Order_ID (Table: Performers_in_Bookings) | Performer_ID (Table: Performers_in_Bookings) | Order_ID (Table: Customer_Orders) | Customer_ID (Table: Customer_Orders) | Store_ID (Table: Customer_Orders) | Order_Date (Table: Customer_Orders) | Planned_Delivery_Date (Table: Customer_Orders) | Actual_Delivery_Date (Table: Customer_Orders) | Other_Order_Details (Table: Customer_Orders) | Order_Item_ID (Table: Order_Items) | Order_ID (Table: Order_Items) | Product_ID (Table: Order_Items) | Order_Quantity (Table: Order_Items) | Other_Item_Details (Table: Order_Items) | Invoice_ID (Table: Invoices) | Order_ID (Table: Invoices) | payment_method_code (Table: Invoices) | Product_ID (Table: Invoices) | Order_Quantity (Table: Invoices) | Other_Item_Details (Table: Invoices) | Order_Item_ID (Table: Invoices) | Service_ID (Table: Services) | Service_Type_Code (Table: Services) | Workshop_Group_ID (Table: Services) | Product_Description (Table: Services) | Product_Name (Table: Services) | Product_Price (Table: Services) | Other_Product_Service_Details (Table: Services) | Order_ID (Table: Bookings_Services) | Product_ID (Table: Bookings_Services) | Invoice_Item_ID (Table: Invoice_Items) | Invoice_ID (Table: Invoice_Items) | Order_ID (Table: Invoice_Items) | Order_Item_ID (Table: Invoice_Items) | Product_ID (Table: Invoice_Items) | Order_Quantity (Table: Invoice_Items) | Other_Item_Details (Table: Invoice_Items)
Find the names of the top 3 departments that provide the largest amount of courses?,SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3,* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
What is the average and minimum age of all artists from United States.,"SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'",* (Table: exhibition_record) | Artist_ID (Table: artist) | Name (Table: artist) | Country (Table: artist) | Year_Join (Table: artist) | Age (Table: artist) | Exhibition_ID (Table: exhibition) | Year (Table: exhibition) | Theme (Table: exhibition) | Artist_ID (Table: exhibition) | Ticket_Price (Table: exhibition) | Exhibition_ID (Table: exhibition_record) | Date (Table: exhibition_record) | Attendance (Table: exhibition_record)
Show all opening years and the number of churches that opened in that year.,"SELECT open_date ,  count(*) FROM church GROUP BY open_date",* (Table: wedding) | People_ID (Table: people) | Name (Table: people) | Country (Table: people) | Is_Male (Table: people) | Age (Table: people) | Church_ID (Table: church) | Name (Table: church) | Organized_by (Table: church) | Open_Date (Table: church) | Continuation_of (Table: church) | Church_ID (Table: wedding) | Male_ID (Table: wedding) | Female_ID (Table: wedding) | Year (Table: wedding)
What are the names of candidates who have a lower support rate than oppose rate?,SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate,* (Table: people) | Candidate_ID (Table: candidate) | People_ID (Table: candidate) | Poll_Source (Table: candidate) | Date (Table: candidate) | Support_rate (Table: candidate) | Consider_rate (Table: candidate) | Oppose_rate (Table: candidate) | Unsure_rate (Table: candidate) | People_ID (Table: people) | Sex (Table: people) | Name (Table: people) | Date_of_Birth (Table: people) | Height (Table: people) | Weight (Table: people)
How many customers does Steve Johnson support?,"SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = ""Steve"" AND T1.last_name = ""Johnson"";",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?,SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff'),* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
What are the official languages of the countries of players from Maryland or Duke college?,"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  ""Maryland"" OR T2.College  =  ""Duke""",* (Table: player) | Country_id (Table: country) | Country_name (Table: country) | Capital (Table: country) | Official_native_language (Table: country) | Team_id (Table: team) | Name (Table: team) | Season (Table: match_season) | Player (Table: match_season) | Position (Table: match_season) | Country (Table: match_season) | Team (Table: match_season) | Draft_Pick_Number (Table: match_season) | Draft_Class (Table: match_season) | College (Table: match_season) | Player_ID (Table: player) | Player (Table: player) | Years_Played (Table: player) | Total_WL (Table: player) | Singles_WL (Table: player) | Doubles_WL (Table: player) | Team (Table: player)
List the writers who have written more than one book.,SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1,* (Table: book) | Publication_ID (Table: publication) | Book_ID (Table: publication) | Publisher (Table: publication) | Publication_Date (Table: publication) | Price (Table: publication) | Book_ID (Table: book) | Title (Table: book) | Issues (Table: book) | Writer (Table: book)
Show the position of players and the corresponding number of players.,"SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION",* (Table: player) | Country_id (Table: country) | Country_name (Table: country) | Capital (Table: country) | Official_native_language (Table: country) | Team_id (Table: team) | Name (Table: team) | Season (Table: match_season) | Player (Table: match_season) | Position (Table: match_season) | Country (Table: match_season) | Team (Table: match_season) | Draft_Pick_Number (Table: match_season) | Draft_Class (Table: match_season) | College (Table: match_season) | Player_ID (Table: player) | Player (Table: player) | Years_Played (Table: player) | Total_WL (Table: player) | Singles_WL (Table: player) | Doubles_WL (Table: player) | Team (Table: player)
Give the id and product type of the product with the lowest price.,"SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1",* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
Show order ids and the total quantity in each order.,"SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
Show all information on the airport that has the largest number of international passengers.,SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1,* (Table: airport_aircraft) | Pilot_Id (Table: pilot) | Name (Table: pilot) | Age (Table: pilot) | Aircraft_ID (Table: aircraft) | Aircraft (Table: aircraft) | Description (Table: aircraft) | Max_Gross_Weight (Table: aircraft) | Total_disk_area (Table: aircraft) | Max_disk_Loading (Table: aircraft) | Round (Table: match) | Location (Table: match) | Country (Table: match) | Date (Table: match) | Fastest_Qualifying (Table: match) | Winning_Pilot (Table: match) | Winning_Aircraft (Table: match) | Airport_ID (Table: airport) | Airport_Name (Table: airport) | Total_Passengers (Table: airport) | %_Change_2007 (Table: airport) | International_Passengers (Table: airport) | Domestic_Passengers (Table: airport) | Transit_Passengers (Table: airport) | Aircraft_Movements (Table: airport) | Freight_Metric_Tonnes (Table: airport) | ID (Table: airport_aircraft) | Airport_ID (Table: airport_aircraft) | Aircraft_ID (Table: airport_aircraft)
List name of all tracks in Balls to the Wall.,"SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = ""Balls to the Wall"";",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
Find the category descriptions of the products whose descriptions include letter 't'.,SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%',* (Table: Product_Characteristics) | characteristic_type_code (Table: Ref_Characteristic_Types) | characteristic_type_description (Table: Ref_Characteristic_Types) | color_code (Table: Ref_Colors) | color_description (Table: Ref_Colors) | product_category_code (Table: Ref_Product_Categories) | product_category_description (Table: Ref_Product_Categories) | unit_of_measure (Table: Ref_Product_Categories) | characteristic_id (Table: Characteristics) | characteristic_type_code (Table: Characteristics) | characteristic_data_type (Table: Characteristics) | characteristic_name (Table: Characteristics) | other_characteristic_details (Table: Characteristics) | product_id (Table: Products) | color_code (Table: Products) | product_category_code (Table: Products) | product_name (Table: Products) | typical_buying_price (Table: Products) | typical_selling_price (Table: Products) | product_description (Table: Products) | other_product_details (Table: Products) | product_id (Table: Product_Characteristics) | characteristic_id (Table: Product_Characteristics) | product_characteristic_value (Table: Product_Characteristics)
Count the number of appelations in Napa County.,"SELECT count(*) FROM APPELLATIONS WHERE County  =  ""Napa""",* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
Show student ids who don't have any sports.,SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo,* (Table: SportsInfo) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | GameID (Table: Video_Games) | GName (Table: Video_Games) | GType (Table: Video_Games) | StuID (Table: Plays_Games) | GameID (Table: Plays_Games) | Hours_Played (Table: Plays_Games) | StuID (Table: SportsInfo) | SportName (Table: SportsInfo) | HoursPerWeek (Table: SportsInfo) | GamesPlayed (Table: SportsInfo) | OnScholarship (Table: SportsInfo)
"List the number of invoices from Chicago, IL.","SELECT COUNT(*) FROM invoices WHERE billing_city  =  ""Chicago"" AND billing_state  =  ""IL"";",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
What is zip code of customer with first name as Carole and last name as Bernhard?,"SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = ""Carole"" AND T1.last_name = ""Bernhard""",* (Table: Lessons) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | staff_id (Table: Staff) | staff_address_id (Table: Staff) | nickname (Table: Staff) | first_name (Table: Staff) | middle_name (Table: Staff) | last_name (Table: Staff) | date_of_birth (Table: Staff) | date_joined_staff (Table: Staff) | date_left_staff (Table: Staff) | vehicle_id (Table: Vehicles) | vehicle_details (Table: Vehicles) | customer_id (Table: Customers) | customer_address_id (Table: Customers) | customer_status_code (Table: Customers) | date_became_customer (Table: Customers) | date_of_birth (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | amount_outstanding (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | cell_mobile_phone_number (Table: Customers) | customer_id (Table: Customer_Payments) | datetime_payment (Table: Customer_Payments) | payment_method_code (Table: Customer_Payments) | amount_payment (Table: Customer_Payments) | lesson_id (Table: Lessons) | customer_id (Table: Lessons) | lesson_status_code (Table: Lessons) | staff_id (Table: Lessons) | vehicle_id (Table: Lessons) | lesson_date (Table: Lessons) | lesson_time (Table: Lessons) | price (Table: Lessons)
What are the names of movies that get 3 star and 4 star?,SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4,* (Table: Rating) | mID (Table: Movie) | title (Table: Movie) | year (Table: Movie) | director (Table: Movie) | rID (Table: Reviewer) | name (Table: Reviewer) | rID (Table: Rating) | mID (Table: Rating) | stars (Table: Rating) | ratingDate (Table: Rating)
Tell me the the claim date and settlement date for each settlement case.,"SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements",* (Table: Payments) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Policy_ID (Table: Customer_Policies) | Customer_ID (Table: Customer_Policies) | Policy_Type_Code (Table: Customer_Policies) | Start_Date (Table: Customer_Policies) | End_Date (Table: Customer_Policies) | Claim_ID (Table: Claims) | Policy_ID (Table: Claims) | Date_Claim_Made (Table: Claims) | Date_Claim_Settled (Table: Claims) | Amount_Claimed (Table: Claims) | Amount_Settled (Table: Claims) | Settlement_ID (Table: Settlements) | Claim_ID (Table: Settlements) | Date_Claim_Made (Table: Settlements) | Date_Claim_Settled (Table: Settlements) | Amount_Claimed (Table: Settlements) | Amount_Settled (Table: Settlements) | Customer_Policy_ID (Table: Settlements) | Payment_ID (Table: Payments) | Settlement_ID (Table: Payments) | Payment_Method_Code (Table: Payments) | Date_Payment_Made (Table: Payments) | Amount_Payment (Table: Payments)
List the votes of elections in descending order.,SELECT Votes FROM election ORDER BY Votes DESC,* (Table: representative) | Election_ID (Table: election) | Representative_ID (Table: election) | Date (Table: election) | Votes (Table: election) | Vote_Percent (Table: election) | Seats (Table: election) | Place (Table: election) | Representative_ID (Table: representative) | Name (Table: representative) | State (Table: representative) | Party (Table: representative) | Lifespan (Table: representative)
Who are the owners of the programs that broadcast both in the morning and at night?,"SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  ""Morning"" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  ""Night""",* (Table: broadcast_share) | Program_ID (Table: program) | Name (Table: program) | Origin (Table: program) | Launch (Table: program) | Owner (Table: program) | Channel_ID (Table: channel) | Name (Table: channel) | Owner (Table: channel) | Share_in_percent (Table: channel) | Rating_in_percent (Table: channel) | Channel_ID (Table: broadcast) | Program_ID (Table: broadcast) | Time_of_day (Table: broadcast) | Channel_ID (Table: broadcast_share) | Program_ID (Table: broadcast_share) | Date (Table: broadcast_share) | Share_in_percent (Table: broadcast_share)
Which order has the most recent shipment? Give me the order id.,SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments),* (Table: Shipment_Items) | customer_id (Table: Customers) | customer_name (Table: Customers) | customer_details (Table: Customers) | invoice_number (Table: Invoices) | invoice_date (Table: Invoices) | invoice_details (Table: Invoices) | order_id (Table: Orders) | customer_id (Table: Orders) | order_status (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | product_id (Table: Products) | product_name (Table: Products) | product_details (Table: Products) | order_item_id (Table: Order_Items) | product_id (Table: Order_Items) | order_id (Table: Order_Items) | order_item_status (Table: Order_Items) | order_item_details (Table: Order_Items) | shipment_id (Table: Shipments) | order_id (Table: Shipments) | invoice_number (Table: Shipments) | shipment_tracking_number (Table: Shipments) | shipment_date (Table: Shipments) | other_shipment_details (Table: Shipments) | shipment_id (Table: Shipment_Items) | order_item_id (Table: Shipment_Items)
"Show the positions of the players from the team with name ""Ryley Goldner"".","SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  ""Ryley Goldner""",* (Table: player) | Country_id (Table: country) | Country_name (Table: country) | Capital (Table: country) | Official_native_language (Table: country) | Team_id (Table: team) | Name (Table: team) | Season (Table: match_season) | Player (Table: match_season) | Position (Table: match_season) | Country (Table: match_season) | Team (Table: match_season) | Draft_Pick_Number (Table: match_season) | Draft_Class (Table: match_season) | College (Table: match_season) | Player_ID (Table: player) | Player (Table: player) | Years_Played (Table: player) | Total_WL (Table: player) | Singles_WL (Table: player) | Doubles_WL (Table: player) | Team (Table: player)
Which products has been complained by the customer who has filed least amount of complaints?,SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1,* (Table: Complaints) | staff_id (Table: Staff) | gender (Table: Staff) | first_name (Table: Staff) | last_name (Table: Staff) | email_address (Table: Staff) | phone_number (Table: Staff) | customer_id (Table: Customers) | customer_type_code (Table: Customers) | address_line_1 (Table: Customers) | address_line_2 (Table: Customers) | town_city (Table: Customers) | state (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | product_id (Table: Products) | parent_product_id (Table: Products) | product_category_code (Table: Products) | date_product_first_available (Table: Products) | date_product_discontinued (Table: Products) | product_name (Table: Products) | product_description (Table: Products) | product_price (Table: Products) | complaint_id (Table: Complaints) | product_id (Table: Complaints) | customer_id (Table: Complaints) | complaint_outcome_code (Table: Complaints) | complaint_status_code (Table: Complaints) | complaint_type_code (Table: Complaints) | date_complaint_raised (Table: Complaints) | date_complaint_closed (Table: Complaints) | staff_id (Table: Complaints)
What are the names of people in ascending order of height?,SELECT Name FROM People ORDER BY Height ASC,* (Table: people) | Perpetrator_ID (Table: perpetrator) | People_ID (Table: perpetrator) | Date (Table: perpetrator) | Year (Table: perpetrator) | Location (Table: perpetrator) | Country (Table: perpetrator) | Killed (Table: perpetrator) | Injured (Table: perpetrator) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Home Town (Table: people)
"What are the official names of cities, ordered descending by population?",SELECT Official_Name FROM city ORDER BY Population DESC,* (Table: competition_record) | City_ID (Table: city) | Official_Name (Table: city) | Status (Table: city) | Area_km_2 (Table: city) | Population (Table: city) | Census_Ranking (Table: city) | Farm_ID (Table: farm) | Year (Table: farm) | Total_Horses (Table: farm) | Working_Horses (Table: farm) | Total_Cattle (Table: farm) | Oxen (Table: farm) | Bulls (Table: farm) | Cows (Table: farm) | Pigs (Table: farm) | Sheep_and_Goats (Table: farm) | Competition_ID (Table: farm_competition) | Year (Table: farm_competition) | Theme (Table: farm_competition) | Host_city_ID (Table: farm_competition) | Hosts (Table: farm_competition) | Competition_ID (Table: competition_record) | Farm_ID (Table: competition_record) | Rank (Table: competition_record)
What is the email and phone number of Astrid Gruber the customer?,"SELECT email ,  phone FROM customers WHERE first_name = ""Astrid"" AND last_name = ""Gruber"";",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
"Find the names of customers who have used either the service ""Close a policy"" or the service ""Upgrade a policy"".","SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  ""Close a policy"" OR t3.service_name  =  ""Upgrade a policy""",* (Table: Settlements) | Customer_ID (Table: Customers) | Customer_name (Table: Customers) | Service_ID (Table: Services) | Service_name (Table: Services) | Policy_ID (Table: Available_Policies) | policy_type_code (Table: Available_Policies) | Customer_Phone (Table: Available_Policies) | Customer_ID (Table: Customers_Policies) | Policy_ID (Table: Customers_Policies) | Date_Opened (Table: Customers_Policies) | Date_Closed (Table: Customers_Policies) | FNOL_ID (Table: First_Notification_of_Loss) | Customer_ID (Table: First_Notification_of_Loss) | Policy_ID (Table: First_Notification_of_Loss) | Service_ID (Table: First_Notification_of_Loss) | Claim_ID (Table: Claims) | FNOL_ID (Table: Claims) | Effective_Date (Table: Claims) | Settlement_ID (Table: Settlements) | Claim_ID (Table: Settlements) | Effective_Date (Table: Settlements) | Settlement_Amount (Table: Settlements)
What are the dates for the documents with both 'GV' type and 'SF' type expenses?,SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF',* (Table: Accounts) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Budget_Type_Code (Table: Ref_Budget_Codes) | Budget_Type_Description (Table: Ref_Budget_Codes) | Project_ID (Table: Projects) | Project_Details (Table: Projects) | Document_ID (Table: Documents) | Document_Type_Code (Table: Documents) | Project_ID (Table: Documents) | Document_Date (Table: Documents) | Document_Name (Table: Documents) | Document_Description (Table: Documents) | Other_Details (Table: Documents) | Statement_ID (Table: Statements) | Statement_Details (Table: Statements) | Document_ID (Table: Documents_with_Expenses) | Budget_Type_Code (Table: Documents_with_Expenses) | Document_Details (Table: Documents_with_Expenses) | Account_ID (Table: Accounts) | Statement_ID (Table: Accounts) | Account_Details (Table: Accounts)
Find the name and id of the top 3 expensive rooms.,"SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",* (Table: Reservations) | RoomId (Table: Rooms) | roomName (Table: Rooms) | beds (Table: Rooms) | bedType (Table: Rooms) | maxOccupancy (Table: Rooms) | basePrice (Table: Rooms) | decor (Table: Rooms) | Code (Table: Reservations) | Room (Table: Reservations) | CheckIn (Table: Reservations) | CheckOut (Table: Reservations) | Rate (Table: Reservations) | LastName (Table: Reservations) | FirstName (Table: Reservations) | Adults (Table: Reservations) | Kids (Table: Reservations)
What is the name of the project with the most hours?,SELECT name FROM projects ORDER BY hours DESC LIMIT 1,* (Table: AssignedTo) | SSN (Table: Scientists) | Name (Table: Scientists) | Code (Table: Projects) | Name (Table: Projects) | Hours (Table: Projects) | Scientist (Table: AssignedTo) | Project (Table: AssignedTo)
Show each author and the number of workshops they submitted to.,"SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author",* (Table: Acceptance) | Workshop_ID (Table: workshop) | Date (Table: workshop) | Venue (Table: workshop) | Name (Table: workshop) | Submission_ID (Table: submission) | Scores (Table: submission) | Author (Table: submission) | College (Table: submission) | Submission_ID (Table: Acceptance) | Workshop_ID (Table: Acceptance) | Result (Table: Acceptance)
"For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.","SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;",* (Table: Documents_Mailed) | document_type_code (Table: Ref_Document_Types) | document_type_description (Table: Ref_Document_Types) | role_code (Table: Roles) | role_description (Table: Roles) | address_id (Table: Addresses) | address_details (Table: Addresses) | document_status_code (Table: Ref_Document_Status) | document_status_description (Table: Ref_Document_Status) | shipping_agent_code (Table: Ref_Shipping_Agents) | shipping_agent_name (Table: Ref_Shipping_Agents) | shipping_agent_description (Table: Ref_Shipping_Agents) | document_id (Table: Documents) | document_status_code (Table: Documents) | document_type_code (Table: Documents) | shipping_agent_code (Table: Documents) | receipt_date (Table: Documents) | receipt_number (Table: Documents) | other_details (Table: Documents) | employee_id (Table: Employees) | role_code (Table: Employees) | employee_name (Table: Employees) | other_details (Table: Employees) | document_id (Table: Document_Drafts) | draft_number (Table: Document_Drafts) | draft_details (Table: Document_Drafts) | document_id (Table: Draft_Copies) | draft_number (Table: Draft_Copies) | copy_number (Table: Draft_Copies) | document_id (Table: Circulation_History) | draft_number (Table: Circulation_History) | copy_number (Table: Circulation_History) | employee_id (Table: Circulation_History) | document_id (Table: Documents_Mailed) | mailed_to_address_id (Table: Documents_Mailed) | mailing_date (Table: Documents_Mailed)
What is the code of the city with the most students?,SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1,* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
How many documents were shipped by USPS?,"SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = ""USPS"";",* (Table: Documents_Mailed) | document_type_code (Table: Ref_Document_Types) | document_type_description (Table: Ref_Document_Types) | role_code (Table: Roles) | role_description (Table: Roles) | address_id (Table: Addresses) | address_details (Table: Addresses) | document_status_code (Table: Ref_Document_Status) | document_status_description (Table: Ref_Document_Status) | shipping_agent_code (Table: Ref_Shipping_Agents) | shipping_agent_name (Table: Ref_Shipping_Agents) | shipping_agent_description (Table: Ref_Shipping_Agents) | document_id (Table: Documents) | document_status_code (Table: Documents) | document_type_code (Table: Documents) | shipping_agent_code (Table: Documents) | receipt_date (Table: Documents) | receipt_number (Table: Documents) | other_details (Table: Documents) | employee_id (Table: Employees) | role_code (Table: Employees) | employee_name (Table: Employees) | other_details (Table: Employees) | document_id (Table: Document_Drafts) | draft_number (Table: Document_Drafts) | draft_details (Table: Document_Drafts) | document_id (Table: Draft_Copies) | draft_number (Table: Draft_Copies) | copy_number (Table: Draft_Copies) | document_id (Table: Circulation_History) | draft_number (Table: Circulation_History) | copy_number (Table: Circulation_History) | employee_id (Table: Circulation_History) | document_id (Table: Documents_Mailed) | mailed_to_address_id (Table: Documents_Mailed) | mailing_date (Table: Documents_Mailed)
Find the names of the regions which were affected by the storm that killed the greatest number of people.,SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1,* (Table: affected_region) | Storm_ID (Table: storm) | Name (Table: storm) | Dates_active (Table: storm) | Max_speed (Table: storm) | Damage_millions_USD (Table: storm) | Number_Deaths (Table: storm) | Region_id (Table: region) | Region_code (Table: region) | Region_name (Table: region) | Region_id (Table: affected_region) | Storm_ID (Table: affected_region) | Number_city_affected (Table: affected_region)
"What are the names of the customers who bought product ""food"" at least once?","SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = ""food"" GROUP BY T1.customer_id HAVING count(*)  >=  1",* (Table: Shipment_Items) | customer_id (Table: Customers) | customer_name (Table: Customers) | customer_details (Table: Customers) | invoice_number (Table: Invoices) | invoice_date (Table: Invoices) | invoice_details (Table: Invoices) | order_id (Table: Orders) | customer_id (Table: Orders) | order_status (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | product_id (Table: Products) | product_name (Table: Products) | product_details (Table: Products) | order_item_id (Table: Order_Items) | product_id (Table: Order_Items) | order_id (Table: Order_Items) | order_item_status (Table: Order_Items) | order_item_details (Table: Order_Items) | shipment_id (Table: Shipments) | order_id (Table: Shipments) | invoice_number (Table: Shipments) | shipment_tracking_number (Table: Shipments) | shipment_date (Table: Shipments) | other_shipment_details (Table: Shipments) | shipment_id (Table: Shipment_Items) | order_item_id (Table: Shipment_Items)
Show me the owner of the channel with the highest rating.,SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1,* (Table: broadcast_share) | Program_ID (Table: program) | Name (Table: program) | Origin (Table: program) | Launch (Table: program) | Owner (Table: program) | Channel_ID (Table: channel) | Name (Table: channel) | Owner (Table: channel) | Share_in_percent (Table: channel) | Rating_in_percent (Table: channel) | Channel_ID (Table: broadcast) | Program_ID (Table: broadcast) | Time_of_day (Table: broadcast) | Channel_ID (Table: broadcast_share) | Program_ID (Table: broadcast_share) | Date (Table: broadcast_share) | Share_in_percent (Table: broadcast_share)
What is the average number of pages per minute color?,SELECT avg(pages_per_minute_color) FROM product,* (Table: store_district) | product_id (Table: product) | product (Table: product) | dimensions (Table: product) | dpi (Table: product) | pages_per_minute_color (Table: product) | max_page_size (Table: product) | interface (Table: product) | Store_ID (Table: store) | Store_Name (Table: store) | Type (Table: store) | Area_size (Table: store) | Number_of_product_category (Table: store) | Ranking (Table: store) | District_ID (Table: district) | District_name (Table: district) | Headquartered_City (Table: district) | City_Population (Table: district) | City_Area (Table: district) | Store_ID (Table: store_product) | Product_ID (Table: store_product) | Store_ID (Table: store_district) | District_ID (Table: store_district)
Count the number of farms.,SELECT count(*) FROM farm,* (Table: competition_record) | City_ID (Table: city) | Official_Name (Table: city) | Status (Table: city) | Area_km_2 (Table: city) | Population (Table: city) | Census_Ranking (Table: city) | Farm_ID (Table: farm) | Year (Table: farm) | Total_Horses (Table: farm) | Working_Horses (Table: farm) | Total_Cattle (Table: farm) | Oxen (Table: farm) | Bulls (Table: farm) | Cows (Table: farm) | Pigs (Table: farm) | Sheep_and_Goats (Table: farm) | Competition_ID (Table: farm_competition) | Year (Table: farm_competition) | Theme (Table: farm_competition) | Host_city_ID (Table: farm_competition) | Hosts (Table: farm_competition) | Competition_ID (Table: competition_record) | Farm_ID (Table: competition_record) | Rank (Table: competition_record)
What are the names of the courses in alphabetical order?,SELECT course_name FROM courses ORDER BY course_name,* (Table: Candidate_Assessments) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | person_id (Table: People) | first_name (Table: People) | middle_name (Table: People) | last_name (Table: People) | cell_mobile_number (Table: People) | email_address (Table: People) | login_name (Table: People) | password (Table: People) | student_id (Table: Students) | student_details (Table: Students) | course_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | other_details (Table: Courses) | person_address_id (Table: People_Addresses) | person_id (Table: People_Addresses) | address_id (Table: People_Addresses) | date_from (Table: People_Addresses) | date_to (Table: People_Addresses) | student_id (Table: Student_Course_Registrations) | course_id (Table: Student_Course_Registrations) | registration_date (Table: Student_Course_Registrations) | student_id (Table: Student_Course_Attendance) | course_id (Table: Student_Course_Attendance) | date_of_attendance (Table: Student_Course_Attendance) | candidate_id (Table: Candidates) | candidate_details (Table: Candidates) | candidate_id (Table: Candidate_Assessments) | qualification (Table: Candidate_Assessments) | assessment_date (Table: Candidate_Assessments) | asessment_outcome_code (Table: Candidate_Assessments)
List all names of courses with 1 credit?,SELECT CName FROM COURSE WHERE Credits  =  1,* (Table: Gradeconversion) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty) | DNO (Table: Department) | Division (Table: Department) | DName (Table: Department) | Room (Table: Department) | Building (Table: Department) | DPhone (Table: Department) | FacID (Table: Member_of) | DNO (Table: Member_of) | Appt_Type (Table: Member_of) | CID (Table: Course) | CName (Table: Course) | Credits (Table: Course) | Instructor (Table: Course) | Days (Table: Course) | Hours (Table: Course) | DNO (Table: Course) | StuID (Table: Minor_in) | DNO (Table: Minor_in) | StuID (Table: Enrolled_in) | CID (Table: Enrolled_in) | Grade (Table: Enrolled_in) | lettergrade (Table: Gradeconversion) | gradepoint (Table: Gradeconversion)
"For each team, how many technicians are there?","SELECT Team ,  COUNT(*) FROM technician GROUP BY Team",* (Table: repair_assignment) | repair_ID (Table: repair) | name (Table: repair) | Launch_Date (Table: repair) | Notes (Table: repair) | Machine_ID (Table: machine) | Making_Year (Table: machine) | Class (Table: machine) | Team (Table: machine) | Machine_series (Table: machine) | value_points (Table: machine) | quality_rank (Table: machine) | technician_id (Table: technician) | Name (Table: technician) | Team (Table: technician) | Starting_Year (Table: technician) | Age (Table: technician) | technician_id (Table: repair_assignment) | repair_ID (Table: repair_assignment) | Machine_ID (Table: repair_assignment)
List the name of the company that produced more than one phone model.,SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;,* (Table: phone) | Model_name (Table: chip_model) | Launch_year (Table: chip_model) | RAM_MiB (Table: chip_model) | ROM_MiB (Table: chip_model) | Slots (Table: chip_model) | WiFi (Table: chip_model) | Bluetooth (Table: chip_model) | Graphics_mode (Table: screen_mode) | Char_cells (Table: screen_mode) | Pixels (Table: screen_mode) | Hardware_colours (Table: screen_mode) | used_kb (Table: screen_mode) | map (Table: screen_mode) | Type (Table: screen_mode) | Company_name (Table: phone) | Hardware_Model_name (Table: phone) | Accreditation_type (Table: phone) | Accreditation_level (Table: phone) | Date (Table: phone) | chip_model (Table: phone) | screen_mode (Table: phone)
"For each zip code, find the ids of all trips that have a higher average mean temperature above 60?",SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60,* (Table: weather) | id (Table: station) | name (Table: station) | lat (Table: station) | long (Table: station) | dock_count (Table: station) | city (Table: station) | installation_date (Table: station) | station_id (Table: status) | bikes_available (Table: status) | docks_available (Table: status) | time (Table: status) | id (Table: trip) | duration (Table: trip) | start_date (Table: trip) | start_station_name (Table: trip) | start_station_id (Table: trip) | end_date (Table: trip) | end_station_name (Table: trip) | end_station_id (Table: trip) | bike_id (Table: trip) | subscription_type (Table: trip) | zip_code (Table: trip) | date (Table: weather) | max_temperature_f (Table: weather) | mean_temperature_f (Table: weather) | min_temperature_f (Table: weather) | max_dew_point_f (Table: weather) | mean_dew_point_f (Table: weather) | min_dew_point_f (Table: weather) | max_humidity (Table: weather) | mean_humidity (Table: weather) | min_humidity (Table: weather) | max_sea_level_pressure_inches (Table: weather) | mean_sea_level_pressure_inches (Table: weather) | min_sea_level_pressure_inches (Table: weather) | max_visibility_miles (Table: weather) | mean_visibility_miles (Table: weather) | min_visibility_miles (Table: weather) | max_wind_Speed_mph (Table: weather) | mean_wind_speed_mph (Table: weather) | max_gust_speed_mph (Table: weather) | precipitation_inches (Table: weather) | cloud_cover (Table: weather) | events (Table: weather) | wind_dir_degrees (Table: weather) | zip_code (Table: weather)
Show the most common nationality of hosts.,SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1,* (Table: party_host) | Party_ID (Table: party) | Party_Theme (Table: party) | Location (Table: party) | First_year (Table: party) | Last_year (Table: party) | Number_of_hosts (Table: party) | Host_ID (Table: host) | Name (Table: host) | Nationality (Table: host) | Age (Table: host) | Party_ID (Table: party_host) | Host_ID (Table: party_host) | Is_Main_in_Charge (Table: party_host)
What are the names of the directors who made exactly one movie?,SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1,* (Table: Rating) | mID (Table: Movie) | title (Table: Movie) | year (Table: Movie) | director (Table: Movie) | rID (Table: Reviewer) | name (Table: Reviewer) | rID (Table: Rating) | mID (Table: Rating) | stars (Table: Rating) | ratingDate (Table: Rating)
What are the names of the 3 departments with the most courses?,SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3,* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
"Show the average, minimum, and maximum age for different majors.","SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major",* (Table: SportsInfo) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | GameID (Table: Video_Games) | GName (Table: Video_Games) | GType (Table: Video_Games) | StuID (Table: Plays_Games) | GameID (Table: Plays_Games) | Hours_Played (Table: Plays_Games) | StuID (Table: SportsInfo) | SportName (Table: SportsInfo) | HoursPerWeek (Table: SportsInfo) | GamesPlayed (Table: SportsInfo) | OnScholarship (Table: SportsInfo)
What is the level name of the cheapest catalog (in USD)?,SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1,* (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Attribute_Definitions) | attribute_name (Table: Attribute_Definitions) | attribute_data_type (Table: Attribute_Definitions) | catalog_id (Table: Catalogs) | catalog_name (Table: Catalogs) | catalog_publisher (Table: Catalogs) | date_of_publication (Table: Catalogs) | date_of_latest_revision (Table: Catalogs) | catalog_level_number (Table: Catalog_Structure) | catalog_id (Table: Catalog_Structure) | catalog_level_name (Table: Catalog_Structure) | catalog_entry_id (Table: Catalog_Contents) | catalog_level_number (Table: Catalog_Contents) | parent_entry_id (Table: Catalog_Contents) | previous_entry_id (Table: Catalog_Contents) | next_entry_id (Table: Catalog_Contents) | catalog_entry_name (Table: Catalog_Contents) | product_stock_number (Table: Catalog_Contents) | price_in_dollars (Table: Catalog_Contents) | price_in_euros (Table: Catalog_Contents) | price_in_pounds (Table: Catalog_Contents) | capacity (Table: Catalog_Contents) | length (Table: Catalog_Contents) | height (Table: Catalog_Contents) | width (Table: Catalog_Contents) | catalog_entry_id (Table: Catalog_Contents_Additional_Attributes) | catalog_level_number (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Catalog_Contents_Additional_Attributes) | attribute_value (Table: Catalog_Contents_Additional_Attributes)
Show all the distinct institution types.,SELECT DISTINCT TYPE FROM institution,* (Table: protein) | building_id (Table: building) | Name (Table: building) | Street_address (Table: building) | Years_as_tallest (Table: building) | Height_feet (Table: building) | Floors (Table: building) | Institution_id (Table: Institution) | Institution (Table: Institution) | Location (Table: Institution) | Founded (Table: Institution) | Type (Table: Institution) | Enrollment (Table: Institution) | Team (Table: Institution) | Primary_Conference (Table: Institution) | building_id (Table: Institution) | common_name (Table: protein) | protein_name (Table: protein) | divergence_from_human_lineage (Table: protein) | accession_number (Table: protein) | sequence_length (Table: protein) | sequence_identity_to_human_protein (Table: protein) | Institution_id (Table: protein)
What are the themes of parties ordered by the number of hosts in ascending manner?,SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC,* (Table: party_host) | Party_ID (Table: party) | Party_Theme (Table: party) | Location (Table: party) | First_year (Table: party) | Last_year (Table: party) | Number_of_hosts (Table: party) | Host_ID (Table: host) | Name (Table: host) | Nationality (Table: host) | Age (Table: host) | Party_ID (Table: party_host) | Host_ID (Table: party_host) | Is_Main_in_Charge (Table: party_host)
What are the title and director of each film?,"SELECT title ,  directed_by FROM film",* (Table: schedule) | Film_ID (Table: film) | Rank_in_series (Table: film) | Number_in_season (Table: film) | Title (Table: film) | Directed_by (Table: film) | Original_air_date (Table: film) | Production_code (Table: film) | Cinema_ID (Table: cinema) | Name (Table: cinema) | Openning_year (Table: cinema) | Capacity (Table: cinema) | Location (Table: cinema) | Cinema_ID (Table: schedule) | Film_ID (Table: schedule) | Date (Table: schedule) | Show_times_per_day (Table: schedule) | Price (Table: schedule)
What are the names and arrival times of trains?,"SELECT Name ,  Arrival FROM train",* (Table: railway_manage) | Railway_ID (Table: railway) | Railway (Table: railway) | Builder (Table: railway) | Built (Table: railway) | Wheels (Table: railway) | Location (Table: railway) | ObjectNumber (Table: railway) | Train_ID (Table: train) | Train_Num (Table: train) | Name (Table: train) | From (Table: train) | Arrival (Table: train) | Railway_ID (Table: train) | Manager_ID (Table: manager) | Name (Table: manager) | Country (Table: manager) | Working_year_starts (Table: manager) | Age (Table: manager) | Level (Table: manager) | Railway_ID (Table: railway_manage) | Manager_ID (Table: railway_manage) | From_Year (Table: railway_manage)
What are the average and minimum price (in Euro) of all products?,"SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",* (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Attribute_Definitions) | attribute_name (Table: Attribute_Definitions) | attribute_data_type (Table: Attribute_Definitions) | catalog_id (Table: Catalogs) | catalog_name (Table: Catalogs) | catalog_publisher (Table: Catalogs) | date_of_publication (Table: Catalogs) | date_of_latest_revision (Table: Catalogs) | catalog_level_number (Table: Catalog_Structure) | catalog_id (Table: Catalog_Structure) | catalog_level_name (Table: Catalog_Structure) | catalog_entry_id (Table: Catalog_Contents) | catalog_level_number (Table: Catalog_Contents) | parent_entry_id (Table: Catalog_Contents) | previous_entry_id (Table: Catalog_Contents) | next_entry_id (Table: Catalog_Contents) | catalog_entry_name (Table: Catalog_Contents) | product_stock_number (Table: Catalog_Contents) | price_in_dollars (Table: Catalog_Contents) | price_in_euros (Table: Catalog_Contents) | price_in_pounds (Table: Catalog_Contents) | capacity (Table: Catalog_Contents) | length (Table: Catalog_Contents) | height (Table: Catalog_Contents) | width (Table: Catalog_Contents) | catalog_entry_id (Table: Catalog_Contents_Additional_Attributes) | catalog_level_number (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Catalog_Contents_Additional_Attributes) | attribute_value (Table: Catalog_Contents_Additional_Attributes)
What is all the information about the basketball match?,SELECT * FROM basketball_match,* (Table: university) | Team_ID (Table: basketball_match) | School_ID (Table: basketball_match) | Team_Name (Table: basketball_match) | ACC_Regular_Season (Table: basketball_match) | ACC_Percent (Table: basketball_match) | ACC_Home (Table: basketball_match) | ACC_Road (Table: basketball_match) | All_Games (Table: basketball_match) | All_Games_Percent (Table: basketball_match) | All_Home (Table: basketball_match) | All_Road (Table: basketball_match) | All_Neutral (Table: basketball_match) | School_ID (Table: university) | School (Table: university) | Location (Table: university) | Founded (Table: university) | Affiliation (Table: university) | Enrollment (Table: university) | Nickname (Table: university) | Primary_conference (Table: university)
Find the first and last names of people who payed more than the rooms' base prices.,"SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",* (Table: Reservations) | RoomId (Table: Rooms) | roomName (Table: Rooms) | beds (Table: Rooms) | bedType (Table: Rooms) | maxOccupancy (Table: Rooms) | basePrice (Table: Rooms) | decor (Table: Rooms) | Code (Table: Reservations) | Room (Table: Reservations) | CheckIn (Table: Reservations) | CheckOut (Table: Reservations) | Rate (Table: Reservations) | LastName (Table: Reservations) | FirstName (Table: Reservations) | Adults (Table: Reservations) | Kids (Table: Reservations)
How many document types are there?,SELECT count(*) FROM Ref_document_types,* (Table: Documents_to_be_Destroyed) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Calendar_Date (Table: Ref_Calendar) | Day_Number (Table: Ref_Calendar) | Location_Code (Table: Ref_Locations) | Location_Name (Table: Ref_Locations) | Location_Description (Table: Ref_Locations) | Role_Code (Table: Roles) | Role_Name (Table: Roles) | Role_Description (Table: Roles) | Document_ID (Table: All_Documents) | Date_Stored (Table: All_Documents) | Document_Type_Code (Table: All_Documents) | Document_Name (Table: All_Documents) | Document_Description (Table: All_Documents) | Other_Details (Table: All_Documents) | Employee_ID (Table: Employees) | Role_Code (Table: Employees) | Employee_Name (Table: Employees) | Gender_MFU (Table: Employees) | Date_of_Birth (Table: Employees) | Other_Details (Table: Employees) | Document_ID (Table: Document_Locations) | Location_Code (Table: Document_Locations) | Date_in_Location_From (Table: Document_Locations) | Date_in_Locaton_To (Table: Document_Locations) | Document_ID (Table: Documents_to_be_Destroyed) | Destruction_Authorised_by_Employee_ID (Table: Documents_to_be_Destroyed) | Destroyed_by_Employee_ID (Table: Documents_to_be_Destroyed) | Planned_Destruction_Date (Table: Documents_to_be_Destroyed) | Actual_Destruction_Date (Table: Documents_to_be_Destroyed) | Other_Details (Table: Documents_to_be_Destroyed)
What are the details for the projects which were launched by the organization with the most projects?,SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 ),* (Table: Tasks) | document_type_code (Table: Document_Types) | document_description (Table: Document_Types) | document_id (Table: Documents) | document_type_code (Table: Documents) | grant_id (Table: Documents) | sent_date (Table: Documents) | response_received_date (Table: Documents) | other_details (Table: Documents) | grant_id (Table: Grants) | organisation_id (Table: Grants) | grant_amount (Table: Grants) | grant_start_date (Table: Grants) | grant_end_date (Table: Grants) | other_details (Table: Grants) | organisation_type (Table: Organisation_Types) | organisation_type_description (Table: Organisation_Types) | organisation_id (Table: Organisations) | organisation_type (Table: Organisations) | organisation_details (Table: Organisations) | project_id (Table: Project_Outcomes) | outcome_code (Table: Project_Outcomes) | outcome_details (Table: Project_Outcomes) | staff_id (Table: Project_Staff) | project_id (Table: Project_Staff) | role_code (Table: Project_Staff) | date_from (Table: Project_Staff) | date_to (Table: Project_Staff) | other_details (Table: Project_Staff) | project_id (Table: Projects) | organisation_id (Table: Projects) | project_details (Table: Projects) | outcome_code (Table: Research_Outcomes) | outcome_description (Table: Research_Outcomes) | staff_id (Table: Research_Staff) | employer_organisation_id (Table: Research_Staff) | staff_details (Table: Research_Staff) | role_code (Table: Staff_Roles) | role_description (Table: Staff_Roles) | task_id (Table: Tasks) | project_id (Table: Tasks) | task_details (Table: Tasks) | eg Agree Objectives (Table: Tasks)
Find the number of distinct students enrolled in courses.,SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment,* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
Show the name of storms which don't have affected region in record.,SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region),* (Table: affected_region) | Storm_ID (Table: storm) | Name (Table: storm) | Dates_active (Table: storm) | Max_speed (Table: storm) | Damage_millions_USD (Table: storm) | Number_Deaths (Table: storm) | Region_id (Table: region) | Region_code (Table: region) | Region_name (Table: region) | Region_id (Table: affected_region) | Storm_ID (Table: affected_region) | Number_city_affected (Table: affected_region)
Find the number of patients' prescriptions physician John Dorian made.,"SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = ""John Dorian""",* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
Which customer have the most policies? Give me the customer details.,SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1,* (Table: Claims_Processing) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Staff_ID (Table: Staff) | Staff_Details (Table: Staff) | Policy_ID (Table: Policies) | Customer_ID (Table: Policies) | Policy_Type_Code (Table: Policies) | Start_Date (Table: Policies) | End_Date (Table: Policies) | Claim_Header_ID (Table: Claim_Headers) | Claim_Status_Code (Table: Claim_Headers) | Claim_Type_Code (Table: Claim_Headers) | Policy_ID (Table: Claim_Headers) | Date_of_Claim (Table: Claim_Headers) | Date_of_Settlement (Table: Claim_Headers) | Amount_Claimed (Table: Claim_Headers) | Amount_Piad (Table: Claim_Headers) | Claim_ID (Table: Claims_Documents) | Document_Type_Code (Table: Claims_Documents) | Created_by_Staff_ID (Table: Claims_Documents) | Created_Date (Table: Claims_Documents) | Claim_Stage_ID (Table: Claims_Processing_Stages) | Next_Claim_Stage_ID (Table: Claims_Processing_Stages) | Claim_Status_Name (Table: Claims_Processing_Stages) | Claim_Status_Description (Table: Claims_Processing_Stages) | Claim_Processing_ID (Table: Claims_Processing) | Claim_ID (Table: Claims_Processing) | Claim_Outcome_Code (Table: Claims_Processing) | Claim_Stage_ID (Table: Claims_Processing) | Staff_ID (Table: Claims_Processing)
Show all allergies with type food.,"SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  ""food""",* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
What is the total number of all football games played by scholarship students?,"SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  ""Football"" AND onscholarship  =  'Y'",* (Table: SportsInfo) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | GameID (Table: Video_Games) | GName (Table: Video_Games) | GType (Table: Video_Games) | StuID (Table: Plays_Games) | GameID (Table: Plays_Games) | Hours_Played (Table: Plays_Games) | StuID (Table: SportsInfo) | SportName (Table: SportsInfo) | HoursPerWeek (Table: SportsInfo) | GamesPlayed (Table: SportsInfo) | OnScholarship (Table: SportsInfo)
Which schools have more than 1 player? Give me the school locations.,SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1,* (Table: player) | School_ID (Table: school) | School (Table: school) | Location (Table: school) | Enrollment (Table: school) | Founded (Table: school) | Denomination (Table: school) | Boys_or_Girls (Table: school) | Day_or_Boarding (Table: school) | Year_Entered_Competition (Table: school) | School_Colors (Table: school) | School_ID (Table: school_details) | Nickname (Table: school_details) | Colors (Table: school_details) | League (Table: school_details) | Class (Table: school_details) | Division (Table: school_details) | School_Id (Table: school_performance) | School_Year (Table: school_performance) | Class_A (Table: school_performance) | Class_AA (Table: school_performance) | Player_ID (Table: player) | Player (Table: player) | Team (Table: player) | Age (Table: player) | Position (Table: player) | School_ID (Table: player)
List the carriers of devices in ascending alphabetical order.,SELECT Carrier FROM device ORDER BY Carrier ASC,* (Table: stock) | Device_ID (Table: device) | Device (Table: device) | Carrier (Table: device) | Package_Version (Table: device) | Applications (Table: device) | Software_Platform (Table: device) | Shop_ID (Table: shop) | Shop_Name (Table: shop) | Location (Table: shop) | Open_Date (Table: shop) | Open_Year (Table: shop) | Shop_ID (Table: stock) | Device_ID (Table: stock) | Quantity (Table: stock)
What are the student ids for all male students?,SELECT StuID FROM Student WHERE Sex  =  'M',* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
"For every student who is registered for some course, how many courses are they registered for?","SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",* (Table: Candidate_Assessments) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | person_id (Table: People) | first_name (Table: People) | middle_name (Table: People) | last_name (Table: People) | cell_mobile_number (Table: People) | email_address (Table: People) | login_name (Table: People) | password (Table: People) | student_id (Table: Students) | student_details (Table: Students) | course_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | other_details (Table: Courses) | person_address_id (Table: People_Addresses) | person_id (Table: People_Addresses) | address_id (Table: People_Addresses) | date_from (Table: People_Addresses) | date_to (Table: People_Addresses) | student_id (Table: Student_Course_Registrations) | course_id (Table: Student_Course_Registrations) | registration_date (Table: Student_Course_Registrations) | student_id (Table: Student_Course_Attendance) | course_id (Table: Student_Course_Attendance) | date_of_attendance (Table: Student_Course_Attendance) | candidate_id (Table: Candidates) | candidate_details (Table: Candidates) | candidate_id (Table: Candidate_Assessments) | qualification (Table: Candidate_Assessments) | assessment_date (Table: Candidate_Assessments) | asessment_outcome_code (Table: Candidate_Assessments)
Show the names of all the donors except those whose donation amount less than 9.,SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9,* (Table: endowment) | School_id (Table: School) | School_name (Table: School) | Location (Table: School) | Mascot (Table: School) | Enrollment (Table: School) | IHSAA_Class (Table: School) | IHSAA_Football_Class (Table: School) | County (Table: School) | School_id (Table: budget) | Year (Table: budget) | Budgeted (Table: budget) | total_budget_percent_budgeted (Table: budget) | Invested (Table: budget) | total_budget_percent_invested (Table: budget) | Budget_invested_percent (Table: budget) | endowment_id (Table: endowment) | School_id (Table: endowment) | donator_name (Table: endowment) | amount (Table: endowment)
"What is the list of program names, sorted by the order of launch date?",SELECT name FROM program ORDER BY launch,* (Table: broadcast_share) | Program_ID (Table: program) | Name (Table: program) | Origin (Table: program) | Launch (Table: program) | Owner (Table: program) | Channel_ID (Table: channel) | Name (Table: channel) | Owner (Table: channel) | Share_in_percent (Table: channel) | Rating_in_percent (Table: channel) | Channel_ID (Table: broadcast) | Program_ID (Table: broadcast) | Time_of_day (Table: broadcast) | Channel_ID (Table: broadcast_share) | Program_ID (Table: broadcast_share) | Date (Table: broadcast_share) | Share_in_percent (Table: broadcast_share)
Find the physicians who are trained in a procedure that costs more than 5000.,SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000,* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
Show the title and director for all films.,"SELECT title ,  directed_by FROM film",* (Table: schedule) | Film_ID (Table: film) | Rank_in_series (Table: film) | Number_in_season (Table: film) | Title (Table: film) | Directed_by (Table: film) | Original_air_date (Table: film) | Production_code (Table: film) | Cinema_ID (Table: cinema) | Name (Table: cinema) | Openning_year (Table: cinema) | Capacity (Table: cinema) | Location (Table: cinema) | Cinema_ID (Table: schedule) | Film_ID (Table: schedule) | Date (Table: schedule) | Show_times_per_day (Table: schedule) | Price (Table: schedule)
Find the first and last name of students who are living in the dorms that have amenity TV Lounge.,"SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
Find the total claimed amount of all the claims.,SELECT sum(Amount_Claimed) FROM Claims,* (Table: Payments) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Policy_ID (Table: Customer_Policies) | Customer_ID (Table: Customer_Policies) | Policy_Type_Code (Table: Customer_Policies) | Start_Date (Table: Customer_Policies) | End_Date (Table: Customer_Policies) | Claim_ID (Table: Claims) | Policy_ID (Table: Claims) | Date_Claim_Made (Table: Claims) | Date_Claim_Settled (Table: Claims) | Amount_Claimed (Table: Claims) | Amount_Settled (Table: Claims) | Settlement_ID (Table: Settlements) | Claim_ID (Table: Settlements) | Date_Claim_Made (Table: Settlements) | Date_Claim_Settled (Table: Settlements) | Amount_Claimed (Table: Settlements) | Amount_Settled (Table: Settlements) | Customer_Policy_ID (Table: Settlements) | Payment_ID (Table: Payments) | Settlement_ID (Table: Payments) | Payment_Method_Code (Table: Payments) | Date_Payment_Made (Table: Payments) | Amount_Payment (Table: Payments)
HOw many engineers are older than 30?,SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer',* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
Please show the titles of films and the types of market estimations.,"SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID",* (Table: film_market_estimation) | Film_ID (Table: film) | Title (Table: film) | Studio (Table: film) | Director (Table: film) | Gross_in_dollar (Table: film) | Market_ID (Table: market) | Country (Table: market) | Number_cities (Table: market) | Estimation_ID (Table: film_market_estimation) | Low_Estimate (Table: film_market_estimation) | High_Estimate (Table: film_market_estimation) | Film_ID (Table: film_market_estimation) | Type (Table: film_market_estimation) | Market_ID (Table: film_market_estimation) | Year (Table: film_market_estimation)
How many products are not made by Sony?,SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'),* (Table: Products) | Code (Table: Manufacturers) | Name (Table: Manufacturers) | Headquarter (Table: Manufacturers) | Founder (Table: Manufacturers) | Revenue (Table: Manufacturers) | Code (Table: Products) | Name (Table: Products) | Price (Table: Products) | Manufacturer (Table: Products)
"Which authors with submissions are from college ""Florida"" or ""Temple""?","SELECT Author FROM submission WHERE College  =  ""Florida"" OR College  =  ""Temple""",* (Table: Acceptance) | Workshop_ID (Table: workshop) | Date (Table: workshop) | Venue (Table: workshop) | Name (Table: workshop) | Submission_ID (Table: submission) | Scores (Table: submission) | Author (Table: submission) | College (Table: submission) | Submission_ID (Table: Acceptance) | Workshop_ID (Table: Acceptance) | Result (Table: Acceptance)
Who are the players from Indonesia?,"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  ""Indonesia""",* (Table: player) | Country_id (Table: country) | Country_name (Table: country) | Capital (Table: country) | Official_native_language (Table: country) | Team_id (Table: team) | Name (Table: team) | Season (Table: match_season) | Player (Table: match_season) | Position (Table: match_season) | Country (Table: match_season) | Team (Table: match_season) | Draft_Pick_Number (Table: match_season) | Draft_Class (Table: match_season) | College (Table: match_season) | Player_ID (Table: player) | Player (Table: player) | Years_Played (Table: player) | Total_WL (Table: player) | Singles_WL (Table: player) | Doubles_WL (Table: player) | Team (Table: player)
Show the detail of vehicle with id 1.,SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;,* (Table: Lessons) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | staff_id (Table: Staff) | staff_address_id (Table: Staff) | nickname (Table: Staff) | first_name (Table: Staff) | middle_name (Table: Staff) | last_name (Table: Staff) | date_of_birth (Table: Staff) | date_joined_staff (Table: Staff) | date_left_staff (Table: Staff) | vehicle_id (Table: Vehicles) | vehicle_details (Table: Vehicles) | customer_id (Table: Customers) | customer_address_id (Table: Customers) | customer_status_code (Table: Customers) | date_became_customer (Table: Customers) | date_of_birth (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | amount_outstanding (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | cell_mobile_phone_number (Table: Customers) | customer_id (Table: Customer_Payments) | datetime_payment (Table: Customer_Payments) | payment_method_code (Table: Customer_Payments) | amount_payment (Table: Customer_Payments) | lesson_id (Table: Lessons) | customer_id (Table: Lessons) | lesson_status_code (Table: Lessons) | staff_id (Table: Lessons) | vehicle_id (Table: Lessons) | lesson_date (Table: Lessons) | lesson_time (Table: Lessons) | price (Table: Lessons)
Which headquarter locations are used by more than 2 companies?,SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2,* (Table: Office_locations) | id (Table: buildings) | name (Table: buildings) | City (Table: buildings) | Height (Table: buildings) | Stories (Table: buildings) | Status (Table: buildings) | id (Table: Companies) | name (Table: Companies) | Headquarters (Table: Companies) | Industry (Table: Companies) | Sales_billion (Table: Companies) | Profits_billion (Table: Companies) | Assets_billion (Table: Companies) | Market_Value_billion (Table: Companies) | building_id (Table: Office_locations) | company_id (Table: Office_locations) | move_in_year (Table: Office_locations)
Return the name and job title of the staff with the latest date assigned.,"SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1",* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
Show all statement id and the number of accounts for each statement.,"SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID",* (Table: Accounts) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Budget_Type_Code (Table: Ref_Budget_Codes) | Budget_Type_Description (Table: Ref_Budget_Codes) | Project_ID (Table: Projects) | Project_Details (Table: Projects) | Document_ID (Table: Documents) | Document_Type_Code (Table: Documents) | Project_ID (Table: Documents) | Document_Date (Table: Documents) | Document_Name (Table: Documents) | Document_Description (Table: Documents) | Other_Details (Table: Documents) | Statement_ID (Table: Statements) | Statement_Details (Table: Statements) | Document_ID (Table: Documents_with_Expenses) | Budget_Type_Code (Table: Documents_with_Expenses) | Document_Details (Table: Documents_with_Expenses) | Account_ID (Table: Accounts) | Statement_ID (Table: Accounts) | Account_Details (Table: Accounts)
"For each branch id, what are the names of the branches that were registered after 2015?","SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",* (Table: purchase) | Member_ID (Table: member) | Card_Number (Table: member) | Name (Table: member) | Hometown (Table: member) | Level (Table: member) | Branch_ID (Table: branch) | Name (Table: branch) | Open_year (Table: branch) | Address_road (Table: branch) | City (Table: branch) | membership_amount (Table: branch) | Member_ID (Table: membership_register_branch) | Branch_ID (Table: membership_register_branch) | Register_Year (Table: membership_register_branch) | Member_ID (Table: purchase) | Branch_ID (Table: purchase) | Year (Table: purchase) | Total_pounds (Table: purchase)
Find the component amounts and names of all furnitures that have more than 10 components.,"SELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10",* (Table: furniture_manufacte) | Manufacturer_ID (Table: manufacturer) | Open_Year (Table: manufacturer) | Name (Table: manufacturer) | Num_of_Factories (Table: manufacturer) | Num_of_Shops (Table: manufacturer) | Furniture_ID (Table: furniture) | Name (Table: furniture) | Num_of_Component (Table: furniture) | Market_Rate (Table: furniture) | Manufacturer_ID (Table: furniture_manufacte) | Furniture_ID (Table: furniture_manufacte) | Price_in_Dollar (Table: furniture_manufacte)
"What is the average number of points for players from the ""AIB"" club?","SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  ""AIB""",* (Table: competition_result) | Club_ID (Table: club) | name (Table: club) | Region (Table: club) | Start_year (Table: club) | Rank (Table: club_rank) | Club_ID (Table: club_rank) | Gold (Table: club_rank) | Silver (Table: club_rank) | Bronze (Table: club_rank) | Total (Table: club_rank) | Player_ID (Table: player) | name (Table: player) | Position (Table: player) | Club_ID (Table: player) | Apps (Table: player) | Tries (Table: player) | Goals (Table: player) | Points (Table: player) | Competition_ID (Table: competition) | Year (Table: competition) | Competition_type (Table: competition) | Country (Table: competition) | Competition_ID (Table: competition_result) | Club_ID_1 (Table: competition_result) | Club_ID_2 (Table: competition_result) | Score (Table: competition_result)
List the count and id of each product in all the orders.,"SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",* (Table: Shipment_Items) | customer_id (Table: Customers) | customer_name (Table: Customers) | customer_details (Table: Customers) | invoice_number (Table: Invoices) | invoice_date (Table: Invoices) | invoice_details (Table: Invoices) | order_id (Table: Orders) | customer_id (Table: Orders) | order_status (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | product_id (Table: Products) | product_name (Table: Products) | product_details (Table: Products) | order_item_id (Table: Order_Items) | product_id (Table: Order_Items) | order_id (Table: Order_Items) | order_item_status (Table: Order_Items) | order_item_details (Table: Order_Items) | shipment_id (Table: Shipments) | order_id (Table: Shipments) | invoice_number (Table: Shipments) | shipment_tracking_number (Table: Shipments) | shipment_date (Table: Shipments) | other_shipment_details (Table: Shipments) | shipment_id (Table: Shipment_Items) | order_item_id (Table: Shipment_Items)
Count the number of customers who do not have an account.,SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts),* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
What are the crime rates of counties that contain cities that have white percentages of over 90?,SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90,* (Table: city) | County_ID (Table: county_public_safety) | Name (Table: county_public_safety) | Population (Table: county_public_safety) | Police_officers (Table: county_public_safety) | Residents_per_officer (Table: county_public_safety) | Case_burden (Table: county_public_safety) | Crime_rate (Table: county_public_safety) | Police_force (Table: county_public_safety) | Location (Table: county_public_safety) | City_ID (Table: city) | County_ID (Table: city) | Name (Table: city) | White (Table: city) | Black (Table: city) | Amerindian (Table: city) | Asian (Table: city) | Multiracial (Table: city) | Hispanic (Table: city)
Give the phones for departments in room 268.,SELECT DPhone FROM DEPARTMENT WHERE Room  =  268,* (Table: Gradeconversion) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty) | DNO (Table: Department) | Division (Table: Department) | DName (Table: Department) | Room (Table: Department) | Building (Table: Department) | DPhone (Table: Department) | FacID (Table: Member_of) | DNO (Table: Member_of) | Appt_Type (Table: Member_of) | CID (Table: Course) | CName (Table: Course) | Credits (Table: Course) | Instructor (Table: Course) | Days (Table: Course) | Hours (Table: Course) | DNO (Table: Course) | StuID (Table: Minor_in) | DNO (Table: Minor_in) | StuID (Table: Enrolled_in) | CID (Table: Enrolled_in) | Grade (Table: Enrolled_in) | lettergrade (Table: Gradeconversion) | gradepoint (Table: Gradeconversion)
Which of the airport names contains the word 'international'?,SELECT name FROM airport WHERE name LIKE '%international%',* (Table: flight) | id (Table: airport) | City (Table: airport) | Country (Table: airport) | IATA (Table: airport) | ICAO (Table: airport) | name (Table: airport) | id (Table: operate_company) | name (Table: operate_company) | Type (Table: operate_company) | Principal_activities (Table: operate_company) | Incorporated_in (Table: operate_company) | Group_Equity_Shareholding (Table: operate_company) | id (Table: flight) | Vehicle_Flight_number (Table: flight) | Date (Table: flight) | Pilot (Table: flight) | Velocity (Table: flight) | Altitude (Table: flight) | airport_id (Table: flight) | company_id (Table: flight)
Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.,"SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
Find distinct cities of address of students?,SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id,* (Table: Candidate_Assessments) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | person_id (Table: People) | first_name (Table: People) | middle_name (Table: People) | last_name (Table: People) | cell_mobile_number (Table: People) | email_address (Table: People) | login_name (Table: People) | password (Table: People) | student_id (Table: Students) | student_details (Table: Students) | course_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | other_details (Table: Courses) | person_address_id (Table: People_Addresses) | person_id (Table: People_Addresses) | address_id (Table: People_Addresses) | date_from (Table: People_Addresses) | date_to (Table: People_Addresses) | student_id (Table: Student_Course_Registrations) | course_id (Table: Student_Course_Registrations) | registration_date (Table: Student_Course_Registrations) | student_id (Table: Student_Course_Attendance) | course_id (Table: Student_Course_Attendance) | date_of_attendance (Table: Student_Course_Attendance) | candidate_id (Table: Candidates) | candidate_details (Table: Candidates) | candidate_id (Table: Candidate_Assessments) | qualification (Table: Candidate_Assessments) | assessment_date (Table: Candidate_Assessments) | asessment_outcome_code (Table: Candidate_Assessments)
How many different jobs are listed?,SELECT count(DISTINCT job) FROM Person,* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
Find the name and ID of the product whose total order quantity is the largest.,"SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1",* (Table: Order_Items) | address_id (Table: Addresses) | address_content (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | product_id (Table: Products) | product_details (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | date_became_customer (Table: Customers) | other_customer_details (Table: Customers) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | customer_id (Table: Customer_Contact_Channels) | channel_code (Table: Customer_Contact_Channels) | active_from_date (Table: Customer_Contact_Channels) | active_to_date (Table: Customer_Contact_Channels) | contact_number (Table: Customer_Contact_Channels) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status (Table: Customer_Orders) | order_date (Table: Customer_Orders) | order_details (Table: Customer_Orders) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | order_quantity (Table: Order_Items)
What are the student ID and login name of the student who are enrolled in the most courses?,"SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
What are the names of customers who do not have saving accounts?,SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving',* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
How many cities have a stadium that was opened before the year of 2006?,SELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006,* (Table: record) | ID (Table: swimmer) | name (Table: swimmer) | Nationality (Table: swimmer) | meter_100 (Table: swimmer) | meter_200 (Table: swimmer) | meter_300 (Table: swimmer) | meter_400 (Table: swimmer) | meter_500 (Table: swimmer) | meter_600 (Table: swimmer) | meter_700 (Table: swimmer) | Time (Table: swimmer) | ID (Table: stadium) | name (Table: stadium) | Capacity (Table: stadium) | City (Table: stadium) | Country (Table: stadium) | Opening_year (Table: stadium) | ID (Table: event) | Name (Table: event) | Stadium_ID (Table: event) | Year (Table: event) | ID (Table: record) | Result (Table: record) | Swimmer_ID (Table: record) | Event_ID (Table: record)
How many scientists do not have any projects assigned to them?,SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo),* (Table: AssignedTo) | SSN (Table: Scientists) | Name (Table: Scientists) | Code (Table: Projects) | Name (Table: Projects) | Hours (Table: Projects) | Scientist (Table: AssignedTo) | Project (Table: AssignedTo)
Show the name and population of the country that has the highest roller coaster.,"SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1",* (Table: country) | Roller_Coaster_ID (Table: roller_coaster) | Name (Table: roller_coaster) | Park (Table: roller_coaster) | Country_ID (Table: roller_coaster) | Length (Table: roller_coaster) | Height (Table: roller_coaster) | Speed (Table: roller_coaster) | Opened (Table: roller_coaster) | Status (Table: roller_coaster) | Country_ID (Table: country) | Name (Table: country) | Population (Table: country) | Area (Table: country) | Languages (Table: country)
what is the full name and id of the college with the largest number of baseball players?,"SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;",* (Table: team_half) | player_id (Table: all_star) | year (Table: all_star) | game_num (Table: all_star) | game_id (Table: all_star) | team_id (Table: all_star) | league_id (Table: all_star) | gp (Table: all_star) | starting_pos (Table: all_star) | year (Table: appearances) | team_id (Table: appearances) | league_id (Table: appearances) | player_id (Table: appearances) | g_all (Table: appearances) | gs (Table: appearances) | g_batting (Table: appearances) | g_defense (Table: appearances) | g_p (Table: appearances) | g_c (Table: appearances) | g_1b (Table: appearances) | g_2b (Table: appearances) | g_3b (Table: appearances) | g_ss (Table: appearances) | g_lf (Table: appearances) | g_cf (Table: appearances) | g_rf (Table: appearances) | g_of (Table: appearances) | g_dh (Table: appearances) | g_ph (Table: appearances) | g_pr (Table: appearances) | player_id (Table: manager_award) | award_id (Table: manager_award) | year (Table: manager_award) | league_id (Table: manager_award) | tie (Table: manager_award) | notes (Table: manager_award) | player_id (Table: player_award) | award_id (Table: player_award) | year (Table: player_award) | league_id (Table: player_award) | tie (Table: player_award) | notes (Table: player_award) | award_id (Table: manager_award_vote) | year (Table: manager_award_vote) | league_id (Table: manager_award_vote) | player_id (Table: manager_award_vote) | points_won (Table: manager_award_vote) | points_max (Table: manager_award_vote) | votes_first (Table: manager_award_vote) | award_id (Table: player_award_vote) | year (Table: player_award_vote) | league_id (Table: player_award_vote) | player_id (Table: player_award_vote) | points_won (Table: player_award_vote) | points_max (Table: player_award_vote) | votes_first (Table: player_award_vote) | player_id (Table: batting) | year (Table: batting) | stint (Table: batting) | team_id (Table: batting) | league_id (Table: batting) | g (Table: batting) | ab (Table: batting) | r (Table: batting) | h (Table: batting) | double (Table: batting) | triple (Table: batting) | hr (Table: batting) | rbi (Table: batting) | sb (Table: batting) | cs (Table: batting) | bb (Table: batting) | so (Table: batting) | ibb (Table: batting) | hbp (Table: batting) | sh (Table: batting) | sf (Table: batting) | g_idp (Table: batting) | year (Table: batting_postseason) | round (Table: batting_postseason) | player_id (Table: batting_postseason) | team_id (Table: batting_postseason) | league_id (Table: batting_postseason) | g (Table: batting_postseason) | ab (Table: batting_postseason) | r (Table: batting_postseason) | h (Table: batting_postseason) | double (Table: batting_postseason) | triple (Table: batting_postseason) | hr (Table: batting_postseason) | rbi (Table: batting_postseason) | sb (Table: batting_postseason) | cs (Table: batting_postseason) | bb (Table: batting_postseason) | so (Table: batting_postseason) | ibb (Table: batting_postseason) | hbp (Table: batting_postseason) | sh (Table: batting_postseason) | sf (Table: batting_postseason) | g_idp (Table: batting_postseason) | player_id (Table: player_college) | college_id (Table: player_college) | year (Table: player_college) | player_id (Table: fielding) | year (Table: fielding) | stint (Table: fielding) | team_id (Table: fielding) | league_id (Table: fielding) | pos (Table: fielding) | g (Table: fielding) | gs (Table: fielding) | inn_outs (Table: fielding) | po (Table: fielding) | a (Table: fielding) | e (Table: fielding) | dp (Table: fielding) | pb (Table: fielding) | wp (Table: fielding) | sb (Table: fielding) | cs (Table: fielding) | zr (Table: fielding) | player_id (Table: fielding_outfield) | year (Table: fielding_outfield) | stint (Table: fielding_outfield) | glf (Table: fielding_outfield) | gcf (Table: fielding_outfield) | grf (Table: fielding_outfield) | player_id (Table: fielding_postseason) | year (Table: fielding_postseason) | team_id (Table: fielding_postseason) | league_id (Table: fielding_postseason) | round (Table: fielding_postseason) | pos (Table: fielding_postseason) | g (Table: fielding_postseason) | gs (Table: fielding_postseason) | inn_outs (Table: fielding_postseason) | po (Table: fielding_postseason) | a (Table: fielding_postseason) | e (Table: fielding_postseason) | dp (Table: fielding_postseason) | tp (Table: fielding_postseason) | pb (Table: fielding_postseason) | sb (Table: fielding_postseason) | cs (Table: fielding_postseason) | player_id (Table: hall_of_fame) | yearid (Table: hall_of_fame) | votedby (Table: hall_of_fame) | ballots (Table: hall_of_fame) | needed (Table: hall_of_fame) | votes (Table: hall_of_fame) | inducted (Table: hall_of_fame) | category (Table: hall_of_fame) | needed_note (Table: hall_of_fame) | year (Table: home_game) | league_id (Table: home_game) | team_id (Table: home_game) | park_id (Table: home_game) | span_first (Table: home_game) | span_last (Table: home_game) | games (Table: home_game) | openings (Table: home_game) | attendance (Table: home_game) | player_id (Table: manager) | year (Table: manager) | team_id (Table: manager) | league_id (Table: manager) | inseason (Table: manager) | g (Table: manager) | w (Table: manager) | l (Table: manager) | rank (Table: manager) | plyr_mgr (Table: manager) | player_id (Table: manager_half) | year (Table: manager_half) | team_id (Table: manager_half) | league_id (Table: manager_half) | inseason (Table: manager_half) | half (Table: manager_half) | g (Table: manager_half) | w (Table: manager_half) | l (Table: manager_half) | rank (Table: manager_half) | player_id (Table: player) | birth_year (Table: player) | birth_month (Table: player) | birth_day (Table: player) | birth_country (Table: player) | birth_state (Table: player) | birth_city (Table: player) | death_year (Table: player) | death_month (Table: player) | death_day (Table: player) | death_country (Table: player) | death_state (Table: player) | death_city (Table: player) | name_first (Table: player) | name_last (Table: player) | name_given (Table: player) | weight (Table: player) | height (Table: player) | bats (Table: player) | throws (Table: player) | debut (Table: player) | final_game (Table: player) | retro_id (Table: player) | bbref_id (Table: player) | park_id (Table: park) | park_name (Table: park) | park_alias (Table: park) | city (Table: park) | state (Table: park) | country (Table: park) | player_id (Table: pitching) | year (Table: pitching) | stint (Table: pitching) | team_id (Table: pitching) | league_id (Table: pitching) | w (Table: pitching) | l (Table: pitching) | g (Table: pitching) | gs (Table: pitching) | cg (Table: pitching) | sho (Table: pitching) | sv (Table: pitching) | ipouts (Table: pitching) | h (Table: pitching) | er (Table: pitching) | hr (Table: pitching) | bb (Table: pitching) | so (Table: pitching) | baopp (Table: pitching) | era (Table: pitching) | ibb (Table: pitching) | wp (Table: pitching) | hbp (Table: pitching) | bk (Table: pitching) | bfp (Table: pitching) | gf (Table: pitching) | r (Table: pitching) | sh (Table: pitching) | sf (Table: pitching) | g_idp (Table: pitching) | player_id (Table: pitching_postseason) | year (Table: pitching_postseason) | round (Table: pitching_postseason) | team_id (Table: pitching_postseason) | league_id (Table: pitching_postseason) | w (Table: pitching_postseason) | l (Table: pitching_postseason) | g (Table: pitching_postseason) | gs (Table: pitching_postseason) | cg (Table: pitching_postseason) | sho (Table: pitching_postseason) | sv (Table: pitching_postseason) | ipouts (Table: pitching_postseason) | h (Table: pitching_postseason) | er (Table: pitching_postseason) | hr (Table: pitching_postseason) | bb (Table: pitching_postseason) | so (Table: pitching_postseason) | baopp (Table: pitching_postseason) | era (Table: pitching_postseason) | ibb (Table: pitching_postseason) | wp (Table: pitching_postseason) | hbp (Table: pitching_postseason) | bk (Table: pitching_postseason) | bfp (Table: pitching_postseason) | gf (Table: pitching_postseason) | r (Table: pitching_postseason) | sh (Table: pitching_postseason) | sf (Table: pitching_postseason) | g_idp (Table: pitching_postseason) | year (Table: salary) | team_id (Table: salary) | league_id (Table: salary) | player_id (Table: salary) | salary (Table: salary) | college_id (Table: college) | name_full (Table: college) | city (Table: college) | state (Table: college) | country (Table: college) | year (Table: postseason) | round (Table: postseason) | team_id_winner (Table: postseason) | league_id_winner (Table: postseason) | team_id_loser (Table: postseason) | league_id_loser (Table: postseason) | wins (Table: postseason) | losses (Table: postseason) | ties (Table: postseason) | year (Table: team) | league_id (Table: team) | team_id (Table: team) | franchise_id (Table: team) | div_id (Table: team) | rank (Table: team) | g (Table: team) | ghome (Table: team) | w (Table: team) | l (Table: team) | div_win (Table: team) | wc_win (Table: team) | lg_win (Table: team) | ws_win (Table: team) | r (Table: team) | ab (Table: team) | h (Table: team) | double (Table: team) | triple (Table: team) | hr (Table: team) | bb (Table: team) | so (Table: team) | sb (Table: team) | cs (Table: team) | hbp (Table: team) | sf (Table: team) | ra (Table: team) | er (Table: team) | era (Table: team) | cg (Table: team) | sho (Table: team) | sv (Table: team) | ipouts (Table: team) | ha (Table: team) | hra (Table: team) | bba (Table: team) | soa (Table: team) | e (Table: team) | dp (Table: team) | fp (Table: team) | name (Table: team) | park (Table: team) | attendance (Table: team) | bpf (Table: team) | ppf (Table: team) | team_id_br (Table: team) | team_id_lahman45 (Table: team) | team_id_retro (Table: team) | franchise_id (Table: team_franchise) | franchise_name (Table: team_franchise) | active (Table: team_franchise) | na_assoc (Table: team_franchise) | year (Table: team_half) | league_id (Table: team_half) | team_id (Table: team_half) | half (Table: team_half) | div_id (Table: team_half) | div_win (Table: team_half) | rank (Table: team_half) | g (Table: team_half) | w (Table: team_half) | l (Table: team_half)
"Show the rank, first name, and last name for all the faculty.","SELECT rank ,  Fname ,  Lname FROM Faculty",* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
"How many films are there in each category? List the genre name, genre id and the count.","SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id",* (Table: store) | actor_id (Table: actor) | first_name (Table: actor) | last_name (Table: actor) | last_update (Table: actor) | address_id (Table: address) | address (Table: address) | address2 (Table: address) | district (Table: address) | city_id (Table: address) | postal_code (Table: address) | phone (Table: address) | last_update (Table: address) | category_id (Table: category) | name (Table: category) | last_update (Table: category) | city_id (Table: city) | city (Table: city) | country_id (Table: city) | last_update (Table: city) | country_id (Table: country) | country (Table: country) | last_update (Table: country) | customer_id (Table: customer) | store_id (Table: customer) | first_name (Table: customer) | last_name (Table: customer) | email (Table: customer) | address_id (Table: customer) | active (Table: customer) | create_date (Table: customer) | last_update (Table: customer) | film_id (Table: film) | title (Table: film) | description (Table: film) | release_year (Table: film) | language_id (Table: film) | original_language_id (Table: film) | rental_duration (Table: film) | rental_rate (Table: film) | length (Table: film) | replacement_cost (Table: film) | rating (Table: film) | special_features (Table: film) | last_update (Table: film) | actor_id (Table: film_actor) | film_id (Table: film_actor) | last_update (Table: film_actor) | film_id (Table: film_category) | category_id (Table: film_category) | last_update (Table: film_category) | film_id (Table: film_text) | title (Table: film_text) | description (Table: film_text) | inventory_id (Table: inventory) | film_id (Table: inventory) | store_id (Table: inventory) | last_update (Table: inventory) | language_id (Table: language) | name (Table: language) | last_update (Table: language) | payment_id (Table: payment) | customer_id (Table: payment) | staff_id (Table: payment) | rental_id (Table: payment) | amount (Table: payment) | payment_date (Table: payment) | last_update (Table: payment) | rental_id (Table: rental) | rental_date (Table: rental) | inventory_id (Table: rental) | customer_id (Table: rental) | return_date (Table: rental) | staff_id (Table: rental) | last_update (Table: rental) | staff_id (Table: staff) | first_name (Table: staff) | last_name (Table: staff) | address_id (Table: staff) | picture (Table: staff) | email (Table: staff) | store_id (Table: staff) | active (Table: staff) | username (Table: staff) | password (Table: staff) | last_update (Table: staff) | store_id (Table: store) | manager_staff_id (Table: store) | address_id (Table: store) | last_update (Table: store)
What are the student ids for students over 20 years old?,SELECT StuID FROM Student WHERE age  >  20,* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
What is Nancy Edwards's address?,"SELECT address FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards"";",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
Find the name of the products that are not using the most frequently-used max page size.,SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1),* (Table: store_district) | product_id (Table: product) | product (Table: product) | dimensions (Table: product) | dpi (Table: product) | pages_per_minute_color (Table: product) | max_page_size (Table: product) | interface (Table: product) | Store_ID (Table: store) | Store_Name (Table: store) | Type (Table: store) | Area_size (Table: store) | Number_of_product_category (Table: store) | Ranking (Table: store) | District_ID (Table: district) | District_name (Table: district) | Headquartered_City (Table: district) | City_Population (Table: district) | City_Area (Table: district) | Store_ID (Table: store_product) | Product_ID (Table: store_product) | Store_ID (Table: store_district) | District_ID (Table: store_district)
Show the role code with the least employees.,SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1,* (Table: Documents_to_be_Destroyed) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Calendar_Date (Table: Ref_Calendar) | Day_Number (Table: Ref_Calendar) | Location_Code (Table: Ref_Locations) | Location_Name (Table: Ref_Locations) | Location_Description (Table: Ref_Locations) | Role_Code (Table: Roles) | Role_Name (Table: Roles) | Role_Description (Table: Roles) | Document_ID (Table: All_Documents) | Date_Stored (Table: All_Documents) | Document_Type_Code (Table: All_Documents) | Document_Name (Table: All_Documents) | Document_Description (Table: All_Documents) | Other_Details (Table: All_Documents) | Employee_ID (Table: Employees) | Role_Code (Table: Employees) | Employee_Name (Table: Employees) | Gender_MFU (Table: Employees) | Date_of_Birth (Table: Employees) | Other_Details (Table: Employees) | Document_ID (Table: Document_Locations) | Location_Code (Table: Document_Locations) | Date_in_Location_From (Table: Document_Locations) | Date_in_Locaton_To (Table: Document_Locations) | Document_ID (Table: Documents_to_be_Destroyed) | Destruction_Authorised_by_Employee_ID (Table: Documents_to_be_Destroyed) | Destroyed_by_Employee_ID (Table: Documents_to_be_Destroyed) | Planned_Destruction_Date (Table: Documents_to_be_Destroyed) | Actual_Destruction_Date (Table: Documents_to_be_Destroyed) | Other_Details (Table: Documents_to_be_Destroyed)
What is the total number of purchases for members with level 6?,SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6,* (Table: purchase) | Member_ID (Table: member) | Card_Number (Table: member) | Name (Table: member) | Hometown (Table: member) | Level (Table: member) | Branch_ID (Table: branch) | Name (Table: branch) | Open_year (Table: branch) | Address_road (Table: branch) | City (Table: branch) | membership_amount (Table: branch) | Member_ID (Table: membership_register_branch) | Branch_ID (Table: membership_register_branch) | Register_Year (Table: membership_register_branch) | Member_ID (Table: purchase) | Branch_ID (Table: purchase) | Year (Table: purchase) | Total_pounds (Table: purchase)
"List the name and residence for players whose occupation is not ""Researcher"".","SELECT Player_name ,  residence FROM player WHERE Occupation != ""Researcher""",* (Table: match_result) | Player_ID (Table: player) | Sponsor_name (Table: player) | Player_name (Table: player) | Gender (Table: player) | Residence (Table: player) | Occupation (Table: player) | Votes (Table: player) | Rank (Table: player) | Club_ID (Table: club) | Club_name (Table: club) | Region (Table: club) | Start_year (Table: club) | Coach_ID (Table: coach) | Coach_name (Table: coach) | Gender (Table: coach) | Club_ID (Table: coach) | Rank (Table: coach) | Player_ID (Table: player_coach) | Coach_ID (Table: player_coach) | Starting_year (Table: player_coach) | Rank (Table: match_result) | Club_ID (Table: match_result) | Gold (Table: match_result) | Big_Silver (Table: match_result) | Small_Silver (Table: match_result) | Bronze (Table: match_result) | Points (Table: match_result)
List the names of players that do not have coaches.,SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach),* (Table: match_result) | Player_ID (Table: player) | Sponsor_name (Table: player) | Player_name (Table: player) | Gender (Table: player) | Residence (Table: player) | Occupation (Table: player) | Votes (Table: player) | Rank (Table: player) | Club_ID (Table: club) | Club_name (Table: club) | Region (Table: club) | Start_year (Table: club) | Coach_ID (Table: coach) | Coach_name (Table: coach) | Gender (Table: coach) | Club_ID (Table: coach) | Rank (Table: coach) | Player_ID (Table: player_coach) | Coach_ID (Table: player_coach) | Starting_year (Table: player_coach) | Rank (Table: match_result) | Club_ID (Table: match_result) | Gold (Table: match_result) | Big_Silver (Table: match_result) | Small_Silver (Table: match_result) | Bronze (Table: match_result) | Points (Table: match_result)
How many students are over 18 and do not have allergy to food type or animal type?,"SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  ""food"" OR T2.allergytype  =  ""animal"")",* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
How many faculty members do we have for each faculty rank?,"SELECT rank ,  count(*) FROM Faculty GROUP BY rank",* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
What are total transaction amounts for each transaction type?,"SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
"Which papers did the author ""Olin Shivers"" write? Give me the paper titles.","SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  ""Olin"" AND t1.lname  =  ""Shivers""",* (Table: Authorship) | instID (Table: Inst) | name (Table: Inst) | country (Table: Inst) | authID (Table: Authors) | lname (Table: Authors) | fname (Table: Authors) | paperID (Table: Papers) | title (Table: Papers) | authID (Table: Authorship) | instID (Table: Authorship) | paperID (Table: Authorship) | authOrder (Table: Authorship)
What are the percentage of hispanics in cities with the black percentage higher than 10?,SELECT Hispanic FROM city WHERE Black  >  10,* (Table: city) | County_ID (Table: county_public_safety) | Name (Table: county_public_safety) | Population (Table: county_public_safety) | Police_officers (Table: county_public_safety) | Residents_per_officer (Table: county_public_safety) | Case_burden (Table: county_public_safety) | Crime_rate (Table: county_public_safety) | Police_force (Table: county_public_safety) | Location (Table: county_public_safety) | City_ID (Table: city) | County_ID (Table: city) | Name (Table: city) | White (Table: city) | Black (Table: city) | Amerindian (Table: city) | Asian (Table: city) | Multiracial (Table: city) | Hispanic (Table: city)
How old is the average person for each job?,"SELECT avg(age) ,  job FROM Person GROUP BY job",* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
Show the student id of the oldest student.,SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student),* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
Return the ids of documents that do not have expenses.,SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses,* (Table: Accounts) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Budget_Type_Code (Table: Ref_Budget_Codes) | Budget_Type_Description (Table: Ref_Budget_Codes) | Project_ID (Table: Projects) | Project_Details (Table: Projects) | Document_ID (Table: Documents) | Document_Type_Code (Table: Documents) | Project_ID (Table: Documents) | Document_Date (Table: Documents) | Document_Name (Table: Documents) | Document_Description (Table: Documents) | Other_Details (Table: Documents) | Statement_ID (Table: Statements) | Statement_Details (Table: Statements) | Document_ID (Table: Documents_with_Expenses) | Budget_Type_Code (Table: Documents_with_Expenses) | Document_Details (Table: Documents_with_Expenses) | Account_ID (Table: Accounts) | Statement_ID (Table: Accounts) | Account_Details (Table: Accounts)
Advisor 1121 has how many students?,SELECT count(*) FROM Student WHERE Advisor =  1121;,* (Table: Visits_Restaurant) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | ResID (Table: Restaurant) | ResName (Table: Restaurant) | Address (Table: Restaurant) | Rating (Table: Restaurant) | ResID (Table: Type_Of_Restaurant) | ResTypeID (Table: Type_Of_Restaurant) | ResTypeID (Table: Restaurant_Type) | ResTypeName (Table: Restaurant_Type) | ResTypeDescription (Table: Restaurant_Type) | StuID (Table: Visits_Restaurant) | ResID (Table: Visits_Restaurant) | Time (Table: Visits_Restaurant) | Spent (Table: Visits_Restaurant)
Find the patient who has the most recent undergoing treatment?,SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1,* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
"List the hardware model name for the phones that were produced by ""Nokia Corporation"" or whose screen mode type is ""Graphics.""","SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  ""Graphics"" OR t2.Company_name  =  ""Nokia Corporation""",* (Table: phone) | Model_name (Table: chip_model) | Launch_year (Table: chip_model) | RAM_MiB (Table: chip_model) | ROM_MiB (Table: chip_model) | Slots (Table: chip_model) | WiFi (Table: chip_model) | Bluetooth (Table: chip_model) | Graphics_mode (Table: screen_mode) | Char_cells (Table: screen_mode) | Pixels (Table: screen_mode) | Hardware_colours (Table: screen_mode) | used_kb (Table: screen_mode) | map (Table: screen_mode) | Type (Table: screen_mode) | Company_name (Table: phone) | Hardware_Model_name (Table: phone) | Accreditation_type (Table: phone) | Accreditation_level (Table: phone) | Date (Table: phone) | chip_model (Table: phone) | screen_mode (Table: phone)
What is the name of the event that happened in the most recent year?,SELECT name FROM event ORDER BY YEAR DESC LIMIT 1,* (Table: record) | ID (Table: swimmer) | name (Table: swimmer) | Nationality (Table: swimmer) | meter_100 (Table: swimmer) | meter_200 (Table: swimmer) | meter_300 (Table: swimmer) | meter_400 (Table: swimmer) | meter_500 (Table: swimmer) | meter_600 (Table: swimmer) | meter_700 (Table: swimmer) | Time (Table: swimmer) | ID (Table: stadium) | name (Table: stadium) | Capacity (Table: stadium) | City (Table: stadium) | Country (Table: stadium) | Opening_year (Table: stadium) | ID (Table: event) | Name (Table: event) | Stadium_ID (Table: event) | Year (Table: event) | ID (Table: record) | Result (Table: record) | Swimmer_ID (Table: record) | Event_ID (Table: record)
"Show the description of transaction type with code ""PUR"".","SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code	  =  ""PUR""",* (Table: Transactions_Lots) | investor_id (Table: Investors) | Investor_details (Table: Investors) | lot_id (Table: Lots) | investor_id (Table: Lots) | lot_details (Table: Lots) | transaction_type_code (Table: Ref_Transaction_Types) | transaction_type_description (Table: Ref_Transaction_Types) | transaction_id (Table: Transactions) | investor_id (Table: Transactions) | transaction_type_code (Table: Transactions) | date_of_transaction (Table: Transactions) | amount_of_transaction (Table: Transactions) | share_count (Table: Transactions) | other_details (Table: Transactions) | sales_transaction_id (Table: Sales) | sales_details (Table: Sales) | purchase_transaction_id (Table: Purchases) | purchase_details (Table: Purchases) | transaction_id (Table: Transactions_Lots) | lot_id (Table: Transactions_Lots)
Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.,"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",* (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Attribute_Definitions) | attribute_name (Table: Attribute_Definitions) | attribute_data_type (Table: Attribute_Definitions) | catalog_id (Table: Catalogs) | catalog_name (Table: Catalogs) | catalog_publisher (Table: Catalogs) | date_of_publication (Table: Catalogs) | date_of_latest_revision (Table: Catalogs) | catalog_level_number (Table: Catalog_Structure) | catalog_id (Table: Catalog_Structure) | catalog_level_name (Table: Catalog_Structure) | catalog_entry_id (Table: Catalog_Contents) | catalog_level_number (Table: Catalog_Contents) | parent_entry_id (Table: Catalog_Contents) | previous_entry_id (Table: Catalog_Contents) | next_entry_id (Table: Catalog_Contents) | catalog_entry_name (Table: Catalog_Contents) | product_stock_number (Table: Catalog_Contents) | price_in_dollars (Table: Catalog_Contents) | price_in_euros (Table: Catalog_Contents) | price_in_pounds (Table: Catalog_Contents) | capacity (Table: Catalog_Contents) | length (Table: Catalog_Contents) | height (Table: Catalog_Contents) | width (Table: Catalog_Contents) | catalog_entry_id (Table: Catalog_Contents_Additional_Attributes) | catalog_level_number (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Catalog_Contents_Additional_Attributes) | attribute_value (Table: Catalog_Contents_Additional_Attributes)
What are the distinct classes that races can have?,SELECT DISTINCT CLASS FROM race,* (Table: track) | Race_ID (Table: race) | Name (Table: race) | Class (Table: race) | Date (Table: race) | Track_ID (Table: race) | Track_ID (Table: track) | Name (Table: track) | Location (Table: track) | Seating (Table: track) | Year_Opened (Table: track)
Show all locations where a gas station for company with market value greater than 100 is located.,SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100,* (Table: station_company) | Company_ID (Table: company) | Rank (Table: company) | Company (Table: company) | Headquarters (Table: company) | Main_Industry (Table: company) | Sales_billion (Table: company) | Profits_billion (Table: company) | Assets_billion (Table: company) | Market_Value (Table: company) | Station_ID (Table: gas_station) | Open_Year (Table: gas_station) | Location (Table: gas_station) | Manager_Name (Table: gas_station) | Vice_Manager_Name (Table: gas_station) | Representative_Name (Table: gas_station) | Station_ID (Table: station_company) | Company_ID (Table: station_company) | Rank_of_the_Year (Table: station_company)
What is the total checking balance in all accounts?,SELECT sum(balance) FROM checking,* (Table: CHECKING) | custid (Table: ACCOUNTS) | name (Table: ACCOUNTS) | custid (Table: SAVINGS) | balance (Table: SAVINGS) | custid (Table: CHECKING) | balance (Table: CHECKING)
"Return the themes of farm competitions, sorted by year ascending.",SELECT Theme FROM farm_competition ORDER BY YEAR ASC,* (Table: competition_record) | City_ID (Table: city) | Official_Name (Table: city) | Status (Table: city) | Area_km_2 (Table: city) | Population (Table: city) | Census_Ranking (Table: city) | Farm_ID (Table: farm) | Year (Table: farm) | Total_Horses (Table: farm) | Working_Horses (Table: farm) | Total_Cattle (Table: farm) | Oxen (Table: farm) | Bulls (Table: farm) | Cows (Table: farm) | Pigs (Table: farm) | Sheep_and_Goats (Table: farm) | Competition_ID (Table: farm_competition) | Year (Table: farm_competition) | Theme (Table: farm_competition) | Host_city_ID (Table: farm_competition) | Hosts (Table: farm_competition) | Competition_ID (Table: competition_record) | Farm_ID (Table: competition_record) | Rank (Table: competition_record)
Show the number of all customers without an account.,SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts),* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
Compute the average profits companies make.,SELECT avg(Profits_billion) FROM Companies,* (Table: Office_locations) | id (Table: buildings) | name (Table: buildings) | City (Table: buildings) | Height (Table: buildings) | Stories (Table: buildings) | Status (Table: buildings) | id (Table: Companies) | name (Table: Companies) | Headquarters (Table: Companies) | Industry (Table: Companies) | Sales_billion (Table: Companies) | Profits_billion (Table: Companies) | Assets_billion (Table: Companies) | Market_Value_billion (Table: Companies) | building_id (Table: Office_locations) | company_id (Table: Office_locations) | move_in_year (Table: Office_locations)
"What is the name, account type, and account balance corresponding to the customer with the highest credit score?","SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
"What are the names of students and their respective departments, ordered by number of credits from least to greatest?","SELECT name ,  dept_name FROM student ORDER BY tot_cred",* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Tell me the price ranges for all the hotels.,SELECT price_range FROM HOTELS,* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
What is the name of all the people who are older than at least one engineer? Order them by age.,SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age,* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
Find the name and city of the airport which is the source for the most number of flight routes.,"SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1",* (Table: airlines) | rid (Table: routes) | dst_apid (Table: routes) | dst_ap (Table: routes) | src_apid (Table: routes) | src_ap (Table: routes) | alid (Table: routes) | airline (Table: routes) | codeshare (Table: routes) | apid (Table: airports) | name (Table: airports) | city (Table: airports) | country (Table: airports) | x (Table: airports) | y (Table: airports) | elevation (Table: airports) | iata (Table: airports) | icao (Table: airports) | alid (Table: airlines) | name (Table: airlines) | iata (Table: airlines) | icao (Table: airlines) | callsign (Table: airlines) | country (Table: airlines) | active (Table: airlines)
"What is the maximum level of managers in countries that are not ""Australia""?","SELECT max(LEVEL) FROM manager WHERE Country != ""Australia	""",* (Table: railway_manage) | Railway_ID (Table: railway) | Railway (Table: railway) | Builder (Table: railway) | Built (Table: railway) | Wheels (Table: railway) | Location (Table: railway) | ObjectNumber (Table: railway) | Train_ID (Table: train) | Train_Num (Table: train) | Name (Table: train) | From (Table: train) | Arrival (Table: train) | Railway_ID (Table: train) | Manager_ID (Table: manager) | Name (Table: manager) | Country (Table: manager) | Working_year_starts (Table: manager) | Age (Table: manager) | Level (Table: manager) | Railway_ID (Table: railway_manage) | Manager_ID (Table: railway_manage) | From_Year (Table: railway_manage)
What are the checking and savings balances in accounts belonging to Brown?,"SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",* (Table: CHECKING) | custid (Table: ACCOUNTS) | name (Table: ACCOUNTS) | custid (Table: SAVINGS) | balance (Table: SAVINGS) | custid (Table: CHECKING) | balance (Table: CHECKING)
What are the three most costly procedures?,SELECT name FROM procedures ORDER BY cost LIMIT 3,* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
Show names and phones of customers who do not have address information.,"SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)",* (Table: Order_Items) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_number (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | contact_id (Table: Contacts) | customer_id (Table: Contacts) | gender (Table: Contacts) | first_name (Table: Contacts) | last_name (Table: Contacts) | contact_phone (Table: Contacts) | customer_id (Table: Customer_Address_History) | address_id (Table: Customer_Address_History) | date_from (Table: Customer_Address_History) | date_to (Table: Customer_Address_History) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_date (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | order_quantity (Table: Order_Items)
What is the year and semester with the most courses?,"SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Find the number of distinct products Rodrick Heaney has bought so far.,"SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  ""Rodrick Heaney""",* (Table: Order_Items) | address_id (Table: Addresses) | address_content (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | product_id (Table: Products) | product_details (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | date_became_customer (Table: Customers) | other_customer_details (Table: Customers) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | customer_id (Table: Customer_Contact_Channels) | channel_code (Table: Customer_Contact_Channels) | active_from_date (Table: Customer_Contact_Channels) | active_to_date (Table: Customer_Contact_Channels) | contact_number (Table: Customer_Contact_Channels) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status (Table: Customer_Orders) | order_date (Table: Customer_Orders) | order_details (Table: Customer_Orders) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | order_quantity (Table: Order_Items)
"What are the ids, scores, and dates of the games which caused at least two injury accidents?","SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",* (Table: injury_accident) | id (Table: stadium) | name (Table: stadium) | Home_Games (Table: stadium) | Average_Attendance (Table: stadium) | Total_Attendance (Table: stadium) | Capacity_Percentage (Table: stadium) | stadium_id (Table: game) | id (Table: game) | Season (Table: game) | Date (Table: game) | Home_team (Table: game) | Away_team (Table: game) | Score (Table: game) | Competition (Table: game) | game_id (Table: injury_accident) | id (Table: injury_accident) | Player (Table: injury_accident) | Injury (Table: injury_accident) | Number_of_matches (Table: injury_accident) | Source (Table: injury_accident)
What are the emails and phone numbers of custoemrs who have never filed a complaint?,"SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",* (Table: Complaints) | staff_id (Table: Staff) | gender (Table: Staff) | first_name (Table: Staff) | last_name (Table: Staff) | email_address (Table: Staff) | phone_number (Table: Staff) | customer_id (Table: Customers) | customer_type_code (Table: Customers) | address_line_1 (Table: Customers) | address_line_2 (Table: Customers) | town_city (Table: Customers) | state (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | product_id (Table: Products) | parent_product_id (Table: Products) | product_category_code (Table: Products) | date_product_first_available (Table: Products) | date_product_discontinued (Table: Products) | product_name (Table: Products) | product_description (Table: Products) | product_price (Table: Products) | complaint_id (Table: Complaints) | product_id (Table: Complaints) | customer_id (Table: Complaints) | complaint_outcome_code (Table: Complaints) | complaint_status_code (Table: Complaints) | complaint_type_code (Table: Complaints) | date_complaint_raised (Table: Complaints) | date_complaint_closed (Table: Complaints) | staff_id (Table: Complaints)
"What instruments does the the song ""Le Pop"" use?","SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  ""Le Pop""",* (Table: Vocals) | SongId (Table: Songs) | Title (Table: Songs) | AId (Table: Albums) | Title (Table: Albums) | Year (Table: Albums) | Label (Table: Albums) | Type (Table: Albums) | Id (Table: Band) | Firstname (Table: Band) | Lastname (Table: Band) | SongId (Table: Instruments) | BandmateId (Table: Instruments) | Instrument (Table: Instruments) | SongId (Table: Performance) | Bandmate (Table: Performance) | StagePosition (Table: Performance) | AlbumId (Table: Tracklists) | Position (Table: Tracklists) | SongId (Table: Tracklists) | SongId (Table: Vocals) | Bandmate (Table: Vocals) | Type (Table: Vocals)
Find the total number of students in each department.,"SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Which part has the least chargeable amount? List the part id and amount.,"SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",* (Table: Skills_Required_To_Fix) | company_id (Table: Third_Party_Companies) | company_type (Table: Third_Party_Companies) | company_name (Table: Third_Party_Companies) | company_address (Table: Third_Party_Companies) | other_company_details (Table: Third_Party_Companies) | maintenance_contract_id (Table: Maintenance_Contracts) | maintenance_contract_company_id (Table: Maintenance_Contracts) | contract_start_date (Table: Maintenance_Contracts) | contract_end_date (Table: Maintenance_Contracts) | other_contract_details (Table: Maintenance_Contracts) | part_id (Table: Parts) | part_name (Table: Parts) | chargeable_yn (Table: Parts) | chargeable_amount (Table: Parts) | other_part_details (Table: Parts) | skill_id (Table: Skills) | skill_code (Table: Skills) | skill_description (Table: Skills) | staff_id (Table: Staff) | staff_name (Table: Staff) | gender (Table: Staff) | other_staff_details (Table: Staff) | asset_id (Table: Assets) | maintenance_contract_id (Table: Assets) | supplier_company_id (Table: Assets) | asset_details (Table: Assets) | asset_make (Table: Assets) | asset_model (Table: Assets) | asset_acquired_date (Table: Assets) | asset_disposed_date (Table: Assets) | other_asset_details (Table: Assets) | asset_id (Table: Asset_Parts) | part_id (Table: Asset_Parts) | engineer_id (Table: Maintenance_Engineers) | company_id (Table: Maintenance_Engineers) | first_name (Table: Maintenance_Engineers) | last_name (Table: Maintenance_Engineers) | other_details (Table: Maintenance_Engineers) | engineer_id (Table: Engineer_Skills) | skill_id (Table: Engineer_Skills) | fault_log_entry_id (Table: Fault_Log) | asset_id (Table: Fault_Log) | recorded_by_staff_id (Table: Fault_Log) | fault_log_entry_datetime (Table: Fault_Log) | fault_description (Table: Fault_Log) | other_fault_details (Table: Fault_Log) | engineer_visit_id (Table: Engineer_Visits) | contact_staff_id (Table: Engineer_Visits) | engineer_id (Table: Engineer_Visits) | fault_log_entry_id (Table: Engineer_Visits) | fault_status (Table: Engineer_Visits) | visit_start_datetime (Table: Engineer_Visits) | visit_end_datetime (Table: Engineer_Visits) | other_visit_details (Table: Engineer_Visits) | part_fault_id (Table: Part_Faults) | part_id (Table: Part_Faults) | fault_short_name (Table: Part_Faults) | fault_description (Table: Part_Faults) | other_fault_details (Table: Part_Faults) | fault_log_entry_id (Table: Fault_Log_Parts) | part_fault_id (Table: Fault_Log_Parts) | fault_status (Table: Fault_Log_Parts) | part_fault_id (Table: Skills_Required_To_Fix) | skill_id (Table: Skills_Required_To_Fix)
How many campuses exist are in the county of LA?,"SELECT count(*) FROM campuses WHERE county  =  ""Los Angeles""",* (Table: faculty) | Id (Table: Campuses) | Campus (Table: Campuses) | Location (Table: Campuses) | County (Table: Campuses) | Year (Table: Campuses) | Campus (Table: csu_fees) | Year (Table: csu_fees) | CampusFee (Table: csu_fees) | Year (Table: degrees) | Campus (Table: degrees) | Degrees (Table: degrees) | Campus (Table: discipline_enrollments) | Discipline (Table: discipline_enrollments) | Year (Table: discipline_enrollments) | Undergraduate (Table: discipline_enrollments) | Graduate (Table: discipline_enrollments) | Campus (Table: enrollments) | Year (Table: enrollments) | TotalEnrollment_AY (Table: enrollments) | FTE_AY (Table: enrollments) | Campus (Table: faculty) | Year (Table: faculty) | Faculty (Table: faculty)
"How many tests have result ""Fail""?","SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  ""Fail""",* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
What are the names of the courses that have exactly 1 student enrollment?,SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1,* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
Find the name of accounts whose checking balance is below the average checking balance.,SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking),* (Table: CHECKING) | custid (Table: ACCOUNTS) | name (Table: ACCOUNTS) | custid (Table: SAVINGS) | balance (Table: SAVINGS) | custid (Table: CHECKING) | balance (Table: CHECKING)
What are the names of the technicians by ascending order of age?,SELECT Name FROM technician ORDER BY Age ASC,* (Table: repair_assignment) | repair_ID (Table: repair) | name (Table: repair) | Launch_Date (Table: repair) | Notes (Table: repair) | Machine_ID (Table: machine) | Making_Year (Table: machine) | Class (Table: machine) | Team (Table: machine) | Machine_series (Table: machine) | value_points (Table: machine) | quality_rank (Table: machine) | technician_id (Table: technician) | Name (Table: technician) | Team (Table: technician) | Starting_Year (Table: technician) | Age (Table: technician) | technician_id (Table: repair_assignment) | repair_ID (Table: repair_assignment) | Machine_ID (Table: repair_assignment)
What are the investors that have invested in at least two entrepreneurs?,SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2,* (Table: people) | Entrepreneur_ID (Table: entrepreneur) | People_ID (Table: entrepreneur) | Company (Table: entrepreneur) | Money_Requested (Table: entrepreneur) | Investor (Table: entrepreneur) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Date_of_Birth (Table: people)
What are names and savings balances of the three accounts with the highest savings balances?,"SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",* (Table: CHECKING) | custid (Table: ACCOUNTS) | name (Table: ACCOUNTS) | custid (Table: SAVINGS) | balance (Table: SAVINGS) | custid (Table: CHECKING) | balance (Table: CHECKING)
What are the first names and last names of students with address in Wisconsin state?,"SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  ""Wisconsin""",* (Table: Students_in_Detention) | address_type_code (Table: Ref_Address_Types) | address_type_description (Table: Ref_Address_Types) | detention_type_code (Table: Ref_Detention_Type) | detention_type_description (Table: Ref_Detention_Type) | incident_type_code (Table: Ref_Incident_Type) | incident_type_description (Table: Ref_Incident_Type) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | line_3 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | student_id (Table: Students) | address_id (Table: Students) | first_name (Table: Students) | middle_name (Table: Students) | last_name (Table: Students) | cell_mobile_number (Table: Students) | email_address (Table: Students) | date_first_rental (Table: Students) | date_left_university (Table: Students) | other_student_details (Table: Students) | teacher_id (Table: Teachers) | address_id (Table: Teachers) | first_name (Table: Teachers) | middle_name (Table: Teachers) | last_name (Table: Teachers) | gender (Table: Teachers) | cell_mobile_number (Table: Teachers) | email_address (Table: Teachers) | other_details (Table: Teachers) | notes_id (Table: Assessment_Notes) | student_id (Table: Assessment_Notes) | teacher_id (Table: Assessment_Notes) | date_of_notes (Table: Assessment_Notes) | text_of_notes (Table: Assessment_Notes) | other_details (Table: Assessment_Notes) | incident_id (Table: Behavior_Incident) | incident_type_code (Table: Behavior_Incident) | student_id (Table: Behavior_Incident) | date_incident_start (Table: Behavior_Incident) | date_incident_end (Table: Behavior_Incident) | incident_summary (Table: Behavior_Incident) | recommendations (Table: Behavior_Incident) | other_details (Table: Behavior_Incident) | detention_id (Table: Detention) | detention_type_code (Table: Detention) | teacher_id (Table: Detention) | datetime_detention_start (Table: Detention) | datetime_detention_end (Table: Detention) | detention_summary (Table: Detention) | other_details (Table: Detention) | student_id (Table: Student_Addresses) | address_id (Table: Student_Addresses) | date_address_from (Table: Student_Addresses) | date_address_to (Table: Student_Addresses) | monthly_rental (Table: Student_Addresses) | other_details (Table: Student_Addresses) | student_id (Table: Students_in_Detention) | detention_id (Table: Students_in_Detention) | incident_id (Table: Students_in_Detention)
Find the number of items that did not receive any review.,SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review),* (Table: trust) | i_id (Table: item) | title (Table: item) | a_id (Table: review) | u_id (Table: review) | i_id (Table: review) | rating (Table: review) | rank (Table: review) | u_id (Table: useracct) | name (Table: useracct) | source_u_id (Table: trust) | target_u_id (Table: trust) | trust (Table: trust)
"What are the distinct first names, last names, and phone numbers for customers with accounts?","SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
What is the invoice number and invoice date for the invoice with most number of transactions?,"SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
What roles did staff members play between '2003-04-19 15:06:20' and '2016-03-15 00:33:18'?,SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18',* (Table: Tasks) | document_type_code (Table: Document_Types) | document_description (Table: Document_Types) | document_id (Table: Documents) | document_type_code (Table: Documents) | grant_id (Table: Documents) | sent_date (Table: Documents) | response_received_date (Table: Documents) | other_details (Table: Documents) | grant_id (Table: Grants) | organisation_id (Table: Grants) | grant_amount (Table: Grants) | grant_start_date (Table: Grants) | grant_end_date (Table: Grants) | other_details (Table: Grants) | organisation_type (Table: Organisation_Types) | organisation_type_description (Table: Organisation_Types) | organisation_id (Table: Organisations) | organisation_type (Table: Organisations) | organisation_details (Table: Organisations) | project_id (Table: Project_Outcomes) | outcome_code (Table: Project_Outcomes) | outcome_details (Table: Project_Outcomes) | staff_id (Table: Project_Staff) | project_id (Table: Project_Staff) | role_code (Table: Project_Staff) | date_from (Table: Project_Staff) | date_to (Table: Project_Staff) | other_details (Table: Project_Staff) | project_id (Table: Projects) | organisation_id (Table: Projects) | project_details (Table: Projects) | outcome_code (Table: Research_Outcomes) | outcome_description (Table: Research_Outcomes) | staff_id (Table: Research_Staff) | employer_organisation_id (Table: Research_Staff) | staff_details (Table: Research_Staff) | role_code (Table: Staff_Roles) | role_description (Table: Staff_Roles) | task_id (Table: Tasks) | project_id (Table: Tasks) | task_details (Table: Tasks) | eg Agree Objectives (Table: Tasks)
What are the names of all employees who have a salary higher than average?,SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee),* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
What is the song with the most vocals?,SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1,* (Table: Vocals) | SongId (Table: Songs) | Title (Table: Songs) | AId (Table: Albums) | Title (Table: Albums) | Year (Table: Albums) | Label (Table: Albums) | Type (Table: Albums) | Id (Table: Band) | Firstname (Table: Band) | Lastname (Table: Band) | SongId (Table: Instruments) | BandmateId (Table: Instruments) | Instrument (Table: Instruments) | SongId (Table: Performance) | Bandmate (Table: Performance) | StagePosition (Table: Performance) | AlbumId (Table: Tracklists) | Position (Table: Tracklists) | SongId (Table: Tracklists) | SongId (Table: Vocals) | Bandmate (Table: Vocals) | Type (Table: Vocals)
How many schools have students playing in goalie and mid-field positions?,SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'),* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
What are the dates in which the mean sea level pressure was between 30.3 and 31?,SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31,* (Table: weather) | id (Table: station) | name (Table: station) | lat (Table: station) | long (Table: station) | dock_count (Table: station) | city (Table: station) | installation_date (Table: station) | station_id (Table: status) | bikes_available (Table: status) | docks_available (Table: status) | time (Table: status) | id (Table: trip) | duration (Table: trip) | start_date (Table: trip) | start_station_name (Table: trip) | start_station_id (Table: trip) | end_date (Table: trip) | end_station_name (Table: trip) | end_station_id (Table: trip) | bike_id (Table: trip) | subscription_type (Table: trip) | zip_code (Table: trip) | date (Table: weather) | max_temperature_f (Table: weather) | mean_temperature_f (Table: weather) | min_temperature_f (Table: weather) | max_dew_point_f (Table: weather) | mean_dew_point_f (Table: weather) | min_dew_point_f (Table: weather) | max_humidity (Table: weather) | mean_humidity (Table: weather) | min_humidity (Table: weather) | max_sea_level_pressure_inches (Table: weather) | mean_sea_level_pressure_inches (Table: weather) | min_sea_level_pressure_inches (Table: weather) | max_visibility_miles (Table: weather) | mean_visibility_miles (Table: weather) | min_visibility_miles (Table: weather) | max_wind_Speed_mph (Table: weather) | mean_wind_speed_mph (Table: weather) | max_gust_speed_mph (Table: weather) | precipitation_inches (Table: weather) | cloud_cover (Table: weather) | events (Table: weather) | wind_dir_degrees (Table: weather) | zip_code (Table: weather)
What is the complete description of the job of a researcher?,SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher',* (Table: Tasks) | document_type_code (Table: Document_Types) | document_description (Table: Document_Types) | document_id (Table: Documents) | document_type_code (Table: Documents) | grant_id (Table: Documents) | sent_date (Table: Documents) | response_received_date (Table: Documents) | other_details (Table: Documents) | grant_id (Table: Grants) | organisation_id (Table: Grants) | grant_amount (Table: Grants) | grant_start_date (Table: Grants) | grant_end_date (Table: Grants) | other_details (Table: Grants) | organisation_type (Table: Organisation_Types) | organisation_type_description (Table: Organisation_Types) | organisation_id (Table: Organisations) | organisation_type (Table: Organisations) | organisation_details (Table: Organisations) | project_id (Table: Project_Outcomes) | outcome_code (Table: Project_Outcomes) | outcome_details (Table: Project_Outcomes) | staff_id (Table: Project_Staff) | project_id (Table: Project_Staff) | role_code (Table: Project_Staff) | date_from (Table: Project_Staff) | date_to (Table: Project_Staff) | other_details (Table: Project_Staff) | project_id (Table: Projects) | organisation_id (Table: Projects) | project_details (Table: Projects) | outcome_code (Table: Research_Outcomes) | outcome_description (Table: Research_Outcomes) | staff_id (Table: Research_Staff) | employer_organisation_id (Table: Research_Staff) | staff_details (Table: Research_Staff) | role_code (Table: Staff_Roles) | role_description (Table: Staff_Roles) | task_id (Table: Tasks) | project_id (Table: Tasks) | task_details (Table: Tasks) | eg Agree Objectives (Table: Tasks)
Find the number of complaints with Product Failure type for each complaint status.,"SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  ""Product Failure"" GROUP BY complaint_status_code",* (Table: Complaints) | staff_id (Table: Staff) | gender (Table: Staff) | first_name (Table: Staff) | last_name (Table: Staff) | email_address (Table: Staff) | phone_number (Table: Staff) | customer_id (Table: Customers) | customer_type_code (Table: Customers) | address_line_1 (Table: Customers) | address_line_2 (Table: Customers) | town_city (Table: Customers) | state (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | product_id (Table: Products) | parent_product_id (Table: Products) | product_category_code (Table: Products) | date_product_first_available (Table: Products) | date_product_discontinued (Table: Products) | product_name (Table: Products) | product_description (Table: Products) | product_price (Table: Products) | complaint_id (Table: Complaints) | product_id (Table: Complaints) | customer_id (Table: Complaints) | complaint_outcome_code (Table: Complaints) | complaint_status_code (Table: Complaints) | complaint_type_code (Table: Complaints) | date_complaint_raised (Table: Complaints) | date_complaint_closed (Table: Complaints) | staff_id (Table: Complaints)
"How many customers are living in city ""Lake Geovannyton""?","SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  ""Lake Geovannyton""",* (Table: Order_Items) | address_id (Table: Addresses) | address_content (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | product_id (Table: Products) | product_details (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | date_became_customer (Table: Customers) | other_customer_details (Table: Customers) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | customer_id (Table: Customer_Contact_Channels) | channel_code (Table: Customer_Contact_Channels) | active_from_date (Table: Customer_Contact_Channels) | active_to_date (Table: Customer_Contact_Channels) | contact_number (Table: Customer_Contact_Channels) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status (Table: Customer_Orders) | order_date (Table: Customer_Orders) | order_details (Table: Customer_Orders) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | order_quantity (Table: Order_Items)
What is the receipt date of the document with id 3?,SELECT receipt_date FROM Documents WHERE document_id = 3;,* (Table: Documents_Mailed) | document_type_code (Table: Ref_Document_Types) | document_type_description (Table: Ref_Document_Types) | role_code (Table: Roles) | role_description (Table: Roles) | address_id (Table: Addresses) | address_details (Table: Addresses) | document_status_code (Table: Ref_Document_Status) | document_status_description (Table: Ref_Document_Status) | shipping_agent_code (Table: Ref_Shipping_Agents) | shipping_agent_name (Table: Ref_Shipping_Agents) | shipping_agent_description (Table: Ref_Shipping_Agents) | document_id (Table: Documents) | document_status_code (Table: Documents) | document_type_code (Table: Documents) | shipping_agent_code (Table: Documents) | receipt_date (Table: Documents) | receipt_number (Table: Documents) | other_details (Table: Documents) | employee_id (Table: Employees) | role_code (Table: Employees) | employee_name (Table: Employees) | other_details (Table: Employees) | document_id (Table: Document_Drafts) | draft_number (Table: Document_Drafts) | draft_details (Table: Document_Drafts) | document_id (Table: Draft_Copies) | draft_number (Table: Draft_Copies) | copy_number (Table: Draft_Copies) | document_id (Table: Circulation_History) | draft_number (Table: Circulation_History) | copy_number (Table: Circulation_History) | employee_id (Table: Circulation_History) | document_id (Table: Documents_Mailed) | mailed_to_address_id (Table: Documents_Mailed) | mailing_date (Table: Documents_Mailed)
"Return the minimum, maximum, and average seating across all tracks.","SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track",* (Table: track) | Race_ID (Table: race) | Name (Table: race) | Class (Table: race) | Date (Table: race) | Track_ID (Table: race) | Track_ID (Table: track) | Name (Table: track) | Location (Table: track) | Seating (Table: track) | Year_Opened (Table: track)
"What are each document's location code, and starting date and ending data in that location?","SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations",* (Table: Documents_to_be_Destroyed) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Calendar_Date (Table: Ref_Calendar) | Day_Number (Table: Ref_Calendar) | Location_Code (Table: Ref_Locations) | Location_Name (Table: Ref_Locations) | Location_Description (Table: Ref_Locations) | Role_Code (Table: Roles) | Role_Name (Table: Roles) | Role_Description (Table: Roles) | Document_ID (Table: All_Documents) | Date_Stored (Table: All_Documents) | Document_Type_Code (Table: All_Documents) | Document_Name (Table: All_Documents) | Document_Description (Table: All_Documents) | Other_Details (Table: All_Documents) | Employee_ID (Table: Employees) | Role_Code (Table: Employees) | Employee_Name (Table: Employees) | Gender_MFU (Table: Employees) | Date_of_Birth (Table: Employees) | Other_Details (Table: Employees) | Document_ID (Table: Document_Locations) | Location_Code (Table: Document_Locations) | Date_in_Location_From (Table: Document_Locations) | Date_in_Locaton_To (Table: Document_Locations) | Document_ID (Table: Documents_to_be_Destroyed) | Destruction_Authorised_by_Employee_ID (Table: Documents_to_be_Destroyed) | Destroyed_by_Employee_ID (Table: Documents_to_be_Destroyed) | Planned_Destruction_Date (Table: Documents_to_be_Destroyed) | Actual_Destruction_Date (Table: Documents_to_be_Destroyed) | Other_Details (Table: Documents_to_be_Destroyed)
How many routes does American Airlines operate?,SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines',* (Table: airlines) | rid (Table: routes) | dst_apid (Table: routes) | dst_ap (Table: routes) | src_apid (Table: routes) | src_ap (Table: routes) | alid (Table: routes) | airline (Table: routes) | codeshare (Table: routes) | apid (Table: airports) | name (Table: airports) | city (Table: airports) | country (Table: airports) | x (Table: airports) | y (Table: airports) | elevation (Table: airports) | iata (Table: airports) | icao (Table: airports) | alid (Table: airlines) | name (Table: airlines) | iata (Table: airlines) | icao (Table: airlines) | callsign (Table: airlines) | country (Table: airlines) | active (Table: airlines)
"Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled.","SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1",* (Table: Payments) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Policy_ID (Table: Customer_Policies) | Customer_ID (Table: Customer_Policies) | Policy_Type_Code (Table: Customer_Policies) | Start_Date (Table: Customer_Policies) | End_Date (Table: Customer_Policies) | Claim_ID (Table: Claims) | Policy_ID (Table: Claims) | Date_Claim_Made (Table: Claims) | Date_Claim_Settled (Table: Claims) | Amount_Claimed (Table: Claims) | Amount_Settled (Table: Claims) | Settlement_ID (Table: Settlements) | Claim_ID (Table: Settlements) | Date_Claim_Made (Table: Settlements) | Date_Claim_Settled (Table: Settlements) | Amount_Claimed (Table: Settlements) | Amount_Settled (Table: Settlements) | Customer_Policy_ID (Table: Settlements) | Payment_ID (Table: Payments) | Settlement_ID (Table: Payments) | Payment_Method_Code (Table: Payments) | Date_Payment_Made (Table: Payments) | Amount_Payment (Table: Payments)
"Which buildings does ""Emma"" manage? Give me the short names of the buildings.","SELECT building_short_name FROM Apartment_Buildings WHERE building_manager	 =  ""Emma""",* (Table: View_Unit_Status) | building_id (Table: Apartment_Buildings) | building_short_name (Table: Apartment_Buildings) | building_full_name (Table: Apartment_Buildings) | building_description (Table: Apartment_Buildings) | building_address (Table: Apartment_Buildings) | building_manager (Table: Apartment_Buildings) | building_phone (Table: Apartment_Buildings) | apt_id (Table: Apartments) | building_id (Table: Apartments) | apt_type_code (Table: Apartments) | apt_number (Table: Apartments) | bathroom_count (Table: Apartments) | bedroom_count (Table: Apartments) | room_count (Table: Apartments) | apt_id (Table: Apartment_Facilities) | facility_code (Table: Apartment_Facilities) | guest_id (Table: Guests) | gender_code (Table: Guests) | guest_first_name (Table: Guests) | guest_last_name (Table: Guests) | date_of_birth (Table: Guests) | apt_booking_id (Table: Apartment_Bookings) | apt_id (Table: Apartment_Bookings) | guest_id (Table: Apartment_Bookings) | booking_status_code (Table: Apartment_Bookings) | booking_start_date (Table: Apartment_Bookings) | booking_end_date (Table: Apartment_Bookings) | apt_id (Table: View_Unit_Status) | apt_booking_id (Table: View_Unit_Status) | status_date (Table: View_Unit_Status) | available_yn (Table: View_Unit_Status)
Return the names of artists and the themes of their exhibitions that had a ticket price higher than average.,"SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)",* (Table: exhibition_record) | Artist_ID (Table: artist) | Name (Table: artist) | Country (Table: artist) | Year_Join (Table: artist) | Age (Table: artist) | Exhibition_ID (Table: exhibition) | Year (Table: exhibition) | Theme (Table: exhibition) | Artist_ID (Table: exhibition) | Ticket_Price (Table: exhibition) | Exhibition_ID (Table: exhibition_record) | Date (Table: exhibition_record) | Attendance (Table: exhibition_record)
Which county has the largest population? Give me the name of the county.,SELECT County_name FROM county ORDER BY Population DESC LIMIT 1,* (Table: election) | County_Id (Table: county) | County_name (Table: county) | Population (Table: county) | Zip_code (Table: county) | Party_ID (Table: party) | Year (Table: party) | Party (Table: party) | Governor (Table: party) | Lieutenant_Governor (Table: party) | Comptroller (Table: party) | Attorney_General (Table: party) | US_Senate (Table: party) | Election_ID (Table: election) | Counties_Represented (Table: election) | District (Table: election) | Delegate (Table: election) | Party (Table: election) | First_Elected (Table: election) | Committee (Table: election)
How many hosts does each nationality have? List the nationality and the count.,"SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality",* (Table: party_host) | Party_ID (Table: party) | Party_Theme (Table: party) | Location (Table: party) | First_year (Table: party) | Last_year (Table: party) | Number_of_hosts (Table: party) | Host_ID (Table: host) | Name (Table: host) | Nationality (Table: host) | Age (Table: host) | Party_ID (Table: party_host) | Host_ID (Table: party_host) | Is_Main_in_Charge (Table: party_host)
Return the name and id of the furniture with the highest market rate.,"SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1",* (Table: furniture_manufacte) | Manufacturer_ID (Table: manufacturer) | Open_Year (Table: manufacturer) | Name (Table: manufacturer) | Num_of_Factories (Table: manufacturer) | Num_of_Shops (Table: manufacturer) | Furniture_ID (Table: furniture) | Name (Table: furniture) | Num_of_Component (Table: furniture) | Market_Rate (Table: furniture) | Manufacturer_ID (Table: furniture_manufacte) | Furniture_ID (Table: furniture_manufacte) | Price_in_Dollar (Table: furniture_manufacte)
What are the names of the technicians that are assigned to repair machines with more point values than 70?,SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70,* (Table: repair_assignment) | repair_ID (Table: repair) | name (Table: repair) | Launch_Date (Table: repair) | Notes (Table: repair) | Machine_ID (Table: machine) | Making_Year (Table: machine) | Class (Table: machine) | Team (Table: machine) | Machine_series (Table: machine) | value_points (Table: machine) | quality_rank (Table: machine) | technician_id (Table: technician) | Name (Table: technician) | Team (Table: technician) | Starting_Year (Table: technician) | Age (Table: technician) | technician_id (Table: repair_assignment) | repair_ID (Table: repair_assignment) | Machine_ID (Table: repair_assignment)
"For each staff id, what is the description of the role that is involved with the most number of projects?","SELECT T1.role_description ,  T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1",* (Table: Tasks) | document_type_code (Table: Document_Types) | document_description (Table: Document_Types) | document_id (Table: Documents) | document_type_code (Table: Documents) | grant_id (Table: Documents) | sent_date (Table: Documents) | response_received_date (Table: Documents) | other_details (Table: Documents) | grant_id (Table: Grants) | organisation_id (Table: Grants) | grant_amount (Table: Grants) | grant_start_date (Table: Grants) | grant_end_date (Table: Grants) | other_details (Table: Grants) | organisation_type (Table: Organisation_Types) | organisation_type_description (Table: Organisation_Types) | organisation_id (Table: Organisations) | organisation_type (Table: Organisations) | organisation_details (Table: Organisations) | project_id (Table: Project_Outcomes) | outcome_code (Table: Project_Outcomes) | outcome_details (Table: Project_Outcomes) | staff_id (Table: Project_Staff) | project_id (Table: Project_Staff) | role_code (Table: Project_Staff) | date_from (Table: Project_Staff) | date_to (Table: Project_Staff) | other_details (Table: Project_Staff) | project_id (Table: Projects) | organisation_id (Table: Projects) | project_details (Table: Projects) | outcome_code (Table: Research_Outcomes) | outcome_description (Table: Research_Outcomes) | staff_id (Table: Research_Staff) | employer_organisation_id (Table: Research_Staff) | staff_details (Table: Research_Staff) | role_code (Table: Staff_Roles) | role_description (Table: Staff_Roles) | task_id (Table: Tasks) | project_id (Table: Tasks) | task_details (Table: Tasks) | eg Agree Objectives (Table: Tasks)
What are the names of tourist attraction that Alison visited but Rosalind did not visit?,"SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  ""Alison"" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  ""Rosalind""",* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
What is the maximum stars and year for the most recent movie?,"SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)",* (Table: Rating) | mID (Table: Movie) | title (Table: Movie) | year (Table: Movie) | director (Table: Movie) | rID (Table: Reviewer) | name (Table: Reviewer) | rID (Table: Rating) | mID (Table: Rating) | stars (Table: Rating) | ratingDate (Table: Rating)
Find the name of product that is produced by both companies Creative Labs and Sony.,SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony',* (Table: Products) | Code (Table: Manufacturers) | Name (Table: Manufacturers) | Headquarter (Table: Manufacturers) | Founder (Table: Manufacturers) | Revenue (Table: Manufacturers) | Code (Table: Products) | Name (Table: Products) | Price (Table: Products) | Manufacturer (Table: Products)
List the name of staff who has been assigned multiple jobs.,SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1,* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
Count the number of customers recorded.,SELECT count(*) FROM CUSTOMERS,* (Table: Invoice_Items) | payment_method_code (Table: Ref_Payment_Methods) | payment_method_description (Table: Ref_Payment_Methods) | Service_Type_Code (Table: Ref_Service_Types) | Parent_Service_Type_Code (Table: Ref_Service_Types) | Service_Type_Description (Table: Ref_Service_Types) | Address_ID (Table: Addresses) | Line_1 (Table: Addresses) | Line_2 (Table: Addresses) | City_Town (Table: Addresses) | State_County (Table: Addresses) | Other_Details (Table: Addresses) | Product_ID (Table: Products) | Product_Name (Table: Products) | Product_Price (Table: Products) | Product_Description (Table: Products) | Other_Product_Service_Details (Table: Products) | Marketing_Region_Code (Table: Marketing_Regions) | Marketing_Region_Name (Table: Marketing_Regions) | Marketing_Region_Descriptrion (Table: Marketing_Regions) | Other_Details (Table: Marketing_Regions) | Client_ID (Table: Clients) | Address_ID (Table: Clients) | Customer_Email_Address (Table: Clients) | Customer_Name (Table: Clients) | Customer_Phone (Table: Clients) | Other_Details (Table: Clients) | Workshop_Group_ID (Table: Drama_Workshop_Groups) | Address_ID (Table: Drama_Workshop_Groups) | Currency_Code (Table: Drama_Workshop_Groups) | Marketing_Region_Code (Table: Drama_Workshop_Groups) | Store_Name (Table: Drama_Workshop_Groups) | Store_Phone (Table: Drama_Workshop_Groups) | Store_Email_Address (Table: Drama_Workshop_Groups) | Other_Details (Table: Drama_Workshop_Groups) | Performer_ID (Table: Performers) | Address_ID (Table: Performers) | Customer_Name (Table: Performers) | Customer_Phone (Table: Performers) | Customer_Email_Address (Table: Performers) | Other_Details (Table: Performers) | Customer_ID (Table: Customers) | Address_ID (Table: Customers) | Customer_Name (Table: Customers) | Customer_Phone (Table: Customers) | Customer_Email_Address (Table: Customers) | Other_Details (Table: Customers) | Store_ID (Table: Stores) | Address_ID (Table: Stores) | Marketing_Region_Code (Table: Stores) | Store_Name (Table: Stores) | Store_Phone (Table: Stores) | Store_Email_Address (Table: Stores) | Other_Details (Table: Stores) | Booking_ID (Table: Bookings) | Customer_ID (Table: Bookings) | Workshop_Group_ID (Table: Bookings) | Status_Code (Table: Bookings) | Store_ID (Table: Bookings) | Order_Date (Table: Bookings) | Planned_Delivery_Date (Table: Bookings) | Actual_Delivery_Date (Table: Bookings) | Other_Order_Details (Table: Bookings) | Order_ID (Table: Performers_in_Bookings) | Performer_ID (Table: Performers_in_Bookings) | Order_ID (Table: Customer_Orders) | Customer_ID (Table: Customer_Orders) | Store_ID (Table: Customer_Orders) | Order_Date (Table: Customer_Orders) | Planned_Delivery_Date (Table: Customer_Orders) | Actual_Delivery_Date (Table: Customer_Orders) | Other_Order_Details (Table: Customer_Orders) | Order_Item_ID (Table: Order_Items) | Order_ID (Table: Order_Items) | Product_ID (Table: Order_Items) | Order_Quantity (Table: Order_Items) | Other_Item_Details (Table: Order_Items) | Invoice_ID (Table: Invoices) | Order_ID (Table: Invoices) | payment_method_code (Table: Invoices) | Product_ID (Table: Invoices) | Order_Quantity (Table: Invoices) | Other_Item_Details (Table: Invoices) | Order_Item_ID (Table: Invoices) | Service_ID (Table: Services) | Service_Type_Code (Table: Services) | Workshop_Group_ID (Table: Services) | Product_Description (Table: Services) | Product_Name (Table: Services) | Product_Price (Table: Services) | Other_Product_Service_Details (Table: Services) | Order_ID (Table: Bookings_Services) | Product_ID (Table: Bookings_Services) | Invoice_Item_ID (Table: Invoice_Items) | Invoice_ID (Table: Invoice_Items) | Order_ID (Table: Invoice_Items) | Order_Item_ID (Table: Invoice_Items) | Product_ID (Table: Invoice_Items) | Order_Quantity (Table: Invoice_Items) | Other_Item_Details (Table: Invoice_Items)
Show the name of the county with the biggest population.,SELECT County_name FROM county ORDER BY Population DESC LIMIT 1,* (Table: election) | County_Id (Table: county) | County_name (Table: county) | Population (Table: county) | Zip_code (Table: county) | Party_ID (Table: party) | Year (Table: party) | Party (Table: party) | Governor (Table: party) | Lieutenant_Governor (Table: party) | Comptroller (Table: party) | Attorney_General (Table: party) | US_Senate (Table: party) | Election_ID (Table: election) | Counties_Represented (Table: election) | District (Table: election) | Delegate (Table: election) | Party (Table: election) | First_Elected (Table: election) | Committee (Table: election)
Show the ids of students whose advisors are professors.,"SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  ""Professor""",* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.,SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith',* (Table: AssignedTo) | SSN (Table: Scientists) | Name (Table: Scientists) | Code (Table: Projects) | Name (Table: Projects) | Hours (Table: Projects) | Scientist (Table: AssignedTo) | Project (Table: AssignedTo)
Find the year and semester when offers the largest number of courses.,"SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Count the number of wines produced at Robert Biale winery.,"SELECT count(*) FROM WINE WHERE Winery  =  ""Robert Biale""",* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.,"SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
What is the number of states that has some college whose enrollment is larger than the average enrollment?,SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college),* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.,"SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
Find the cities corresponding to employees who help customers with the postal code 70174.,"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  ""70174""",* (Table: Track) | AlbumId (Table: Album) | Title (Table: Album) | ArtistId (Table: Album) | ArtistId (Table: Artist) | Name (Table: Artist) | CustomerId (Table: Customer) | FirstName (Table: Customer) | LastName (Table: Customer) | Company (Table: Customer) | Address (Table: Customer) | City (Table: Customer) | State (Table: Customer) | Country (Table: Customer) | PostalCode (Table: Customer) | Phone (Table: Customer) | Fax (Table: Customer) | Email (Table: Customer) | SupportRepId (Table: Customer) | EmployeeId (Table: Employee) | LastName (Table: Employee) | FirstName (Table: Employee) | Title (Table: Employee) | ReportsTo (Table: Employee) | BirthDate (Table: Employee) | HireDate (Table: Employee) | Address (Table: Employee) | City (Table: Employee) | State (Table: Employee) | Country (Table: Employee) | PostalCode (Table: Employee) | Phone (Table: Employee) | Fax (Table: Employee) | Email (Table: Employee) | GenreId (Table: Genre) | Name (Table: Genre) | InvoiceId (Table: Invoice) | CustomerId (Table: Invoice) | InvoiceDate (Table: Invoice) | BillingAddress (Table: Invoice) | BillingCity (Table: Invoice) | BillingState (Table: Invoice) | BillingCountry (Table: Invoice) | BillingPostalCode (Table: Invoice) | Total (Table: Invoice) | InvoiceLineId (Table: InvoiceLine) | InvoiceId (Table: InvoiceLine) | TrackId (Table: InvoiceLine) | UnitPrice (Table: InvoiceLine) | Quantity (Table: InvoiceLine) | MediaTypeId (Table: MediaType) | Name (Table: MediaType) | PlaylistId (Table: Playlist) | Name (Table: Playlist) | PlaylistId (Table: PlaylistTrack) | TrackId (Table: PlaylistTrack) | TrackId (Table: Track) | Name (Table: Track) | AlbumId (Table: Track) | MediaTypeId (Table: Track) | GenreId (Table: Track) | Composer (Table: Track) | Milliseconds (Table: Track) | Bytes (Table: Track) | UnitPrice (Table: Track)
In how many different states are banks located?,SELECT count(DISTINCT state) FROM bank,* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?,"SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'",* (Table: medicine_enzyme_interaction) | id (Table: medicine) | name (Table: medicine) | Trade_Name (Table: medicine) | FDA_approved (Table: medicine) | id (Table: enzyme) | name (Table: enzyme) | Location (Table: enzyme) | Product (Table: enzyme) | Chromosome (Table: enzyme) | OMIM (Table: enzyme) | Porphyria (Table: enzyme) | enzyme_id (Table: medicine_enzyme_interaction) | medicine_id (Table: medicine_enzyme_interaction) | interaction_type (Table: medicine_enzyme_interaction)
"Return the addresses of the course authors or tutors whose personal name is ""Cathrine"".","SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name	 =  ""Cathrine""",* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
"What is the customer id, first and last name with most number of accounts.","SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.,"SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  ""Vincent"" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  ""Marcelle""",* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
What are the names of students who haven't taken any Biology courses?,SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology'),* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Which district has the largest population?,SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1,* (Table: store_district) | product_id (Table: product) | product (Table: product) | dimensions (Table: product) | dpi (Table: product) | pages_per_minute_color (Table: product) | max_page_size (Table: product) | interface (Table: product) | Store_ID (Table: store) | Store_Name (Table: store) | Type (Table: store) | Area_size (Table: store) | Number_of_product_category (Table: store) | Ranking (Table: store) | District_ID (Table: district) | District_name (Table: district) | Headquartered_City (Table: district) | City_Population (Table: district) | City_Area (Table: district) | Store_ID (Table: store_product) | Product_ID (Table: store_product) | Store_ID (Table: store_district) | District_ID (Table: store_district)
How many elections are there?,SELECT count(*) FROM election,* (Table: representative) | Election_ID (Table: election) | Representative_ID (Table: election) | Date (Table: election) | Votes (Table: election) | Vote_Percent (Table: election) | Seats (Table: election) | Place (Table: election) | Representative_ID (Table: representative) | Name (Table: representative) | State (Table: representative) | Party (Table: representative) | Lifespan (Table: representative)
How many students does one classroom have?,"SELECT count(*) ,  classroom FROM list GROUP BY classroom",* (Table: teachers) | LastName (Table: list) | FirstName (Table: list) | Grade (Table: list) | Classroom (Table: list) | LastName (Table: teachers) | FirstName (Table: teachers) | Classroom (Table: teachers)
What is the name and date of the most recent race?,"SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
"What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?","SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",* (Table: medicine_enzyme_interaction) | id (Table: medicine) | name (Table: medicine) | Trade_Name (Table: medicine) | FDA_approved (Table: medicine) | id (Table: enzyme) | name (Table: enzyme) | Location (Table: enzyme) | Product (Table: enzyme) | Chromosome (Table: enzyme) | OMIM (Table: enzyme) | Porphyria (Table: enzyme) | enzyme_id (Table: medicine_enzyme_interaction) | medicine_id (Table: medicine_enzyme_interaction) | interaction_type (Table: medicine_enzyme_interaction)
"What are the total points of gymnasts, ordered by their floor exercise points descending?",SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC,* (Table: people) | Gymnast_ID (Table: gymnast) | Floor_Exercise_Points (Table: gymnast) | Pommel_Horse_Points (Table: gymnast) | Rings_Points (Table: gymnast) | Vault_Points (Table: gymnast) | Parallel_Bars_Points (Table: gymnast) | Horizontal_Bar_Points (Table: gymnast) | Total_Points (Table: gymnast) | People_ID (Table: people) | Name (Table: people) | Age (Table: people) | Height (Table: people) | Hometown (Table: people)
What are all the distinct premise types?,SELECT DISTINCT premises_type FROM premises,* (Table: Order_Items) | premise_id (Table: Premises) | premises_type (Table: Premises) | premise_details (Table: Premises) | product_id (Table: Products) | product_category (Table: Products) | product_name (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | customer_address (Table: Customers) | customer_login (Table: Customers) | customer_password (Table: Customers) | mailshot_id (Table: Mailshot_Campaigns) | product_category (Table: Mailshot_Campaigns) | mailshot_name (Table: Mailshot_Campaigns) | mailshot_start_date (Table: Mailshot_Campaigns) | mailshot_end_date (Table: Mailshot_Campaigns) | customer_id (Table: Customer_Addresses) | premise_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type_code (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | shipping_method_code (Table: Customer_Orders) | order_placed_datetime (Table: Customer_Orders) | order_delivered_datetime (Table: Customer_Orders) | order_shipping_charges (Table: Customer_Orders) | mailshot_id (Table: Mailshot_Customers) | customer_id (Table: Mailshot_Customers) | outcome_code (Table: Mailshot_Customers) | mailshot_customer_date (Table: Mailshot_Customers) | item_id (Table: Order_Items) | order_item_status_code (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | item_status_code (Table: Order_Items) | item_delivered_datetime (Table: Order_Items) | item_order_quantity (Table: Order_Items)
Which customer is associated with the latest policy?,SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies),* (Table: Claims_Processing) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Staff_ID (Table: Staff) | Staff_Details (Table: Staff) | Policy_ID (Table: Policies) | Customer_ID (Table: Policies) | Policy_Type_Code (Table: Policies) | Start_Date (Table: Policies) | End_Date (Table: Policies) | Claim_Header_ID (Table: Claim_Headers) | Claim_Status_Code (Table: Claim_Headers) | Claim_Type_Code (Table: Claim_Headers) | Policy_ID (Table: Claim_Headers) | Date_of_Claim (Table: Claim_Headers) | Date_of_Settlement (Table: Claim_Headers) | Amount_Claimed (Table: Claim_Headers) | Amount_Piad (Table: Claim_Headers) | Claim_ID (Table: Claims_Documents) | Document_Type_Code (Table: Claims_Documents) | Created_by_Staff_ID (Table: Claims_Documents) | Created_Date (Table: Claims_Documents) | Claim_Stage_ID (Table: Claims_Processing_Stages) | Next_Claim_Stage_ID (Table: Claims_Processing_Stages) | Claim_Status_Name (Table: Claims_Processing_Stages) | Claim_Status_Description (Table: Claims_Processing_Stages) | Claim_Processing_ID (Table: Claims_Processing) | Claim_ID (Table: Claims_Processing) | Claim_Outcome_Code (Table: Claims_Processing) | Claim_Stage_ID (Table: Claims_Processing) | Staff_ID (Table: Claims_Processing)
Select the name and price of the cheapest product.,"SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1",* (Table: Products) | Code (Table: Manufacturers) | Name (Table: Manufacturers) | Headquarter (Table: Manufacturers) | Founder (Table: Manufacturers) | Revenue (Table: Manufacturers) | Code (Table: Products) | Name (Table: Products) | Price (Table: Products) | Manufacturer (Table: Products)
Find all the policy types that are used by more than 2 customers.,SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2,* (Table: Claims_Processing) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Staff_ID (Table: Staff) | Staff_Details (Table: Staff) | Policy_ID (Table: Policies) | Customer_ID (Table: Policies) | Policy_Type_Code (Table: Policies) | Start_Date (Table: Policies) | End_Date (Table: Policies) | Claim_Header_ID (Table: Claim_Headers) | Claim_Status_Code (Table: Claim_Headers) | Claim_Type_Code (Table: Claim_Headers) | Policy_ID (Table: Claim_Headers) | Date_of_Claim (Table: Claim_Headers) | Date_of_Settlement (Table: Claim_Headers) | Amount_Claimed (Table: Claim_Headers) | Amount_Piad (Table: Claim_Headers) | Claim_ID (Table: Claims_Documents) | Document_Type_Code (Table: Claims_Documents) | Created_by_Staff_ID (Table: Claims_Documents) | Created_Date (Table: Claims_Documents) | Claim_Stage_ID (Table: Claims_Processing_Stages) | Next_Claim_Stage_ID (Table: Claims_Processing_Stages) | Claim_Status_Name (Table: Claims_Processing_Stages) | Claim_Status_Description (Table: Claims_Processing_Stages) | Claim_Processing_ID (Table: Claims_Processing) | Claim_ID (Table: Claims_Processing) | Claim_Outcome_Code (Table: Claims_Processing) | Claim_Stage_ID (Table: Claims_Processing) | Staff_ID (Table: Claims_Processing)
How many students are affected by each allergy type?,"SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
List all media types.,SELECT name FROM media_types;,* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
Find the number of projects which each scientist is working on and scientist's name.,"SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name",* (Table: AssignedTo) | SSN (Table: Scientists) | Name (Table: Scientists) | Code (Table: Projects) | Name (Table: Projects) | Hours (Table: Projects) | Scientist (Table: AssignedTo) | Project (Table: AssignedTo)
What are the positions and teams of pilots?,"SELECT POSITION ,  Team FROM pilot",* (Table: pilot_record) | Aircraft_ID (Table: aircraft) | Order_Year (Table: aircraft) | Manufacturer (Table: aircraft) | Model (Table: aircraft) | Fleet_Series (Table: aircraft) | Powertrain (Table: aircraft) | Fuel_Propulsion (Table: aircraft) | Pilot_ID (Table: pilot) | Pilot_name (Table: pilot) | Rank (Table: pilot) | Age (Table: pilot) | Nationality (Table: pilot) | Position (Table: pilot) | Join_Year (Table: pilot) | Team (Table: pilot) | Record_ID (Table: pilot_record) | Pilot_ID (Table: pilot_record) | Aircraft_ID (Table: pilot_record) | Date (Table: pilot_record)
How many times in total did the team Boston Red Stockings participate in postseason games?,SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );,* (Table: team_half) | player_id (Table: all_star) | year (Table: all_star) | game_num (Table: all_star) | game_id (Table: all_star) | team_id (Table: all_star) | league_id (Table: all_star) | gp (Table: all_star) | starting_pos (Table: all_star) | year (Table: appearances) | team_id (Table: appearances) | league_id (Table: appearances) | player_id (Table: appearances) | g_all (Table: appearances) | gs (Table: appearances) | g_batting (Table: appearances) | g_defense (Table: appearances) | g_p (Table: appearances) | g_c (Table: appearances) | g_1b (Table: appearances) | g_2b (Table: appearances) | g_3b (Table: appearances) | g_ss (Table: appearances) | g_lf (Table: appearances) | g_cf (Table: appearances) | g_rf (Table: appearances) | g_of (Table: appearances) | g_dh (Table: appearances) | g_ph (Table: appearances) | g_pr (Table: appearances) | player_id (Table: manager_award) | award_id (Table: manager_award) | year (Table: manager_award) | league_id (Table: manager_award) | tie (Table: manager_award) | notes (Table: manager_award) | player_id (Table: player_award) | award_id (Table: player_award) | year (Table: player_award) | league_id (Table: player_award) | tie (Table: player_award) | notes (Table: player_award) | award_id (Table: manager_award_vote) | year (Table: manager_award_vote) | league_id (Table: manager_award_vote) | player_id (Table: manager_award_vote) | points_won (Table: manager_award_vote) | points_max (Table: manager_award_vote) | votes_first (Table: manager_award_vote) | award_id (Table: player_award_vote) | year (Table: player_award_vote) | league_id (Table: player_award_vote) | player_id (Table: player_award_vote) | points_won (Table: player_award_vote) | points_max (Table: player_award_vote) | votes_first (Table: player_award_vote) | player_id (Table: batting) | year (Table: batting) | stint (Table: batting) | team_id (Table: batting) | league_id (Table: batting) | g (Table: batting) | ab (Table: batting) | r (Table: batting) | h (Table: batting) | double (Table: batting) | triple (Table: batting) | hr (Table: batting) | rbi (Table: batting) | sb (Table: batting) | cs (Table: batting) | bb (Table: batting) | so (Table: batting) | ibb (Table: batting) | hbp (Table: batting) | sh (Table: batting) | sf (Table: batting) | g_idp (Table: batting) | year (Table: batting_postseason) | round (Table: batting_postseason) | player_id (Table: batting_postseason) | team_id (Table: batting_postseason) | league_id (Table: batting_postseason) | g (Table: batting_postseason) | ab (Table: batting_postseason) | r (Table: batting_postseason) | h (Table: batting_postseason) | double (Table: batting_postseason) | triple (Table: batting_postseason) | hr (Table: batting_postseason) | rbi (Table: batting_postseason) | sb (Table: batting_postseason) | cs (Table: batting_postseason) | bb (Table: batting_postseason) | so (Table: batting_postseason) | ibb (Table: batting_postseason) | hbp (Table: batting_postseason) | sh (Table: batting_postseason) | sf (Table: batting_postseason) | g_idp (Table: batting_postseason) | player_id (Table: player_college) | college_id (Table: player_college) | year (Table: player_college) | player_id (Table: fielding) | year (Table: fielding) | stint (Table: fielding) | team_id (Table: fielding) | league_id (Table: fielding) | pos (Table: fielding) | g (Table: fielding) | gs (Table: fielding) | inn_outs (Table: fielding) | po (Table: fielding) | a (Table: fielding) | e (Table: fielding) | dp (Table: fielding) | pb (Table: fielding) | wp (Table: fielding) | sb (Table: fielding) | cs (Table: fielding) | zr (Table: fielding) | player_id (Table: fielding_outfield) | year (Table: fielding_outfield) | stint (Table: fielding_outfield) | glf (Table: fielding_outfield) | gcf (Table: fielding_outfield) | grf (Table: fielding_outfield) | player_id (Table: fielding_postseason) | year (Table: fielding_postseason) | team_id (Table: fielding_postseason) | league_id (Table: fielding_postseason) | round (Table: fielding_postseason) | pos (Table: fielding_postseason) | g (Table: fielding_postseason) | gs (Table: fielding_postseason) | inn_outs (Table: fielding_postseason) | po (Table: fielding_postseason) | a (Table: fielding_postseason) | e (Table: fielding_postseason) | dp (Table: fielding_postseason) | tp (Table: fielding_postseason) | pb (Table: fielding_postseason) | sb (Table: fielding_postseason) | cs (Table: fielding_postseason) | player_id (Table: hall_of_fame) | yearid (Table: hall_of_fame) | votedby (Table: hall_of_fame) | ballots (Table: hall_of_fame) | needed (Table: hall_of_fame) | votes (Table: hall_of_fame) | inducted (Table: hall_of_fame) | category (Table: hall_of_fame) | needed_note (Table: hall_of_fame) | year (Table: home_game) | league_id (Table: home_game) | team_id (Table: home_game) | park_id (Table: home_game) | span_first (Table: home_game) | span_last (Table: home_game) | games (Table: home_game) | openings (Table: home_game) | attendance (Table: home_game) | player_id (Table: manager) | year (Table: manager) | team_id (Table: manager) | league_id (Table: manager) | inseason (Table: manager) | g (Table: manager) | w (Table: manager) | l (Table: manager) | rank (Table: manager) | plyr_mgr (Table: manager) | player_id (Table: manager_half) | year (Table: manager_half) | team_id (Table: manager_half) | league_id (Table: manager_half) | inseason (Table: manager_half) | half (Table: manager_half) | g (Table: manager_half) | w (Table: manager_half) | l (Table: manager_half) | rank (Table: manager_half) | player_id (Table: player) | birth_year (Table: player) | birth_month (Table: player) | birth_day (Table: player) | birth_country (Table: player) | birth_state (Table: player) | birth_city (Table: player) | death_year (Table: player) | death_month (Table: player) | death_day (Table: player) | death_country (Table: player) | death_state (Table: player) | death_city (Table: player) | name_first (Table: player) | name_last (Table: player) | name_given (Table: player) | weight (Table: player) | height (Table: player) | bats (Table: player) | throws (Table: player) | debut (Table: player) | final_game (Table: player) | retro_id (Table: player) | bbref_id (Table: player) | park_id (Table: park) | park_name (Table: park) | park_alias (Table: park) | city (Table: park) | state (Table: park) | country (Table: park) | player_id (Table: pitching) | year (Table: pitching) | stint (Table: pitching) | team_id (Table: pitching) | league_id (Table: pitching) | w (Table: pitching) | l (Table: pitching) | g (Table: pitching) | gs (Table: pitching) | cg (Table: pitching) | sho (Table: pitching) | sv (Table: pitching) | ipouts (Table: pitching) | h (Table: pitching) | er (Table: pitching) | hr (Table: pitching) | bb (Table: pitching) | so (Table: pitching) | baopp (Table: pitching) | era (Table: pitching) | ibb (Table: pitching) | wp (Table: pitching) | hbp (Table: pitching) | bk (Table: pitching) | bfp (Table: pitching) | gf (Table: pitching) | r (Table: pitching) | sh (Table: pitching) | sf (Table: pitching) | g_idp (Table: pitching) | player_id (Table: pitching_postseason) | year (Table: pitching_postseason) | round (Table: pitching_postseason) | team_id (Table: pitching_postseason) | league_id (Table: pitching_postseason) | w (Table: pitching_postseason) | l (Table: pitching_postseason) | g (Table: pitching_postseason) | gs (Table: pitching_postseason) | cg (Table: pitching_postseason) | sho (Table: pitching_postseason) | sv (Table: pitching_postseason) | ipouts (Table: pitching_postseason) | h (Table: pitching_postseason) | er (Table: pitching_postseason) | hr (Table: pitching_postseason) | bb (Table: pitching_postseason) | so (Table: pitching_postseason) | baopp (Table: pitching_postseason) | era (Table: pitching_postseason) | ibb (Table: pitching_postseason) | wp (Table: pitching_postseason) | hbp (Table: pitching_postseason) | bk (Table: pitching_postseason) | bfp (Table: pitching_postseason) | gf (Table: pitching_postseason) | r (Table: pitching_postseason) | sh (Table: pitching_postseason) | sf (Table: pitching_postseason) | g_idp (Table: pitching_postseason) | year (Table: salary) | team_id (Table: salary) | league_id (Table: salary) | player_id (Table: salary) | salary (Table: salary) | college_id (Table: college) | name_full (Table: college) | city (Table: college) | state (Table: college) | country (Table: college) | year (Table: postseason) | round (Table: postseason) | team_id_winner (Table: postseason) | league_id_winner (Table: postseason) | team_id_loser (Table: postseason) | league_id_loser (Table: postseason) | wins (Table: postseason) | losses (Table: postseason) | ties (Table: postseason) | year (Table: team) | league_id (Table: team) | team_id (Table: team) | franchise_id (Table: team) | div_id (Table: team) | rank (Table: team) | g (Table: team) | ghome (Table: team) | w (Table: team) | l (Table: team) | div_win (Table: team) | wc_win (Table: team) | lg_win (Table: team) | ws_win (Table: team) | r (Table: team) | ab (Table: team) | h (Table: team) | double (Table: team) | triple (Table: team) | hr (Table: team) | bb (Table: team) | so (Table: team) | sb (Table: team) | cs (Table: team) | hbp (Table: team) | sf (Table: team) | ra (Table: team) | er (Table: team) | era (Table: team) | cg (Table: team) | sho (Table: team) | sv (Table: team) | ipouts (Table: team) | ha (Table: team) | hra (Table: team) | bba (Table: team) | soa (Table: team) | e (Table: team) | dp (Table: team) | fp (Table: team) | name (Table: team) | park (Table: team) | attendance (Table: team) | bpf (Table: team) | ppf (Table: team) | team_id_br (Table: team) | team_id_lahman45 (Table: team) | team_id_retro (Table: team) | franchise_id (Table: team_franchise) | franchise_name (Table: team_franchise) | active (Table: team_franchise) | na_assoc (Table: team_franchise) | year (Table: team_half) | league_id (Table: team_half) | team_id (Table: team_half) | half (Table: team_half) | div_id (Table: team_half) | div_win (Table: team_half) | rank (Table: team_half) | g (Table: team_half) | w (Table: team_half) | l (Table: team_half)
Which faculty do not participate in any activity? Find their faculty ids.,SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in,* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
Which major has most number of students?,SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1,* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
What is the position that is most common among players in match seasons?,SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1,* (Table: player) | Country_id (Table: country) | Country_name (Table: country) | Capital (Table: country) | Official_native_language (Table: country) | Team_id (Table: team) | Name (Table: team) | Season (Table: match_season) | Player (Table: match_season) | Position (Table: match_season) | Country (Table: match_season) | Team (Table: match_season) | Draft_Pick_Number (Table: match_season) | Draft_Class (Table: match_season) | College (Table: match_season) | Player_ID (Table: player) | Player (Table: player) | Years_Played (Table: player) | Total_WL (Table: player) | Singles_WL (Table: player) | Doubles_WL (Table: player) | Team (Table: player)
"What are the names of departments either in division AS, or in division EN and in building NEB?","SELECT DName FROM DEPARTMENT WHERE Division  =  ""AS"" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  ""EN"" AND Building  =  ""NEB""",* (Table: Gradeconversion) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty) | DNO (Table: Department) | Division (Table: Department) | DName (Table: Department) | Room (Table: Department) | Building (Table: Department) | DPhone (Table: Department) | FacID (Table: Member_of) | DNO (Table: Member_of) | Appt_Type (Table: Member_of) | CID (Table: Course) | CName (Table: Course) | Credits (Table: Course) | Instructor (Table: Course) | Days (Table: Course) | Hours (Table: Course) | DNO (Table: Course) | StuID (Table: Minor_in) | DNO (Table: Minor_in) | StuID (Table: Enrolled_in) | CID (Table: Enrolled_in) | Grade (Table: Enrolled_in) | lettergrade (Table: Gradeconversion) | gradepoint (Table: Gradeconversion)
What is the product with the highest height? Give me the catalog entry name.,SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1,* (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Attribute_Definitions) | attribute_name (Table: Attribute_Definitions) | attribute_data_type (Table: Attribute_Definitions) | catalog_id (Table: Catalogs) | catalog_name (Table: Catalogs) | catalog_publisher (Table: Catalogs) | date_of_publication (Table: Catalogs) | date_of_latest_revision (Table: Catalogs) | catalog_level_number (Table: Catalog_Structure) | catalog_id (Table: Catalog_Structure) | catalog_level_name (Table: Catalog_Structure) | catalog_entry_id (Table: Catalog_Contents) | catalog_level_number (Table: Catalog_Contents) | parent_entry_id (Table: Catalog_Contents) | previous_entry_id (Table: Catalog_Contents) | next_entry_id (Table: Catalog_Contents) | catalog_entry_name (Table: Catalog_Contents) | product_stock_number (Table: Catalog_Contents) | price_in_dollars (Table: Catalog_Contents) | price_in_euros (Table: Catalog_Contents) | price_in_pounds (Table: Catalog_Contents) | capacity (Table: Catalog_Contents) | length (Table: Catalog_Contents) | height (Table: Catalog_Contents) | width (Table: Catalog_Contents) | catalog_entry_id (Table: Catalog_Contents_Additional_Attributes) | catalog_level_number (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Catalog_Contents_Additional_Attributes) | attribute_value (Table: Catalog_Contents_Additional_Attributes)
What is the storm name and max speed which affected the greatest number of regions?,"SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",* (Table: affected_region) | Storm_ID (Table: storm) | Name (Table: storm) | Dates_active (Table: storm) | Max_speed (Table: storm) | Damage_millions_USD (Table: storm) | Number_Deaths (Table: storm) | Region_id (Table: region) | Region_code (Table: region) | Region_name (Table: region) | Region_id (Table: affected_region) | Storm_ID (Table: affected_region) | Number_city_affected (Table: affected_region)
"For grants that have descriptions of Regular and Initial Applications, what are their start dates?",SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application',* (Table: Tasks) | document_type_code (Table: Document_Types) | document_description (Table: Document_Types) | document_id (Table: Documents) | document_type_code (Table: Documents) | grant_id (Table: Documents) | sent_date (Table: Documents) | response_received_date (Table: Documents) | other_details (Table: Documents) | grant_id (Table: Grants) | organisation_id (Table: Grants) | grant_amount (Table: Grants) | grant_start_date (Table: Grants) | grant_end_date (Table: Grants) | other_details (Table: Grants) | organisation_type (Table: Organisation_Types) | organisation_type_description (Table: Organisation_Types) | organisation_id (Table: Organisations) | organisation_type (Table: Organisations) | organisation_details (Table: Organisations) | project_id (Table: Project_Outcomes) | outcome_code (Table: Project_Outcomes) | outcome_details (Table: Project_Outcomes) | staff_id (Table: Project_Staff) | project_id (Table: Project_Staff) | role_code (Table: Project_Staff) | date_from (Table: Project_Staff) | date_to (Table: Project_Staff) | other_details (Table: Project_Staff) | project_id (Table: Projects) | organisation_id (Table: Projects) | project_details (Table: Projects) | outcome_code (Table: Research_Outcomes) | outcome_description (Table: Research_Outcomes) | staff_id (Table: Research_Staff) | employer_organisation_id (Table: Research_Staff) | staff_details (Table: Research_Staff) | role_code (Table: Staff_Roles) | role_description (Table: Staff_Roles) | task_id (Table: Tasks) | project_id (Table: Tasks) | task_details (Table: Tasks) | eg Agree Objectives (Table: Tasks)
Return the channel code and contact number of the customer contact channel whose active duration was the longest.,"SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",* (Table: Order_Items) | address_id (Table: Addresses) | address_content (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | product_id (Table: Products) | product_details (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | date_became_customer (Table: Customers) | other_customer_details (Table: Customers) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | customer_id (Table: Customer_Contact_Channels) | channel_code (Table: Customer_Contact_Channels) | active_from_date (Table: Customer_Contact_Channels) | active_to_date (Table: Customer_Contact_Channels) | contact_number (Table: Customer_Contact_Channels) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status (Table: Customer_Orders) | order_date (Table: Customer_Orders) | order_details (Table: Customer_Orders) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | order_quantity (Table: Order_Items)
"Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.","SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
"Return the completion date for all the tests that have ""Fail"" result.","SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  ""Fail""",* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
What is the department name of the students with lowest gpa belongs to?,SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1,* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
Which directors had a movie in either 1999 or 2000?,SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000,* (Table: culture_company) | book_club_id (Table: book_club) | Year (Table: book_club) | Author_or_Editor (Table: book_club) | Book_Title (Table: book_club) | Publisher (Table: book_club) | Category (Table: book_club) | Result (Table: book_club) | movie_id (Table: movie) | Title (Table: movie) | Year (Table: movie) | Director (Table: movie) | Budget_million (Table: movie) | Gross_worldwide (Table: movie) | Company_name (Table: culture_company) | Type (Table: culture_company) | Incorporated_in (Table: culture_company) | Group_Equity_Shareholding (Table: culture_company) | book_club_id (Table: culture_company) | movie_id (Table: culture_company)
Which catalog content has the highest height? Give me the catalog entry name.,SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1,* (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Attribute_Definitions) | attribute_name (Table: Attribute_Definitions) | attribute_data_type (Table: Attribute_Definitions) | catalog_id (Table: Catalogs) | catalog_name (Table: Catalogs) | catalog_publisher (Table: Catalogs) | date_of_publication (Table: Catalogs) | date_of_latest_revision (Table: Catalogs) | catalog_level_number (Table: Catalog_Structure) | catalog_id (Table: Catalog_Structure) | catalog_level_name (Table: Catalog_Structure) | catalog_entry_id (Table: Catalog_Contents) | catalog_level_number (Table: Catalog_Contents) | parent_entry_id (Table: Catalog_Contents) | previous_entry_id (Table: Catalog_Contents) | next_entry_id (Table: Catalog_Contents) | catalog_entry_name (Table: Catalog_Contents) | product_stock_number (Table: Catalog_Contents) | price_in_dollars (Table: Catalog_Contents) | price_in_euros (Table: Catalog_Contents) | price_in_pounds (Table: Catalog_Contents) | capacity (Table: Catalog_Contents) | length (Table: Catalog_Contents) | height (Table: Catalog_Contents) | width (Table: Catalog_Contents) | catalog_entry_id (Table: Catalog_Contents_Additional_Attributes) | catalog_level_number (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Catalog_Contents_Additional_Attributes) | attribute_value (Table: Catalog_Contents_Additional_Attributes)
List the first name of all employees with job code PROF ordered by their date of birth.,SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob,* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
What is the count of customers that Steve Johnson supports?,"SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = ""Steve"" AND T1.last_name = ""Johnson"";",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
What is the total rating of channel for each channel owner?,"SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER",* (Table: broadcast_share) | Program_ID (Table: program) | Name (Table: program) | Origin (Table: program) | Launch (Table: program) | Owner (Table: program) | Channel_ID (Table: channel) | Name (Table: channel) | Owner (Table: channel) | Share_in_percent (Table: channel) | Rating_in_percent (Table: channel) | Channel_ID (Table: broadcast) | Program_ID (Table: broadcast) | Time_of_day (Table: broadcast) | Channel_ID (Table: broadcast_share) | Program_ID (Table: broadcast_share) | Date (Table: broadcast_share) | Share_in_percent (Table: broadcast_share)
What are the first names of all the students?,SELECT DISTINCT fname FROM student,* (Table: Member_of_club) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | ClubID (Table: Club) | ClubName (Table: Club) | ClubDesc (Table: Club) | ClubLocation (Table: Club) | StuID (Table: Member_of_club) | ClubID (Table: Member_of_club) | Position (Table: Member_of_club)
List the names of clubs that do not have any players.,SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player),* (Table: competition_result) | Club_ID (Table: club) | name (Table: club) | Region (Table: club) | Start_year (Table: club) | Rank (Table: club_rank) | Club_ID (Table: club_rank) | Gold (Table: club_rank) | Silver (Table: club_rank) | Bronze (Table: club_rank) | Total (Table: club_rank) | Player_ID (Table: player) | name (Table: player) | Position (Table: player) | Club_ID (Table: player) | Apps (Table: player) | Tries (Table: player) | Goals (Table: player) | Points (Table: player) | Competition_ID (Table: competition) | Year (Table: competition) | Competition_type (Table: competition) | Country (Table: competition) | Competition_ID (Table: competition_result) | Club_ID_1 (Table: competition_result) | Club_ID_2 (Table: competition_result) | Score (Table: competition_result)
What is the name of the party form that is most common?,SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1,* (Table: Party_Services) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | town_city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | service_id (Table: Services) | service_type_code (Table: Services) | service_name (Table: Services) | service_descriptio (Table: Services) | form_id (Table: Forms) | form_type_code (Table: Forms) | service_id (Table: Forms) | form_number (Table: Forms) | form_name (Table: Forms) | form_description (Table: Forms) | individual_id (Table: Individuals) | individual_first_name (Table: Individuals) | individual_middle_name (Table: Individuals) | inidividual_phone (Table: Individuals) | individual_email (Table: Individuals) | individual_address (Table: Individuals) | individual_last_name (Table: Individuals) | organization_id (Table: Organizations) | date_formed (Table: Organizations) | organization_name (Table: Organizations) | uk_vat_number (Table: Organizations) | party_id (Table: Parties) | payment_method_code (Table: Parties) | party_phone (Table: Parties) | party_email (Table: Parties) | individual_id (Table: Organization_Contact_Individuals) | organization_id (Table: Organization_Contact_Individuals) | date_contact_from (Table: Organization_Contact_Individuals) | date_contact_to (Table: Organization_Contact_Individuals) | party_id (Table: Party_Addresses) | address_id (Table: Party_Addresses) | date_address_from (Table: Party_Addresses) | address_type_code (Table: Party_Addresses) | date_address_to (Table: Party_Addresses) | party_id (Table: Party_Forms) | form_id (Table: Party_Forms) | date_completion_started (Table: Party_Forms) | form_status_code (Table: Party_Forms) | date_fully_completed (Table: Party_Forms) | booking_id (Table: Party_Services) | customer_id (Table: Party_Services) | service_id (Table: Party_Services) | service_datetime (Table: Party_Services) | booking_made_date (Table: Party_Services)
"List the order id, customer id for orders in Cancelled status, ordered by their order dates.","SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   ""Cancelled"" ORDER BY order_date",* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
"What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?","SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars",* (Table: Rating) | mID (Table: Movie) | title (Table: Movie) | year (Table: Movie) | director (Table: Movie) | rID (Table: Reviewer) | name (Table: Reviewer) | rID (Table: Rating) | mID (Table: Rating) | stars (Table: Rating) | ratingDate (Table: Rating)
Find the name of the ship that is steered by the youngest captain.,SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1,* (Table: Ship) | Captain_ID (Table: captain) | Name (Table: captain) | Ship_ID (Table: captain) | age (Table: captain) | Class (Table: captain) | Rank (Table: captain) | Ship_ID (Table: Ship) | Name (Table: Ship) | Type (Table: Ship) | Built_Year (Table: Ship) | Class (Table: Ship) | Flag (Table: Ship)
"What is the name of the person who has the oldest average age for their friends, and what is that average age?","SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1",* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
Show all investor details.,SELECT Investor_details FROM INVESTORS,* (Table: Transactions_Lots) | investor_id (Table: Investors) | Investor_details (Table: Investors) | lot_id (Table: Lots) | investor_id (Table: Lots) | lot_details (Table: Lots) | transaction_type_code (Table: Ref_Transaction_Types) | transaction_type_description (Table: Ref_Transaction_Types) | transaction_id (Table: Transactions) | investor_id (Table: Transactions) | transaction_type_code (Table: Transactions) | date_of_transaction (Table: Transactions) | amount_of_transaction (Table: Transactions) | share_count (Table: Transactions) | other_details (Table: Transactions) | sales_transaction_id (Table: Sales) | sales_details (Table: Sales) | purchase_transaction_id (Table: Purchases) | purchase_details (Table: Purchases) | transaction_id (Table: Transactions_Lots) | lot_id (Table: Transactions_Lots)
On which day was the order placed whose shipment tracking number is 3452?,SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452,* (Table: Shipment_Items) | customer_id (Table: Customers) | customer_name (Table: Customers) | customer_details (Table: Customers) | invoice_number (Table: Invoices) | invoice_date (Table: Invoices) | invoice_details (Table: Invoices) | order_id (Table: Orders) | customer_id (Table: Orders) | order_status (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | product_id (Table: Products) | product_name (Table: Products) | product_details (Table: Products) | order_item_id (Table: Order_Items) | product_id (Table: Order_Items) | order_id (Table: Order_Items) | order_item_status (Table: Order_Items) | order_item_details (Table: Order_Items) | shipment_id (Table: Shipments) | order_id (Table: Shipments) | invoice_number (Table: Shipments) | shipment_tracking_number (Table: Shipments) | shipment_date (Table: Shipments) | other_shipment_details (Table: Shipments) | shipment_id (Table: Shipment_Items) | order_item_id (Table: Shipment_Items)
Find the total saving balance for each account name.,"SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",* (Table: CHECKING) | custid (Table: ACCOUNTS) | name (Table: ACCOUNTS) | custid (Table: SAVINGS) | balance (Table: SAVINGS) | custid (Table: CHECKING) | balance (Table: CHECKING)
What are the speeds of the longest roller coaster?,SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1,* (Table: country) | Roller_Coaster_ID (Table: roller_coaster) | Name (Table: roller_coaster) | Park (Table: roller_coaster) | Country_ID (Table: roller_coaster) | Length (Table: roller_coaster) | Height (Table: roller_coaster) | Speed (Table: roller_coaster) | Opened (Table: roller_coaster) | Status (Table: roller_coaster) | Country_ID (Table: country) | Name (Table: country) | Population (Table: country) | Area (Table: country) | Languages (Table: country)
What are the ids of the students who registered for course 301?,SELECT student_id FROM student_course_attendance WHERE course_id  =  301,* (Table: Candidate_Assessments) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | person_id (Table: People) | first_name (Table: People) | middle_name (Table: People) | last_name (Table: People) | cell_mobile_number (Table: People) | email_address (Table: People) | login_name (Table: People) | password (Table: People) | student_id (Table: Students) | student_details (Table: Students) | course_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | other_details (Table: Courses) | person_address_id (Table: People_Addresses) | person_id (Table: People_Addresses) | address_id (Table: People_Addresses) | date_from (Table: People_Addresses) | date_to (Table: People_Addresses) | student_id (Table: Student_Course_Registrations) | course_id (Table: Student_Course_Registrations) | registration_date (Table: Student_Course_Registrations) | student_id (Table: Student_Course_Attendance) | course_id (Table: Student_Course_Attendance) | date_of_attendance (Table: Student_Course_Attendance) | candidate_id (Table: Candidates) | candidate_details (Table: Candidates) | candidate_id (Table: Candidate_Assessments) | qualification (Table: Candidate_Assessments) | assessment_date (Table: Candidate_Assessments) | asessment_outcome_code (Table: Candidate_Assessments)
Find the names of instructors who didn't each any courses in any Spring semester.,SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring'),* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
What are the unique names of all race held between 2014 and 2017?,SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017,* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
"Show the name, home city, and age for all drivers.","SELECT name ,  home_city ,  age FROM driver",* (Table: school_bus) | Driver_ID (Table: driver) | Name (Table: driver) | Party (Table: driver) | Home_city (Table: driver) | Age (Table: driver) | School_ID (Table: school) | Grade (Table: school) | School (Table: school) | Location (Table: school) | Type (Table: school) | School_ID (Table: school_bus) | Driver_ID (Table: school_bus) | Years_Working (Table: school_bus) | If_full_time (Table: school_bus)
How many products have their color described as 'white' or have a characteristic with the name 'hot'?,"SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  ""white"" OR t3.characteristic_name  =  ""hot""",* (Table: Product_Characteristics) | characteristic_type_code (Table: Ref_Characteristic_Types) | characteristic_type_description (Table: Ref_Characteristic_Types) | color_code (Table: Ref_Colors) | color_description (Table: Ref_Colors) | product_category_code (Table: Ref_Product_Categories) | product_category_description (Table: Ref_Product_Categories) | unit_of_measure (Table: Ref_Product_Categories) | characteristic_id (Table: Characteristics) | characteristic_type_code (Table: Characteristics) | characteristic_data_type (Table: Characteristics) | characteristic_name (Table: Characteristics) | other_characteristic_details (Table: Characteristics) | product_id (Table: Products) | color_code (Table: Products) | product_category_code (Table: Products) | product_name (Table: Products) | typical_buying_price (Table: Products) | typical_selling_price (Table: Products) | product_description (Table: Products) | other_product_details (Table: Products) | product_id (Table: Product_Characteristics) | characteristic_id (Table: Product_Characteristics) | product_characteristic_value (Table: Product_Characteristics)
List each birth place along with the number of people from there.,"SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place",* (Table: people) | Body_Builder_ID (Table: body_builder) | People_ID (Table: body_builder) | Snatch (Table: body_builder) | Clean_Jerk (Table: body_builder) | Total (Table: body_builder) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Birth_Date (Table: people) | Birth_Place (Table: people)
"Find the id and last name of the teacher that has the most detentions with detention type code ""AFTER""?","SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  ""AFTER"" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",* (Table: Students_in_Detention) | address_type_code (Table: Ref_Address_Types) | address_type_description (Table: Ref_Address_Types) | detention_type_code (Table: Ref_Detention_Type) | detention_type_description (Table: Ref_Detention_Type) | incident_type_code (Table: Ref_Incident_Type) | incident_type_description (Table: Ref_Incident_Type) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | line_3 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | student_id (Table: Students) | address_id (Table: Students) | first_name (Table: Students) | middle_name (Table: Students) | last_name (Table: Students) | cell_mobile_number (Table: Students) | email_address (Table: Students) | date_first_rental (Table: Students) | date_left_university (Table: Students) | other_student_details (Table: Students) | teacher_id (Table: Teachers) | address_id (Table: Teachers) | first_name (Table: Teachers) | middle_name (Table: Teachers) | last_name (Table: Teachers) | gender (Table: Teachers) | cell_mobile_number (Table: Teachers) | email_address (Table: Teachers) | other_details (Table: Teachers) | notes_id (Table: Assessment_Notes) | student_id (Table: Assessment_Notes) | teacher_id (Table: Assessment_Notes) | date_of_notes (Table: Assessment_Notes) | text_of_notes (Table: Assessment_Notes) | other_details (Table: Assessment_Notes) | incident_id (Table: Behavior_Incident) | incident_type_code (Table: Behavior_Incident) | student_id (Table: Behavior_Incident) | date_incident_start (Table: Behavior_Incident) | date_incident_end (Table: Behavior_Incident) | incident_summary (Table: Behavior_Incident) | recommendations (Table: Behavior_Incident) | other_details (Table: Behavior_Incident) | detention_id (Table: Detention) | detention_type_code (Table: Detention) | teacher_id (Table: Detention) | datetime_detention_start (Table: Detention) | datetime_detention_end (Table: Detention) | detention_summary (Table: Detention) | other_details (Table: Detention) | student_id (Table: Student_Addresses) | address_id (Table: Student_Addresses) | date_address_from (Table: Student_Addresses) | date_address_to (Table: Student_Addresses) | monthly_rental (Table: Student_Addresses) | other_details (Table: Student_Addresses) | student_id (Table: Students_in_Detention) | detention_id (Table: Students_in_Detention) | incident_id (Table: Students_in_Detention)
"What are the the full names and ids for all customers, and how many accounts does each have?","SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
"What are teh names of the different products, as well as the number of customers who have ordered each product.","SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?,SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103),* (Table: weather) | id (Table: station) | name (Table: station) | lat (Table: station) | long (Table: station) | dock_count (Table: station) | city (Table: station) | installation_date (Table: station) | station_id (Table: status) | bikes_available (Table: status) | docks_available (Table: status) | time (Table: status) | id (Table: trip) | duration (Table: trip) | start_date (Table: trip) | start_station_name (Table: trip) | start_station_id (Table: trip) | end_date (Table: trip) | end_station_name (Table: trip) | end_station_id (Table: trip) | bike_id (Table: trip) | subscription_type (Table: trip) | zip_code (Table: trip) | date (Table: weather) | max_temperature_f (Table: weather) | mean_temperature_f (Table: weather) | min_temperature_f (Table: weather) | max_dew_point_f (Table: weather) | mean_dew_point_f (Table: weather) | min_dew_point_f (Table: weather) | max_humidity (Table: weather) | mean_humidity (Table: weather) | min_humidity (Table: weather) | max_sea_level_pressure_inches (Table: weather) | mean_sea_level_pressure_inches (Table: weather) | min_sea_level_pressure_inches (Table: weather) | max_visibility_miles (Table: weather) | mean_visibility_miles (Table: weather) | min_visibility_miles (Table: weather) | max_wind_Speed_mph (Table: weather) | mean_wind_speed_mph (Table: weather) | max_gust_speed_mph (Table: weather) | precipitation_inches (Table: weather) | cloud_cover (Table: weather) | events (Table: weather) | wind_dir_degrees (Table: weather) | zip_code (Table: weather)
Find the city where the most customers live.,SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1,* (Table: Order_Items) | address_id (Table: Addresses) | address_content (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | product_id (Table: Products) | product_details (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | date_became_customer (Table: Customers) | other_customer_details (Table: Customers) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | customer_id (Table: Customer_Contact_Channels) | channel_code (Table: Customer_Contact_Channels) | active_from_date (Table: Customer_Contact_Channels) | active_to_date (Table: Customer_Contact_Channels) | contact_number (Table: Customer_Contact_Channels) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status (Table: Customer_Orders) | order_date (Table: Customer_Orders) | order_details (Table: Customer_Orders) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | order_quantity (Table: Order_Items)
What is the response received date for the document described as Regular that was granted more than 100 dollars?,SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100,* (Table: Tasks) | document_type_code (Table: Document_Types) | document_description (Table: Document_Types) | document_id (Table: Documents) | document_type_code (Table: Documents) | grant_id (Table: Documents) | sent_date (Table: Documents) | response_received_date (Table: Documents) | other_details (Table: Documents) | grant_id (Table: Grants) | organisation_id (Table: Grants) | grant_amount (Table: Grants) | grant_start_date (Table: Grants) | grant_end_date (Table: Grants) | other_details (Table: Grants) | organisation_type (Table: Organisation_Types) | organisation_type_description (Table: Organisation_Types) | organisation_id (Table: Organisations) | organisation_type (Table: Organisations) | organisation_details (Table: Organisations) | project_id (Table: Project_Outcomes) | outcome_code (Table: Project_Outcomes) | outcome_details (Table: Project_Outcomes) | staff_id (Table: Project_Staff) | project_id (Table: Project_Staff) | role_code (Table: Project_Staff) | date_from (Table: Project_Staff) | date_to (Table: Project_Staff) | other_details (Table: Project_Staff) | project_id (Table: Projects) | organisation_id (Table: Projects) | project_details (Table: Projects) | outcome_code (Table: Research_Outcomes) | outcome_description (Table: Research_Outcomes) | staff_id (Table: Research_Staff) | employer_organisation_id (Table: Research_Staff) | staff_details (Table: Research_Staff) | role_code (Table: Staff_Roles) | role_description (Table: Staff_Roles) | task_id (Table: Tasks) | project_id (Table: Tasks) | task_details (Table: Tasks) | eg Agree Objectives (Table: Tasks)
Find the ids of all distinct customers who made order after some orders that were Cancelled.,"SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  ""Cancelled"")",* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
Find id of the candidate whose email is stanley.monahan@example.org?,"SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = ""stanley.monahan@example.org""",* (Table: Candidate_Assessments) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | person_id (Table: People) | first_name (Table: People) | middle_name (Table: People) | last_name (Table: People) | cell_mobile_number (Table: People) | email_address (Table: People) | login_name (Table: People) | password (Table: People) | student_id (Table: Students) | student_details (Table: Students) | course_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | other_details (Table: Courses) | person_address_id (Table: People_Addresses) | person_id (Table: People_Addresses) | address_id (Table: People_Addresses) | date_from (Table: People_Addresses) | date_to (Table: People_Addresses) | student_id (Table: Student_Course_Registrations) | course_id (Table: Student_Course_Registrations) | registration_date (Table: Student_Course_Registrations) | student_id (Table: Student_Course_Attendance) | course_id (Table: Student_Course_Attendance) | date_of_attendance (Table: Student_Course_Attendance) | candidate_id (Table: Candidates) | candidate_details (Table: Candidates) | candidate_id (Table: Candidate_Assessments) | qualification (Table: Candidate_Assessments) | assessment_date (Table: Candidate_Assessments) | asessment_outcome_code (Table: Candidate_Assessments)
"Return the names of people, ordered alphabetically.",SELECT Name FROM People ORDER BY Name ASC,* (Table: people) | Gymnast_ID (Table: gymnast) | Floor_Exercise_Points (Table: gymnast) | Pommel_Horse_Points (Table: gymnast) | Rings_Points (Table: gymnast) | Vault_Points (Table: gymnast) | Parallel_Bars_Points (Table: gymnast) | Horizontal_Bar_Points (Table: gymnast) | Total_Points (Table: gymnast) | People_ID (Table: people) | Name (Table: people) | Age (Table: people) | Height (Table: people) | Hometown (Table: people)
What are the appelations for wines produced after 2008 but not in the Central Coast area?,"SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  ""Central Coast""",* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
List the dates and vote percents of elections.,"SELECT Date ,  Vote_Percent FROM election",* (Table: representative) | Election_ID (Table: election) | Representative_ID (Table: election) | Date (Table: election) | Votes (Table: election) | Vote_Percent (Table: election) | Seats (Table: election) | Place (Table: election) | Representative_ID (Table: representative) | Name (Table: representative) | State (Table: representative) | Party (Table: representative) | Lifespan (Table: representative)
Show the tourist attractions visited by the tourist whose detail is 'Vincent'.,"SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  ""Vincent""",* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
Find the names of customers who never placed an order.,SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id,* (Table: Order_Items) | address_id (Table: Addresses) | address_content (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | product_id (Table: Products) | product_details (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | date_became_customer (Table: Customers) | other_customer_details (Table: Customers) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | customer_id (Table: Customer_Contact_Channels) | channel_code (Table: Customer_Contact_Channels) | active_from_date (Table: Customer_Contact_Channels) | active_to_date (Table: Customer_Contact_Channels) | contact_number (Table: Customer_Contact_Channels) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status (Table: Customer_Orders) | order_date (Table: Customer_Orders) | order_details (Table: Customer_Orders) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | order_quantity (Table: Order_Items)
What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?,"SELECT f_id FROM files WHERE formats  =  ""mp4"" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",* (Table: song) | g_name (Table: genre) | rating (Table: genre) | most_popular_in (Table: genre) | artist_name (Table: artist) | country (Table: artist) | gender (Table: artist) | preferred_genre (Table: artist) | f_id (Table: files) | artist_name (Table: files) | file_size (Table: files) | duration (Table: files) | formats (Table: files) | song_name (Table: song) | artist_name (Table: song) | country (Table: song) | f_id (Table: song) | genre_is (Table: song) | rating (Table: song) | languages (Table: song) | releasedate (Table: song) | resolution (Table: song)
Show the names of journalists and the number of events they reported.,"SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name",* (Table: news_report) | Event_ID (Table: event) | Date (Table: event) | Venue (Table: event) | Name (Table: event) | Event_Attendance (Table: event) | journalist_ID (Table: journalist) | Name (Table: journalist) | Nationality (Table: journalist) | Age (Table: journalist) | Years_working (Table: journalist) | journalist_ID (Table: news_report) | Event_ID (Table: news_report) | Work_Type (Table: news_report)
What are the names of all directors whose movies have been reviewed by Sarah Martinez?,SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez',* (Table: Rating) | mID (Table: Movie) | title (Table: Movie) | year (Table: Movie) | director (Table: Movie) | rID (Table: Reviewer) | name (Table: Reviewer) | rID (Table: Rating) | mID (Table: Rating) | stars (Table: Rating) | ratingDate (Table: Rating)
display the job title of jobs which minimum salary is greater than 9000.,SELECT job_title FROM jobs WHERE min_salary  >  9000,* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
"What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?","SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
What is the description and code of the type of service that is performed the most often?,"SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",* (Table: Invoice_Items) | payment_method_code (Table: Ref_Payment_Methods) | payment_method_description (Table: Ref_Payment_Methods) | Service_Type_Code (Table: Ref_Service_Types) | Parent_Service_Type_Code (Table: Ref_Service_Types) | Service_Type_Description (Table: Ref_Service_Types) | Address_ID (Table: Addresses) | Line_1 (Table: Addresses) | Line_2 (Table: Addresses) | City_Town (Table: Addresses) | State_County (Table: Addresses) | Other_Details (Table: Addresses) | Product_ID (Table: Products) | Product_Name (Table: Products) | Product_Price (Table: Products) | Product_Description (Table: Products) | Other_Product_Service_Details (Table: Products) | Marketing_Region_Code (Table: Marketing_Regions) | Marketing_Region_Name (Table: Marketing_Regions) | Marketing_Region_Descriptrion (Table: Marketing_Regions) | Other_Details (Table: Marketing_Regions) | Client_ID (Table: Clients) | Address_ID (Table: Clients) | Customer_Email_Address (Table: Clients) | Customer_Name (Table: Clients) | Customer_Phone (Table: Clients) | Other_Details (Table: Clients) | Workshop_Group_ID (Table: Drama_Workshop_Groups) | Address_ID (Table: Drama_Workshop_Groups) | Currency_Code (Table: Drama_Workshop_Groups) | Marketing_Region_Code (Table: Drama_Workshop_Groups) | Store_Name (Table: Drama_Workshop_Groups) | Store_Phone (Table: Drama_Workshop_Groups) | Store_Email_Address (Table: Drama_Workshop_Groups) | Other_Details (Table: Drama_Workshop_Groups) | Performer_ID (Table: Performers) | Address_ID (Table: Performers) | Customer_Name (Table: Performers) | Customer_Phone (Table: Performers) | Customer_Email_Address (Table: Performers) | Other_Details (Table: Performers) | Customer_ID (Table: Customers) | Address_ID (Table: Customers) | Customer_Name (Table: Customers) | Customer_Phone (Table: Customers) | Customer_Email_Address (Table: Customers) | Other_Details (Table: Customers) | Store_ID (Table: Stores) | Address_ID (Table: Stores) | Marketing_Region_Code (Table: Stores) | Store_Name (Table: Stores) | Store_Phone (Table: Stores) | Store_Email_Address (Table: Stores) | Other_Details (Table: Stores) | Booking_ID (Table: Bookings) | Customer_ID (Table: Bookings) | Workshop_Group_ID (Table: Bookings) | Status_Code (Table: Bookings) | Store_ID (Table: Bookings) | Order_Date (Table: Bookings) | Planned_Delivery_Date (Table: Bookings) | Actual_Delivery_Date (Table: Bookings) | Other_Order_Details (Table: Bookings) | Order_ID (Table: Performers_in_Bookings) | Performer_ID (Table: Performers_in_Bookings) | Order_ID (Table: Customer_Orders) | Customer_ID (Table: Customer_Orders) | Store_ID (Table: Customer_Orders) | Order_Date (Table: Customer_Orders) | Planned_Delivery_Date (Table: Customer_Orders) | Actual_Delivery_Date (Table: Customer_Orders) | Other_Order_Details (Table: Customer_Orders) | Order_Item_ID (Table: Order_Items) | Order_ID (Table: Order_Items) | Product_ID (Table: Order_Items) | Order_Quantity (Table: Order_Items) | Other_Item_Details (Table: Order_Items) | Invoice_ID (Table: Invoices) | Order_ID (Table: Invoices) | payment_method_code (Table: Invoices) | Product_ID (Table: Invoices) | Order_Quantity (Table: Invoices) | Other_Item_Details (Table: Invoices) | Order_Item_ID (Table: Invoices) | Service_ID (Table: Services) | Service_Type_Code (Table: Services) | Workshop_Group_ID (Table: Services) | Product_Description (Table: Services) | Product_Name (Table: Services) | Product_Price (Table: Services) | Other_Product_Service_Details (Table: Services) | Order_ID (Table: Bookings_Services) | Product_ID (Table: Bookings_Services) | Invoice_Item_ID (Table: Invoice_Items) | Invoice_ID (Table: Invoice_Items) | Order_ID (Table: Invoice_Items) | Order_Item_ID (Table: Invoice_Items) | Product_ID (Table: Invoice_Items) | Order_Quantity (Table: Invoice_Items) | Other_Item_Details (Table: Invoice_Items)
Return the famous release date for the oldest artist.,SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1,* (Table: music_festival) | Artist_ID (Table: artist) | Artist (Table: artist) | Age (Table: artist) | Famous_Title (Table: artist) | Famous_Release_date (Table: artist) | Volume_ID (Table: volume) | Volume_Issue (Table: volume) | Issue_Date (Table: volume) | Weeks_on_Top (Table: volume) | Song (Table: volume) | Artist_ID (Table: volume) | ID (Table: music_festival) | Music_Festival (Table: music_festival) | Date_of_ceremony (Table: music_festival) | Category (Table: music_festival) | Volume (Table: music_festival) | Result (Table: music_festival)
Show total points of all players.,SELECT sum(Points) FROM player,* (Table: competition_result) | Club_ID (Table: club) | name (Table: club) | Region (Table: club) | Start_year (Table: club) | Rank (Table: club_rank) | Club_ID (Table: club_rank) | Gold (Table: club_rank) | Silver (Table: club_rank) | Bronze (Table: club_rank) | Total (Table: club_rank) | Player_ID (Table: player) | name (Table: player) | Position (Table: player) | Club_ID (Table: player) | Apps (Table: player) | Tries (Table: player) | Goals (Table: player) | Points (Table: player) | Competition_ID (Table: competition) | Year (Table: competition) | Competition_type (Table: competition) | Country (Table: competition) | Competition_ID (Table: competition_result) | Club_ID_1 (Table: competition_result) | Club_ID_2 (Table: competition_result) | Score (Table: competition_result)
How many distinct parties are there for representatives?,SELECT count(DISTINCT Party) FROM representative,* (Table: representative) | Election_ID (Table: election) | Representative_ID (Table: election) | Date (Table: election) | Votes (Table: election) | Vote_Percent (Table: election) | Seats (Table: election) | Place (Table: election) | Representative_ID (Table: representative) | Name (Table: representative) | State (Table: representative) | Party (Table: representative) | Lifespan (Table: representative)
Find the average hours for the students whose tryout decision is no.,SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no',* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
Find the count of universities whose campus fee is greater than the average campus fee.,SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees),* (Table: faculty) | Id (Table: Campuses) | Campus (Table: Campuses) | Location (Table: Campuses) | County (Table: Campuses) | Year (Table: Campuses) | Campus (Table: csu_fees) | Year (Table: csu_fees) | CampusFee (Table: csu_fees) | Year (Table: degrees) | Campus (Table: degrees) | Degrees (Table: degrees) | Campus (Table: discipline_enrollments) | Discipline (Table: discipline_enrollments) | Year (Table: discipline_enrollments) | Undergraduate (Table: discipline_enrollments) | Graduate (Table: discipline_enrollments) | Campus (Table: enrollments) | Year (Table: enrollments) | TotalEnrollment_AY (Table: enrollments) | FTE_AY (Table: enrollments) | Campus (Table: faculty) | Year (Table: faculty) | Faculty (Table: faculty)
What are the details and ways to get to tourist attractions related to royal family?,"SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID",* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
How many companies operates airlines in each airport?,"SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id",* (Table: flight) | id (Table: airport) | City (Table: airport) | Country (Table: airport) | IATA (Table: airport) | ICAO (Table: airport) | name (Table: airport) | id (Table: operate_company) | name (Table: operate_company) | Type (Table: operate_company) | Principal_activities (Table: operate_company) | Incorporated_in (Table: operate_company) | Group_Equity_Shareholding (Table: operate_company) | id (Table: flight) | Vehicle_Flight_number (Table: flight) | Date (Table: flight) | Pilot (Table: flight) | Velocity (Table: flight) | Altitude (Table: flight) | airport_id (Table: flight) | company_id (Table: flight)
Show distinct types of artworks that are nominated in festivals in 2007.,SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007,* (Table: nomination) | Festival_ID (Table: festival_detail) | Festival_Name (Table: festival_detail) | Chair_Name (Table: festival_detail) | Location (Table: festival_detail) | Year (Table: festival_detail) | Num_of_Audience (Table: festival_detail) | Artwork_ID (Table: artwork) | Type (Table: artwork) | Name (Table: artwork) | Artwork_ID (Table: nomination) | Festival_ID (Table: nomination) | Result (Table: nomination)
Find the number of routes for each source airport and the airport name.,"SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",* (Table: airlines) | rid (Table: routes) | dst_apid (Table: routes) | dst_ap (Table: routes) | src_apid (Table: routes) | src_ap (Table: routes) | alid (Table: routes) | airline (Table: routes) | codeshare (Table: routes) | apid (Table: airports) | name (Table: airports) | city (Table: airports) | country (Table: airports) | x (Table: airports) | y (Table: airports) | elevation (Table: airports) | iata (Table: airports) | icao (Table: airports) | alid (Table: airlines) | name (Table: airlines) | iata (Table: airlines) | icao (Table: airlines) | callsign (Table: airlines) | country (Table: airlines) | active (Table: airlines)
What are the all games score and location of the school called Clemson?,"SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",* (Table: university) | Team_ID (Table: basketball_match) | School_ID (Table: basketball_match) | Team_Name (Table: basketball_match) | ACC_Regular_Season (Table: basketball_match) | ACC_Percent (Table: basketball_match) | ACC_Home (Table: basketball_match) | ACC_Road (Table: basketball_match) | All_Games (Table: basketball_match) | All_Games_Percent (Table: basketball_match) | All_Home (Table: basketball_match) | All_Road (Table: basketball_match) | All_Neutral (Table: basketball_match) | School_ID (Table: university) | School (Table: university) | Location (Table: university) | Founded (Table: university) | Affiliation (Table: university) | Enrollment (Table: university) | Nickname (Table: university) | Primary_conference (Table: university)
Which patients made more than one appointment? Tell me the name and phone number of these patients.,"SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1",* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
What are the different dorm amenity names in alphabetical order?,SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name,* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
"What are the years of film market estimation for the market of Japan, ordered by year descending?","SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  ""Japan"" ORDER BY T1.Year DESC",* (Table: film_market_estimation) | Film_ID (Table: film) | Title (Table: film) | Studio (Table: film) | Director (Table: film) | Gross_in_dollar (Table: film) | Market_ID (Table: market) | Country (Table: market) | Number_cities (Table: market) | Estimation_ID (Table: film_market_estimation) | Low_Estimate (Table: film_market_estimation) | High_Estimate (Table: film_market_estimation) | Film_ID (Table: film_market_estimation) | Type (Table: film_market_estimation) | Market_ID (Table: film_market_estimation) | Year (Table: film_market_estimation)
Find the distinct winery of wines having price between 50 and 100.,SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100,* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
What are the average score and average staff number of all shops?,"SELECT avg(num_of_staff) ,  avg(score) FROM shop",* (Table: happy_hour_member) | Shop_ID (Table: shop) | Address (Table: shop) | Num_of_staff (Table: shop) | Score (Table: shop) | Open_Year (Table: shop) | Member_ID (Table: member) | Name (Table: member) | Membership_card (Table: member) | Age (Table: member) | Time_of_purchase (Table: member) | Level_of_membership (Table: member) | Address (Table: member) | HH_ID (Table: happy_hour) | Shop_ID (Table: happy_hour) | Month (Table: happy_hour) | Num_of_shaff_in_charge (Table: happy_hour) | HH_ID (Table: happy_hour_member) | Member_ID (Table: happy_hour_member) | Total_amount (Table: happy_hour_member)
What are the names of the storms that affected Denmark?,SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark',* (Table: affected_region) | Storm_ID (Table: storm) | Name (Table: storm) | Dates_active (Table: storm) | Max_speed (Table: storm) | Damage_millions_USD (Table: storm) | Number_Deaths (Table: storm) | Region_id (Table: region) | Region_code (Table: region) | Region_name (Table: region) | Region_id (Table: affected_region) | Storm_ID (Table: affected_region) | Number_city_affected (Table: affected_region)
What are the price ranges of five star hotels?,"SELECT price_range FROM HOTELS WHERE star_rating_code  =  ""5""",* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?,"SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = ""Lacey"" AND T3.staff_last_name = ""Bosco"" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = ""Kenton"" AND T3.staff_last_name = ""Champlin""",* (Table: Problems) | problem_category_code (Table: Problem_Category_Codes) | problem_category_description (Table: Problem_Category_Codes) | problem_log_id (Table: Problem_Log) | assigned_to_staff_id (Table: Problem_Log) | problem_id (Table: Problem_Log) | problem_category_code (Table: Problem_Log) | problem_status_code (Table: Problem_Log) | log_entry_date (Table: Problem_Log) | log_entry_description (Table: Problem_Log) | log_entry_fix (Table: Problem_Log) | other_log_details (Table: Problem_Log) | problem_status_code (Table: Problem_Status_Codes) | problem_status_description (Table: Problem_Status_Codes) | product_id (Table: Product) | product_name (Table: Product) | product_details (Table: Product) | staff_id (Table: Staff) | staff_first_name (Table: Staff) | staff_last_name (Table: Staff) | other_staff_details (Table: Staff) | problem_id (Table: Problems) | product_id (Table: Problems) | closure_authorised_by_staff_id (Table: Problems) | reported_by_staff_id (Table: Problems) | date_problem_reported (Table: Problems) | date_problem_closed (Table: Problems) | problem_description (Table: Problems) | other_problem_details (Table: Problems)
Find the number of professors in accounting department.,"SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  ""Accounting""",* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
What is the number of artists for each gender?,"SELECT count(*) ,  gender FROM artist GROUP BY gender",* (Table: song) | g_name (Table: genre) | rating (Table: genre) | most_popular_in (Table: genre) | artist_name (Table: artist) | country (Table: artist) | gender (Table: artist) | preferred_genre (Table: artist) | f_id (Table: files) | artist_name (Table: files) | file_size (Table: files) | duration (Table: files) | formats (Table: files) | song_name (Table: song) | artist_name (Table: song) | country (Table: song) | f_id (Table: song) | genre_is (Table: song) | rating (Table: song) | languages (Table: song) | releasedate (Table: song) | resolution (Table: song)
Find the name of the tryout players who are from the college with largest size.,SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1),* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
"Find the code of the document type ""Paper"".","SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  ""Paper""",* (Table: Documents_to_be_Destroyed) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Calendar_Date (Table: Ref_Calendar) | Day_Number (Table: Ref_Calendar) | Location_Code (Table: Ref_Locations) | Location_Name (Table: Ref_Locations) | Location_Description (Table: Ref_Locations) | Role_Code (Table: Roles) | Role_Name (Table: Roles) | Role_Description (Table: Roles) | Document_ID (Table: All_Documents) | Date_Stored (Table: All_Documents) | Document_Type_Code (Table: All_Documents) | Document_Name (Table: All_Documents) | Document_Description (Table: All_Documents) | Other_Details (Table: All_Documents) | Employee_ID (Table: Employees) | Role_Code (Table: Employees) | Employee_Name (Table: Employees) | Gender_MFU (Table: Employees) | Date_of_Birth (Table: Employees) | Other_Details (Table: Employees) | Document_ID (Table: Document_Locations) | Location_Code (Table: Document_Locations) | Date_in_Location_From (Table: Document_Locations) | Date_in_Locaton_To (Table: Document_Locations) | Document_ID (Table: Documents_to_be_Destroyed) | Destruction_Authorised_by_Employee_ID (Table: Documents_to_be_Destroyed) | Destroyed_by_Employee_ID (Table: Documents_to_be_Destroyed) | Planned_Destruction_Date (Table: Documents_to_be_Destroyed) | Actual_Destruction_Date (Table: Documents_to_be_Destroyed) | Other_Details (Table: Documents_to_be_Destroyed)
What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips,"SELECT name FROM station WHERE city  =  ""Palo Alto"" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100",* (Table: weather) | id (Table: station) | name (Table: station) | lat (Table: station) | long (Table: station) | dock_count (Table: station) | city (Table: station) | installation_date (Table: station) | station_id (Table: status) | bikes_available (Table: status) | docks_available (Table: status) | time (Table: status) | id (Table: trip) | duration (Table: trip) | start_date (Table: trip) | start_station_name (Table: trip) | start_station_id (Table: trip) | end_date (Table: trip) | end_station_name (Table: trip) | end_station_id (Table: trip) | bike_id (Table: trip) | subscription_type (Table: trip) | zip_code (Table: trip) | date (Table: weather) | max_temperature_f (Table: weather) | mean_temperature_f (Table: weather) | min_temperature_f (Table: weather) | max_dew_point_f (Table: weather) | mean_dew_point_f (Table: weather) | min_dew_point_f (Table: weather) | max_humidity (Table: weather) | mean_humidity (Table: weather) | min_humidity (Table: weather) | max_sea_level_pressure_inches (Table: weather) | mean_sea_level_pressure_inches (Table: weather) | min_sea_level_pressure_inches (Table: weather) | max_visibility_miles (Table: weather) | mean_visibility_miles (Table: weather) | min_visibility_miles (Table: weather) | max_wind_Speed_mph (Table: weather) | mean_wind_speed_mph (Table: weather) | max_gust_speed_mph (Table: weather) | precipitation_inches (Table: weather) | cloud_cover (Table: weather) | events (Table: weather) | wind_dir_degrees (Table: weather) | zip_code (Table: weather)
"Given the titles of all courses, in order of titles and credits.","SELECT title FROM course ORDER BY title ,  credits",* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
"Find the titles of the papers the author ""Stephanie Weirich"" wrote.","SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  ""Stephanie"" AND t1.lname  =  ""Weirich""",* (Table: Authorship) | instID (Table: Inst) | name (Table: Inst) | country (Table: Inst) | authID (Table: Authors) | lname (Table: Authors) | fname (Table: Authors) | paperID (Table: Papers) | title (Table: Papers) | authID (Table: Authorship) | instID (Table: Authorship) | paperID (Table: Authorship) | authOrder (Table: Authorship)
Find the ids of the students who participate in Canoeing and Kayaking.,SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking',* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
How many milliseconds long is Fast As a Shark?,"SELECT milliseconds FROM tracks WHERE name = ""Fast As a Shark"";",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
When did Linda Smith visit Subway?,"SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = ""Linda"" AND Student.Lname = ""Smith"" AND Restaurant.ResName = ""Subway"";",* (Table: Visits_Restaurant) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | ResID (Table: Restaurant) | ResName (Table: Restaurant) | Address (Table: Restaurant) | Rating (Table: Restaurant) | ResID (Table: Type_Of_Restaurant) | ResTypeID (Table: Type_Of_Restaurant) | ResTypeID (Table: Restaurant_Type) | ResTypeName (Table: Restaurant_Type) | ResTypeDescription (Table: Restaurant_Type) | StuID (Table: Visits_Restaurant) | ResID (Table: Visits_Restaurant) | Time (Table: Visits_Restaurant) | Spent (Table: Visits_Restaurant)
List the names of all courses ordered by their titles and credits.,"SELECT title FROM course ORDER BY title ,  credits",* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
What are the names of wines produced before any wine from the Brander winery?,"SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  ""Brander"")",* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
What are the line 1 of addresses shared by some students and some teachers?,SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id,* (Table: Students_in_Detention) | address_type_code (Table: Ref_Address_Types) | address_type_description (Table: Ref_Address_Types) | detention_type_code (Table: Ref_Detention_Type) | detention_type_description (Table: Ref_Detention_Type) | incident_type_code (Table: Ref_Incident_Type) | incident_type_description (Table: Ref_Incident_Type) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | line_3 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | student_id (Table: Students) | address_id (Table: Students) | first_name (Table: Students) | middle_name (Table: Students) | last_name (Table: Students) | cell_mobile_number (Table: Students) | email_address (Table: Students) | date_first_rental (Table: Students) | date_left_university (Table: Students) | other_student_details (Table: Students) | teacher_id (Table: Teachers) | address_id (Table: Teachers) | first_name (Table: Teachers) | middle_name (Table: Teachers) | last_name (Table: Teachers) | gender (Table: Teachers) | cell_mobile_number (Table: Teachers) | email_address (Table: Teachers) | other_details (Table: Teachers) | notes_id (Table: Assessment_Notes) | student_id (Table: Assessment_Notes) | teacher_id (Table: Assessment_Notes) | date_of_notes (Table: Assessment_Notes) | text_of_notes (Table: Assessment_Notes) | other_details (Table: Assessment_Notes) | incident_id (Table: Behavior_Incident) | incident_type_code (Table: Behavior_Incident) | student_id (Table: Behavior_Incident) | date_incident_start (Table: Behavior_Incident) | date_incident_end (Table: Behavior_Incident) | incident_summary (Table: Behavior_Incident) | recommendations (Table: Behavior_Incident) | other_details (Table: Behavior_Incident) | detention_id (Table: Detention) | detention_type_code (Table: Detention) | teacher_id (Table: Detention) | datetime_detention_start (Table: Detention) | datetime_detention_end (Table: Detention) | detention_summary (Table: Detention) | other_details (Table: Detention) | student_id (Table: Student_Addresses) | address_id (Table: Student_Addresses) | date_address_from (Table: Student_Addresses) | date_address_to (Table: Student_Addresses) | monthly_rental (Table: Student_Addresses) | other_details (Table: Student_Addresses) | student_id (Table: Students_in_Detention) | detention_id (Table: Students_in_Detention) | incident_id (Table: Students_in_Detention)
Show the names of countries and the average speed of roller coasters from each country.,"SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name",* (Table: country) | Roller_Coaster_ID (Table: roller_coaster) | Name (Table: roller_coaster) | Park (Table: roller_coaster) | Country_ID (Table: roller_coaster) | Length (Table: roller_coaster) | Height (Table: roller_coaster) | Speed (Table: roller_coaster) | Opened (Table: roller_coaster) | Status (Table: roller_coaster) | Country_ID (Table: country) | Name (Table: country) | Population (Table: country) | Area (Table: country) | Languages (Table: country)
Find the last names of teachers teaching in classroom 109.,SELECT lastname FROM teachers WHERE classroom  =  109,* (Table: teachers) | LastName (Table: list) | FirstName (Table: list) | Grade (Table: list) | Classroom (Table: list) | LastName (Table: teachers) | FirstName (Table: teachers) | Classroom (Table: teachers)
What are the number of different course codes?,SELECT count(DISTINCT crs_code) FROM CLASS,* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
Count the number of distinct company industries.,SELECT count(DISTINCT Industry) FROM Companies,* (Table: Office_locations) | id (Table: buildings) | name (Table: buildings) | City (Table: buildings) | Height (Table: buildings) | Stories (Table: buildings) | Status (Table: buildings) | id (Table: Companies) | name (Table: Companies) | Headquarters (Table: Companies) | Industry (Table: Companies) | Sales_billion (Table: Companies) | Profits_billion (Table: Companies) | Assets_billion (Table: Companies) | Market_Value_billion (Table: Companies) | building_id (Table: Office_locations) | company_id (Table: Office_locations) | move_in_year (Table: Office_locations)
display the country ID and number of cities for each country.,"SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id",* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
What are the ids and details of events that have more than one participants?,"SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1",* (Table: Participants_in_Events) | Service_ID (Table: Services) | Service_Type_Code (Table: Services) | Participant_ID (Table: Participants) | Participant_Type_Code (Table: Participants) | Participant_Details (Table: Participants) | Event_ID (Table: Events) | Service_ID (Table: Events) | Event_Details (Table: Events) | Event_ID (Table: Participants_in_Events) | Participant_ID (Table: Participants_in_Events)
Find the id and star rating of each hotel and sort them in increasing order of price.,"SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
How long does student Linda Smith spend on the restaurant in total?,"SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = ""Linda"" AND Student.Lname = ""Smith"";",* (Table: Visits_Restaurant) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | ResID (Table: Restaurant) | ResName (Table: Restaurant) | Address (Table: Restaurant) | Rating (Table: Restaurant) | ResID (Table: Type_Of_Restaurant) | ResTypeID (Table: Type_Of_Restaurant) | ResTypeID (Table: Restaurant_Type) | ResTypeName (Table: Restaurant_Type) | ResTypeDescription (Table: Restaurant_Type) | StuID (Table: Visits_Restaurant) | ResID (Table: Visits_Restaurant) | Time (Table: Visits_Restaurant) | Spent (Table: Visits_Restaurant)
Find the name and email for the users who have more than one follower.,"SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",* (Table: user_profiles) | f1 (Table: follows) | f2 (Table: follows) | id (Table: tweets) | uid (Table: tweets) | text (Table: tweets) | createdate (Table: tweets) | uid (Table: user_profiles) | name (Table: user_profiles) | email (Table: user_profiles) | partitionid (Table: user_profiles) | followers (Table: user_profiles)
Which teachers teach in classroom 110? Give me their first names.,SELECT firstname FROM teachers WHERE classroom  =  110,* (Table: teachers) | LastName (Table: list) | FirstName (Table: list) | Grade (Table: list) | Classroom (Table: list) | LastName (Table: teachers) | FirstName (Table: teachers) | Classroom (Table: teachers)
List venues of all matches in the order of their dates starting from the most recent one.,SELECT venue FROM MATCH ORDER BY date DESC,* (Table: hosting_city) | City_ID (Table: city) | City (Table: city) | Hanzi (Table: city) | Hanyu_Pinyin (Table: city) | Regional_Population (Table: city) | GDP (Table: city) | Match_ID (Table: match) | Date (Table: match) | Venue (Table: match) | Score (Table: match) | Result (Table: match) | Competition (Table: match) | City_ID (Table: temperature) | Jan (Table: temperature) | Feb (Table: temperature) | Mar (Table: temperature) | Apr (Table: temperature) | Jun (Table: temperature) | Jul (Table: temperature) | Aug (Table: temperature) | Sep (Table: temperature) | Oct (Table: temperature) | Nov (Table: temperature) | Dec (Table: temperature) | Year (Table: hosting_city) | Match_ID (Table: hosting_city) | Host_City (Table: hosting_city)
How many type of jobs do they have?,SELECT count(DISTINCT job) FROM Person,* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
Show the ids of the investors who have at least two transactions.,SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2,* (Table: Transactions_Lots) | investor_id (Table: Investors) | Investor_details (Table: Investors) | lot_id (Table: Lots) | investor_id (Table: Lots) | lot_details (Table: Lots) | transaction_type_code (Table: Ref_Transaction_Types) | transaction_type_description (Table: Ref_Transaction_Types) | transaction_id (Table: Transactions) | investor_id (Table: Transactions) | transaction_type_code (Table: Transactions) | date_of_transaction (Table: Transactions) | amount_of_transaction (Table: Transactions) | share_count (Table: Transactions) | other_details (Table: Transactions) | sales_transaction_id (Table: Sales) | sales_details (Table: Sales) | purchase_transaction_id (Table: Purchases) | purchase_details (Table: Purchases) | transaction_id (Table: Transactions_Lots) | lot_id (Table: Transactions_Lots)
How many tasks does each project have? List the task count and the project detail.,"SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id",* (Table: Tasks) | document_type_code (Table: Document_Types) | document_description (Table: Document_Types) | document_id (Table: Documents) | document_type_code (Table: Documents) | grant_id (Table: Documents) | sent_date (Table: Documents) | response_received_date (Table: Documents) | other_details (Table: Documents) | grant_id (Table: Grants) | organisation_id (Table: Grants) | grant_amount (Table: Grants) | grant_start_date (Table: Grants) | grant_end_date (Table: Grants) | other_details (Table: Grants) | organisation_type (Table: Organisation_Types) | organisation_type_description (Table: Organisation_Types) | organisation_id (Table: Organisations) | organisation_type (Table: Organisations) | organisation_details (Table: Organisations) | project_id (Table: Project_Outcomes) | outcome_code (Table: Project_Outcomes) | outcome_details (Table: Project_Outcomes) | staff_id (Table: Project_Staff) | project_id (Table: Project_Staff) | role_code (Table: Project_Staff) | date_from (Table: Project_Staff) | date_to (Table: Project_Staff) | other_details (Table: Project_Staff) | project_id (Table: Projects) | organisation_id (Table: Projects) | project_details (Table: Projects) | outcome_code (Table: Research_Outcomes) | outcome_description (Table: Research_Outcomes) | staff_id (Table: Research_Staff) | employer_organisation_id (Table: Research_Staff) | staff_details (Table: Research_Staff) | role_code (Table: Staff_Roles) | role_description (Table: Staff_Roles) | task_id (Table: Tasks) | project_id (Table: Tasks) | task_details (Table: Tasks) | eg Agree Objectives (Table: Tasks)
What is the name of the activity that has the most faculty members involved in?,SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1,* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
Show the names of members and the location of the performances they attended.,"SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID",* (Table: member_attendance) | Member_ID (Table: member) | Name (Table: member) | Nationality (Table: member) | Role (Table: member) | Performance_ID (Table: performance) | Date (Table: performance) | Host (Table: performance) | Location (Table: performance) | Attendance (Table: performance) | Member_ID (Table: member_attendance) | Performance_ID (Table: member_attendance) | Num_of_Pieces (Table: member_attendance)
Find the number of bands.,SELECT count(*) FROM Band,* (Table: Vocals) | SongId (Table: Songs) | Title (Table: Songs) | AId (Table: Albums) | Title (Table: Albums) | Year (Table: Albums) | Label (Table: Albums) | Type (Table: Albums) | Id (Table: Band) | Firstname (Table: Band) | Lastname (Table: Band) | SongId (Table: Instruments) | BandmateId (Table: Instruments) | Instrument (Table: Instruments) | SongId (Table: Performance) | Bandmate (Table: Performance) | StagePosition (Table: Performance) | AlbumId (Table: Tracklists) | Position (Table: Tracklists) | SongId (Table: Tracklists) | SongId (Table: Vocals) | Bandmate (Table: Vocals) | Type (Table: Vocals)
What is the average and total transaction amount?,"SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
"What are the names of documents that contain the substring ""CV""?","SELECT document_name FROM documents WHERE document_name LIKE ""%CV%""",* (Table: Document_Sections_Images) | role_code (Table: Roles) | role_description (Table: Roles) | user_id (Table: Users) | role_code (Table: Users) | user_name (Table: Users) | user_login (Table: Users) | password (Table: Users) | document_structure_code (Table: Document_Structures) | parent_document_structure_code (Table: Document_Structures) | document_structure_description (Table: Document_Structures) | functional_area_code (Table: Functional_Areas) | parent_functional_area_code (Table: Functional_Areas) | functional_area_description (Table: Functional_Areas) | image_id (Table: Images) | image_alt_text (Table: Images) | image_name (Table: Images) | image_url (Table: Images) | document_code (Table: Documents) | document_structure_code (Table: Documents) | document_type_code (Table: Documents) | access_count (Table: Documents) | document_name (Table: Documents) | document_code (Table: Document_Functional_Areas) | functional_area_code (Table: Document_Functional_Areas) | section_id (Table: Document_Sections) | document_code (Table: Document_Sections) | section_sequence (Table: Document_Sections) | section_code (Table: Document_Sections) | section_title (Table: Document_Sections) | section_id (Table: Document_Sections_Images) | image_id (Table: Document_Sections_Images)
What is the average distance and average price for flights from Los Angeles.,"SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  ""Los Angeles""",* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
Show the names of members and the dates of performances they attended in descending order of attendance of the performances.,"SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC",* (Table: member_attendance) | Member_ID (Table: member) | Name (Table: member) | Nationality (Table: member) | Role (Table: member) | Performance_ID (Table: performance) | Date (Table: performance) | Host (Table: performance) | Location (Table: performance) | Attendance (Table: performance) | Member_ID (Table: member_attendance) | Performance_ID (Table: member_attendance) | Num_of_Pieces (Table: member_attendance)
What is the county that produces the most wines scoring higher than 90?,SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1,* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
What are the themes of competitions that have corresponding host cities with more than 1000 residents?,SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000,* (Table: competition_record) | City_ID (Table: city) | Official_Name (Table: city) | Status (Table: city) | Area_km_2 (Table: city) | Population (Table: city) | Census_Ranking (Table: city) | Farm_ID (Table: farm) | Year (Table: farm) | Total_Horses (Table: farm) | Working_Horses (Table: farm) | Total_Cattle (Table: farm) | Oxen (Table: farm) | Bulls (Table: farm) | Cows (Table: farm) | Pigs (Table: farm) | Sheep_and_Goats (Table: farm) | Competition_ID (Table: farm_competition) | Year (Table: farm_competition) | Theme (Table: farm_competition) | Host_city_ID (Table: farm_competition) | Hosts (Table: farm_competition) | Competition_ID (Table: competition_record) | Farm_ID (Table: competition_record) | Rank (Table: competition_record)
Return the average money requested across all entrepreneurs.,SELECT avg(Money_Requested) FROM entrepreneur,* (Table: people) | Entrepreneur_ID (Table: entrepreneur) | People_ID (Table: entrepreneur) | Company (Table: entrepreneur) | Money_Requested (Table: entrepreneur) | Investor (Table: entrepreneur) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Date_of_Birth (Table: people)
List the event venues and names that have the top 2 most number of people attended.,"SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT 2",* (Table: news_report) | Event_ID (Table: event) | Date (Table: event) | Venue (Table: event) | Name (Table: event) | Event_Attendance (Table: event) | journalist_ID (Table: journalist) | Name (Table: journalist) | Nationality (Table: journalist) | Age (Table: journalist) | Years_working (Table: journalist) | journalist_ID (Table: news_report) | Event_ID (Table: news_report) | Work_Type (Table: news_report)
What is the most common role for the staff?,SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1,* (Table: Tasks) | document_type_code (Table: Document_Types) | document_description (Table: Document_Types) | document_id (Table: Documents) | document_type_code (Table: Documents) | grant_id (Table: Documents) | sent_date (Table: Documents) | response_received_date (Table: Documents) | other_details (Table: Documents) | grant_id (Table: Grants) | organisation_id (Table: Grants) | grant_amount (Table: Grants) | grant_start_date (Table: Grants) | grant_end_date (Table: Grants) | other_details (Table: Grants) | organisation_type (Table: Organisation_Types) | organisation_type_description (Table: Organisation_Types) | organisation_id (Table: Organisations) | organisation_type (Table: Organisations) | organisation_details (Table: Organisations) | project_id (Table: Project_Outcomes) | outcome_code (Table: Project_Outcomes) | outcome_details (Table: Project_Outcomes) | staff_id (Table: Project_Staff) | project_id (Table: Project_Staff) | role_code (Table: Project_Staff) | date_from (Table: Project_Staff) | date_to (Table: Project_Staff) | other_details (Table: Project_Staff) | project_id (Table: Projects) | organisation_id (Table: Projects) | project_details (Table: Projects) | outcome_code (Table: Research_Outcomes) | outcome_description (Table: Research_Outcomes) | staff_id (Table: Research_Staff) | employer_organisation_id (Table: Research_Staff) | staff_details (Table: Research_Staff) | role_code (Table: Staff_Roles) | role_description (Table: Staff_Roles) | task_id (Table: Tasks) | project_id (Table: Tasks) | task_details (Table: Tasks) | eg Agree Objectives (Table: Tasks)
"List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.","SELECT document_id FROM Documents WHERE document_status_code  =  ""done"" AND document_type_code = ""Paper"" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = ""USPS"";",* (Table: Documents_Mailed) | document_type_code (Table: Ref_Document_Types) | document_type_description (Table: Ref_Document_Types) | role_code (Table: Roles) | role_description (Table: Roles) | address_id (Table: Addresses) | address_details (Table: Addresses) | document_status_code (Table: Ref_Document_Status) | document_status_description (Table: Ref_Document_Status) | shipping_agent_code (Table: Ref_Shipping_Agents) | shipping_agent_name (Table: Ref_Shipping_Agents) | shipping_agent_description (Table: Ref_Shipping_Agents) | document_id (Table: Documents) | document_status_code (Table: Documents) | document_type_code (Table: Documents) | shipping_agent_code (Table: Documents) | receipt_date (Table: Documents) | receipt_number (Table: Documents) | other_details (Table: Documents) | employee_id (Table: Employees) | role_code (Table: Employees) | employee_name (Table: Employees) | other_details (Table: Employees) | document_id (Table: Document_Drafts) | draft_number (Table: Document_Drafts) | draft_details (Table: Document_Drafts) | document_id (Table: Draft_Copies) | draft_number (Table: Draft_Copies) | copy_number (Table: Draft_Copies) | document_id (Table: Circulation_History) | draft_number (Table: Circulation_History) | copy_number (Table: Circulation_History) | employee_id (Table: Circulation_History) | document_id (Table: Documents_Mailed) | mailed_to_address_id (Table: Documents_Mailed) | mailing_date (Table: Documents_Mailed)
How many customers don't have an account?,SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts),* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
Find the first name of students who is older than 20.,SELECT fname FROM student WHERE age  >  20,* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
List all club names in descending alphabetical order.,SELECT name FROM club ORDER BY name DESC,* (Table: competition_result) | Club_ID (Table: club) | name (Table: club) | Region (Table: club) | Start_year (Table: club) | Rank (Table: club_rank) | Club_ID (Table: club_rank) | Gold (Table: club_rank) | Silver (Table: club_rank) | Bronze (Table: club_rank) | Total (Table: club_rank) | Player_ID (Table: player) | name (Table: player) | Position (Table: player) | Club_ID (Table: player) | Apps (Table: player) | Tries (Table: player) | Goals (Table: player) | Points (Table: player) | Competition_ID (Table: competition) | Year (Table: competition) | Competition_type (Table: competition) | Country (Table: competition) | Competition_ID (Table: competition_result) | Club_ID_1 (Table: competition_result) | Club_ID_2 (Table: competition_result) | Score (Table: competition_result)
"Find the enrollment date for all the tests that have ""Pass"" result.","SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  ""Pass""",* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
Find the patient who most recently stayed in room 111.,SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1,* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
Find the names of the top 10 airlines that operate the most number of routes.,"SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10",* (Table: airlines) | rid (Table: routes) | dst_apid (Table: routes) | dst_ap (Table: routes) | src_apid (Table: routes) | src_ap (Table: routes) | alid (Table: routes) | airline (Table: routes) | codeshare (Table: routes) | apid (Table: airports) | name (Table: airports) | city (Table: airports) | country (Table: airports) | x (Table: airports) | y (Table: airports) | elevation (Table: airports) | iata (Table: airports) | icao (Table: airports) | alid (Table: airlines) | name (Table: airlines) | iata (Table: airlines) | icao (Table: airlines) | callsign (Table: airlines) | country (Table: airlines) | active (Table: airlines)
How many books fall into each category?,"SELECT category ,  count(*) FROM book_club GROUP BY category",* (Table: culture_company) | book_club_id (Table: book_club) | Year (Table: book_club) | Author_or_Editor (Table: book_club) | Book_Title (Table: book_club) | Publisher (Table: book_club) | Category (Table: book_club) | Result (Table: book_club) | movie_id (Table: movie) | Title (Table: movie) | Year (Table: movie) | Director (Table: movie) | Budget_million (Table: movie) | Gross_worldwide (Table: movie) | Company_name (Table: culture_company) | Type (Table: culture_company) | Incorporated_in (Table: culture_company) | Group_Equity_Shareholding (Table: culture_company) | book_club_id (Table: culture_company) | movie_id (Table: culture_company)
Show the names of companies and the number of employees they have,"SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name",* (Table: employment) | People_ID (Table: people) | Age (Table: people) | Name (Table: people) | Nationality (Table: people) | Graduation_College (Table: people) | Company_ID (Table: company) | Name (Table: company) | Headquarters (Table: company) | Industry (Table: company) | Sales_in_Billion (Table: company) | Profits_in_Billion (Table: company) | Assets_in_Billion (Table: company) | Market_Value_in_Billion (Table: company) | Company_ID (Table: employment) | People_ID (Table: employment) | Year_working (Table: employment)
Find the saving balance of the account with the highest checking balance.,SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1,* (Table: CHECKING) | custid (Table: ACCOUNTS) | name (Table: ACCOUNTS) | custid (Table: SAVINGS) | balance (Table: SAVINGS) | custid (Table: CHECKING) | balance (Table: CHECKING)
What is maximum group equity shareholding of the companies?,SELECT max(group_equity_shareholding) FROM operate_company,* (Table: flight) | id (Table: airport) | City (Table: airport) | Country (Table: airport) | IATA (Table: airport) | ICAO (Table: airport) | name (Table: airport) | id (Table: operate_company) | name (Table: operate_company) | Type (Table: operate_company) | Principal_activities (Table: operate_company) | Incorporated_in (Table: operate_company) | Group_Equity_Shareholding (Table: operate_company) | id (Table: flight) | Vehicle_Flight_number (Table: flight) | Date (Table: flight) | Pilot (Table: flight) | Velocity (Table: flight) | Altitude (Table: flight) | airport_id (Table: flight) | company_id (Table: flight)
"Return the names and locations of shops, ordered by name in alphabetical order.","SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC",* (Table: stock) | Device_ID (Table: device) | Device (Table: device) | Carrier (Table: device) | Package_Version (Table: device) | Applications (Table: device) | Software_Platform (Table: device) | Shop_ID (Table: shop) | Shop_Name (Table: shop) | Location (Table: shop) | Open_Date (Table: shop) | Open_Year (Table: shop) | Shop_ID (Table: stock) | Device_ID (Table: stock) | Quantity (Table: stock)
"Show all movie titles, years, and directors, ordered by budget.","SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million",* (Table: culture_company) | book_club_id (Table: book_club) | Year (Table: book_club) | Author_or_Editor (Table: book_club) | Book_Title (Table: book_club) | Publisher (Table: book_club) | Category (Table: book_club) | Result (Table: book_club) | movie_id (Table: movie) | Title (Table: movie) | Year (Table: movie) | Director (Table: movie) | Budget_million (Table: movie) | Gross_worldwide (Table: movie) | Company_name (Table: culture_company) | Type (Table: culture_company) | Incorporated_in (Table: culture_company) | Group_Equity_Shareholding (Table: culture_company) | book_club_id (Table: culture_company) | movie_id (Table: culture_company)
Find the names of states that have some college students playing in the mid position but not in the goalie position.,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie',* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.,"SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  ""Call of Destiny"" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  ""Works of Widenius"")",* (Table: SportsInfo) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | GameID (Table: Video_Games) | GName (Table: Video_Games) | GType (Table: Video_Games) | StuID (Table: Plays_Games) | GameID (Table: Plays_Games) | Hours_Played (Table: Plays_Games) | StuID (Table: SportsInfo) | SportName (Table: SportsInfo) | HoursPerWeek (Table: SportsInfo) | GamesPlayed (Table: SportsInfo) | OnScholarship (Table: SportsInfo)
Find the names of all instructors who have taught some course and the course_id.,"SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID",* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
"Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.","SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = ""LA""",* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
What is the sum of hours for projects that scientists with the name Michael Rogers or Carol Smith are assigned to?,SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith',* (Table: AssignedTo) | SSN (Table: Scientists) | Name (Table: Scientists) | Code (Table: Projects) | Name (Table: Projects) | Hours (Table: Projects) | Scientist (Table: AssignedTo) | Project (Table: AssignedTo)
"What are the names, classes, and ranks of all captains?","SELECT name ,  CLASS ,  rank FROM captain",* (Table: Ship) | Captain_ID (Table: captain) | Name (Table: captain) | Ship_ID (Table: captain) | age (Table: captain) | Class (Table: captain) | Rank (Table: captain) | Ship_ID (Table: Ship) | Name (Table: Ship) | Type (Table: Ship) | Built_Year (Table: Ship) | Class (Table: Ship) | Flag (Table: Ship)
Which address do not have any member with the black membership card?,SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black',* (Table: happy_hour_member) | Shop_ID (Table: shop) | Address (Table: shop) | Num_of_staff (Table: shop) | Score (Table: shop) | Open_Year (Table: shop) | Member_ID (Table: member) | Name (Table: member) | Membership_card (Table: member) | Age (Table: member) | Time_of_purchase (Table: member) | Level_of_membership (Table: member) | Address (Table: member) | HH_ID (Table: happy_hour) | Shop_ID (Table: happy_hour) | Month (Table: happy_hour) | Num_of_shaff_in_charge (Table: happy_hour) | HH_ID (Table: happy_hour_member) | Member_ID (Table: happy_hour_member) | Total_amount (Table: happy_hour_member)
How many order items correspond to each order id?,"SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
Find the id of the order which is shipped most recently.,SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments),* (Table: Shipment_Items) | customer_id (Table: Customers) | customer_name (Table: Customers) | customer_details (Table: Customers) | invoice_number (Table: Invoices) | invoice_date (Table: Invoices) | invoice_details (Table: Invoices) | order_id (Table: Orders) | customer_id (Table: Orders) | order_status (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | product_id (Table: Products) | product_name (Table: Products) | product_details (Table: Products) | order_item_id (Table: Order_Items) | product_id (Table: Order_Items) | order_id (Table: Order_Items) | order_item_status (Table: Order_Items) | order_item_details (Table: Order_Items) | shipment_id (Table: Shipments) | order_id (Table: Shipments) | invoice_number (Table: Shipments) | shipment_tracking_number (Table: Shipments) | shipment_date (Table: Shipments) | other_shipment_details (Table: Shipments) | shipment_id (Table: Shipment_Items) | order_item_id (Table: Shipment_Items)
What is the name of the department with the fewest professors?,SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1,* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
What are the staff ids and genders of all staffs whose job title is Department Manager?,"SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  ""Department Manager""",* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
"Count the number of different positions in the club ""Bootup Baltimore"".","SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  ""Bootup Baltimore""",* (Table: Member_of_club) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | ClubID (Table: Club) | ClubName (Table: Club) | ClubDesc (Table: Club) | ClubLocation (Table: Club) | StuID (Table: Member_of_club) | ClubID (Table: Member_of_club) | Position (Table: Member_of_club)
List the top 5 genres by number of tracks. List genres name and total tracks.,"SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
Find courses that ran in Fall 2009 and in Spring 2010.,SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010,* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
what is the name and position of the head whose department has least number of employees?,"SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
How many characteristics are there?,SELECT count(*) FROM CHARACTERISTICS,* (Table: Product_Characteristics) | characteristic_type_code (Table: Ref_Characteristic_Types) | characteristic_type_description (Table: Ref_Characteristic_Types) | color_code (Table: Ref_Colors) | color_description (Table: Ref_Colors) | product_category_code (Table: Ref_Product_Categories) | product_category_description (Table: Ref_Product_Categories) | unit_of_measure (Table: Ref_Product_Categories) | characteristic_id (Table: Characteristics) | characteristic_type_code (Table: Characteristics) | characteristic_data_type (Table: Characteristics) | characteristic_name (Table: Characteristics) | other_characteristic_details (Table: Characteristics) | product_id (Table: Products) | color_code (Table: Products) | product_category_code (Table: Products) | product_name (Table: Products) | typical_buying_price (Table: Products) | typical_selling_price (Table: Products) | product_description (Table: Products) | other_product_details (Table: Products) | product_id (Table: Product_Characteristics) | characteristic_id (Table: Product_Characteristics) | product_characteristic_value (Table: Product_Characteristics)
Find the name and partition id for users who tweeted less than twice.,"SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",* (Table: user_profiles) | f1 (Table: follows) | f2 (Table: follows) | id (Table: tweets) | uid (Table: tweets) | text (Table: tweets) | createdate (Table: tweets) | uid (Table: user_profiles) | name (Table: user_profiles) | email (Table: user_profiles) | partitionid (Table: user_profiles) | followers (Table: user_profiles)
Show the company name and the main industry for all companies whose headquarters are not from USA.,"SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'",* (Table: station_company) | Company_ID (Table: company) | Rank (Table: company) | Company (Table: company) | Headquarters (Table: company) | Main_Industry (Table: company) | Sales_billion (Table: company) | Profits_billion (Table: company) | Assets_billion (Table: company) | Market_Value (Table: company) | Station_ID (Table: gas_station) | Open_Year (Table: gas_station) | Location (Table: gas_station) | Manager_Name (Table: gas_station) | Vice_Manager_Name (Table: gas_station) | Representative_Name (Table: gas_station) | Station_ID (Table: station_company) | Company_ID (Table: station_company) | Rank_of_the_Year (Table: station_company)
Find the names of states that have some college students playing in goalie and mid positions.,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid',* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
"Which county do the delegates on ""Appropriations"" committee belong to? Give me the county names.","SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  ""Appropriations""",* (Table: election) | County_Id (Table: county) | County_name (Table: county) | Population (Table: county) | Zip_code (Table: county) | Party_ID (Table: party) | Year (Table: party) | Party (Table: party) | Governor (Table: party) | Lieutenant_Governor (Table: party) | Comptroller (Table: party) | Attorney_General (Table: party) | US_Senate (Table: party) | Election_ID (Table: election) | Counties_Represented (Table: election) | District (Table: election) | Delegate (Table: election) | Party (Table: election) | First_Elected (Table: election) | Committee (Table: election)
How many students got accepted after the tryout?,SELECT count(*) FROM tryout WHERE decision  =  'yes',* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
What are the last names of students studying major 50?,SELECT LName FROM STUDENT WHERE Major  =  50,* (Table: Voting_record) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | StuID (Table: Voting_record) | Registration_Date (Table: Voting_record) | Election_Cycle (Table: Voting_record) | President_Vote (Table: Voting_record) | Vice_President_Vote (Table: Voting_record) | Secretary_Vote (Table: Voting_record) | Treasurer_Vote (Table: Voting_record) | Class_President_Vote (Table: Voting_record) | Class_Senator_Vote (Table: Voting_record)
What is all the information regarding employees who are managers?,SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id,* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
Find the first names of professors who are not playing Canoeing or Kayaking.,SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking',* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
Show all product colors.,SELECT DISTINCT product_color FROM Products,* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
What are the ids of the students who either registered or attended a course?,SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance,* (Table: Candidate_Assessments) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | person_id (Table: People) | first_name (Table: People) | middle_name (Table: People) | last_name (Table: People) | cell_mobile_number (Table: People) | email_address (Table: People) | login_name (Table: People) | password (Table: People) | student_id (Table: Students) | student_details (Table: Students) | course_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | other_details (Table: Courses) | person_address_id (Table: People_Addresses) | person_id (Table: People_Addresses) | address_id (Table: People_Addresses) | date_from (Table: People_Addresses) | date_to (Table: People_Addresses) | student_id (Table: Student_Course_Registrations) | course_id (Table: Student_Course_Registrations) | registration_date (Table: Student_Course_Registrations) | student_id (Table: Student_Course_Attendance) | course_id (Table: Student_Course_Attendance) | date_of_attendance (Table: Student_Course_Attendance) | candidate_id (Table: Candidates) | candidate_details (Table: Candidates) | candidate_id (Table: Candidate_Assessments) | qualification (Table: Candidate_Assessments) | assessment_date (Table: Candidate_Assessments) | asessment_outcome_code (Table: Candidate_Assessments)
Find the numbers of different majors and cities.,"SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
Which apartment type code appears the most often?,SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1,* (Table: View_Unit_Status) | building_id (Table: Apartment_Buildings) | building_short_name (Table: Apartment_Buildings) | building_full_name (Table: Apartment_Buildings) | building_description (Table: Apartment_Buildings) | building_address (Table: Apartment_Buildings) | building_manager (Table: Apartment_Buildings) | building_phone (Table: Apartment_Buildings) | apt_id (Table: Apartments) | building_id (Table: Apartments) | apt_type_code (Table: Apartments) | apt_number (Table: Apartments) | bathroom_count (Table: Apartments) | bedroom_count (Table: Apartments) | room_count (Table: Apartments) | apt_id (Table: Apartment_Facilities) | facility_code (Table: Apartment_Facilities) | guest_id (Table: Guests) | gender_code (Table: Guests) | guest_first_name (Table: Guests) | guest_last_name (Table: Guests) | date_of_birth (Table: Guests) | apt_booking_id (Table: Apartment_Bookings) | apt_id (Table: Apartment_Bookings) | guest_id (Table: Apartment_Bookings) | booking_status_code (Table: Apartment_Bookings) | booking_start_date (Table: Apartment_Bookings) | booking_end_date (Table: Apartment_Bookings) | apt_id (Table: View_Unit_Status) | apt_booking_id (Table: View_Unit_Status) | status_date (Table: View_Unit_Status) | available_yn (Table: View_Unit_Status)
Count the number of different colleges that players who play for Columbus Crew are from.,"SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  ""Columbus Crew""",* (Table: player) | Country_id (Table: country) | Country_name (Table: country) | Capital (Table: country) | Official_native_language (Table: country) | Team_id (Table: team) | Name (Table: team) | Season (Table: match_season) | Player (Table: match_season) | Position (Table: match_season) | Country (Table: match_season) | Team (Table: match_season) | Draft_Pick_Number (Table: match_season) | Draft_Class (Table: match_season) | College (Table: match_season) | Player_ID (Table: player) | Player (Table: player) | Years_Played (Table: player) | Total_WL (Table: player) | Singles_WL (Table: player) | Doubles_WL (Table: player) | Team (Table: player)
What are the names of wines made from red grapes?,"SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  ""Red""",* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
Find the policy type the most customers choose.,SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1,* (Table: Payments) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Policy_ID (Table: Customer_Policies) | Customer_ID (Table: Customer_Policies) | Policy_Type_Code (Table: Customer_Policies) | Start_Date (Table: Customer_Policies) | End_Date (Table: Customer_Policies) | Claim_ID (Table: Claims) | Policy_ID (Table: Claims) | Date_Claim_Made (Table: Claims) | Date_Claim_Settled (Table: Claims) | Amount_Claimed (Table: Claims) | Amount_Settled (Table: Claims) | Settlement_ID (Table: Settlements) | Claim_ID (Table: Settlements) | Date_Claim_Made (Table: Settlements) | Date_Claim_Settled (Table: Settlements) | Amount_Claimed (Table: Settlements) | Amount_Settled (Table: Settlements) | Customer_Policy_ID (Table: Settlements) | Payment_ID (Table: Payments) | Settlement_ID (Table: Payments) | Payment_Method_Code (Table: Payments) | Date_Payment_Made (Table: Payments) | Amount_Payment (Table: Payments)
Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.,"SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  ""EVELINA"" AND T1.lastname  =  ""BROMLEY""",* (Table: teachers) | LastName (Table: list) | FirstName (Table: list) | Grade (Table: list) | Classroom (Table: list) | LastName (Table: teachers) | FirstName (Table: teachers) | Classroom (Table: teachers)
Find the number of rooms with price higher than 120 for different decor.,"SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;",* (Table: Reservations) | RoomId (Table: Rooms) | roomName (Table: Rooms) | beds (Table: Rooms) | bedType (Table: Rooms) | maxOccupancy (Table: Rooms) | basePrice (Table: Rooms) | decor (Table: Rooms) | Code (Table: Reservations) | Room (Table: Reservations) | CheckIn (Table: Reservations) | CheckOut (Table: Reservations) | Rate (Table: Reservations) | LastName (Table: Reservations) | FirstName (Table: Reservations) | Adults (Table: Reservations) | Kids (Table: Reservations)
Find the first names and offices of all professors sorted by alphabetical order of their first name.,"SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname",* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?,"SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = ""Dameon"" AND T2.staff_last_name = ""Frami"" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = ""Jolie"" AND T2.staff_last_name = ""Weber""",* (Table: Problems) | problem_category_code (Table: Problem_Category_Codes) | problem_category_description (Table: Problem_Category_Codes) | problem_log_id (Table: Problem_Log) | assigned_to_staff_id (Table: Problem_Log) | problem_id (Table: Problem_Log) | problem_category_code (Table: Problem_Log) | problem_status_code (Table: Problem_Log) | log_entry_date (Table: Problem_Log) | log_entry_description (Table: Problem_Log) | log_entry_fix (Table: Problem_Log) | other_log_details (Table: Problem_Log) | problem_status_code (Table: Problem_Status_Codes) | problem_status_description (Table: Problem_Status_Codes) | product_id (Table: Product) | product_name (Table: Product) | product_details (Table: Product) | staff_id (Table: Staff) | staff_first_name (Table: Staff) | staff_last_name (Table: Staff) | other_staff_details (Table: Staff) | problem_id (Table: Problems) | product_id (Table: Problems) | closure_authorised_by_staff_id (Table: Problems) | reported_by_staff_id (Table: Problems) | date_problem_reported (Table: Problems) | date_problem_closed (Table: Problems) | problem_description (Table: Problems) | other_problem_details (Table: Problems)
Find the average and maximum hours for the students whose tryout decision is yes.,"SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
Return the descriptions and names of the courses that have more than two students enrolled in.,"SELECT T1.course_description ,  T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  >  2",* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
Give me a list of all the channel names sorted by the channel rating in descending order.,SELECT name FROM channel ORDER BY rating_in_percent DESC,* (Table: broadcast_share) | Program_ID (Table: program) | Name (Table: program) | Origin (Table: program) | Launch (Table: program) | Owner (Table: program) | Channel_ID (Table: channel) | Name (Table: channel) | Owner (Table: channel) | Share_in_percent (Table: channel) | Rating_in_percent (Table: channel) | Channel_ID (Table: broadcast) | Program_ID (Table: broadcast) | Time_of_day (Table: broadcast) | Channel_ID (Table: broadcast_share) | Program_ID (Table: broadcast_share) | Date (Table: broadcast_share) | Share_in_percent (Table: broadcast_share)
find the name of driver who is driving the school bus with the longest working history.,SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id  =  t2.driver_id ORDER BY years_working DESC LIMIT 1,* (Table: school_bus) | Driver_ID (Table: driver) | Name (Table: driver) | Party (Table: driver) | Home_city (Table: driver) | Age (Table: driver) | School_ID (Table: school) | Grade (Table: school) | School (Table: school) | Location (Table: school) | Type (Table: school) | School_ID (Table: school_bus) | Driver_ID (Table: school_bus) | Years_Working (Table: school_bus) | If_full_time (Table: school_bus)
What are the names and distances for all airplanes?,"SELECT name ,  distance FROM Aircraft",* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
Return the description of the document type name 'Film'.,"SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  ""Film""",* (Table: Accounts) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Budget_Type_Code (Table: Ref_Budget_Codes) | Budget_Type_Description (Table: Ref_Budget_Codes) | Project_ID (Table: Projects) | Project_Details (Table: Projects) | Document_ID (Table: Documents) | Document_Type_Code (Table: Documents) | Project_ID (Table: Documents) | Document_Date (Table: Documents) | Document_Name (Table: Documents) | Document_Description (Table: Documents) | Other_Details (Table: Documents) | Statement_ID (Table: Statements) | Statement_Details (Table: Statements) | Document_ID (Table: Documents_with_Expenses) | Budget_Type_Code (Table: Documents_with_Expenses) | Document_Details (Table: Documents_with_Expenses) | Account_ID (Table: Accounts) | Statement_ID (Table: Accounts) | Account_Details (Table: Accounts)
Find the name and building of the department with the highest budget.,"SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1",* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?,"SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
"How many clubs does ""Linda Smith"" have membership for?","SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  ""Linda"" AND t3.lname  =  ""Smith""",* (Table: Member_of_club) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | ClubID (Table: Club) | ClubName (Table: Club) | ClubDesc (Table: Club) | ClubLocation (Table: Club) | StuID (Table: Member_of_club) | ClubID (Table: Member_of_club) | Position (Table: Member_of_club)
"What is the customer first, last name and id with least number of accounts.","SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
Find the description and credit for the course QM-261?,"SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'",* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
"What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?","SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID",* (Table: city) | County_ID (Table: county_public_safety) | Name (Table: county_public_safety) | Population (Table: county_public_safety) | Police_officers (Table: county_public_safety) | Residents_per_officer (Table: county_public_safety) | Case_burden (Table: county_public_safety) | Crime_rate (Table: county_public_safety) | Police_force (Table: county_public_safety) | Location (Table: county_public_safety) | City_ID (Table: city) | County_ID (Table: city) | Name (Table: city) | White (Table: city) | Black (Table: city) | Amerindian (Table: city) | Asian (Table: city) | Multiracial (Table: city) | Hispanic (Table: city)
Find the name of people whose age is greater than any engineer sorted by their age.,SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age,* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
What are the id of students who registered course 301?,SELECT student_id FROM student_course_attendance WHERE course_id  =  301,* (Table: Candidate_Assessments) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | person_id (Table: People) | first_name (Table: People) | middle_name (Table: People) | last_name (Table: People) | cell_mobile_number (Table: People) | email_address (Table: People) | login_name (Table: People) | password (Table: People) | student_id (Table: Students) | student_details (Table: Students) | course_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | other_details (Table: Courses) | person_address_id (Table: People_Addresses) | person_id (Table: People_Addresses) | address_id (Table: People_Addresses) | date_from (Table: People_Addresses) | date_to (Table: People_Addresses) | student_id (Table: Student_Course_Registrations) | course_id (Table: Student_Course_Registrations) | registration_date (Table: Student_Course_Registrations) | student_id (Table: Student_Course_Attendance) | course_id (Table: Student_Course_Attendance) | date_of_attendance (Table: Student_Course_Attendance) | candidate_id (Table: Candidates) | candidate_details (Table: Candidates) | candidate_id (Table: Candidate_Assessments) | qualification (Table: Candidate_Assessments) | assessment_date (Table: Candidate_Assessments) | asessment_outcome_code (Table: Candidate_Assessments)
Show all majors.,SELECT DISTINCT Major FROM Student,* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
What are the first names of all students in Smith Hall?,SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall',* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
"How many bookings did each customer make? List the customer id, first name, and the count.","SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",* (Table: View_Product_Availability) | coupon_id (Table: Discount_Coupons) | date_issued (Table: Discount_Coupons) | coupon_amount (Table: Discount_Coupons) | customer_id (Table: Customers) | coupon_id (Table: Customers) | good_or_bad_customer (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | gender_mf (Table: Customers) | date_became_customer (Table: Customers) | date_last_hire (Table: Customers) | booking_id (Table: Bookings) | customer_id (Table: Bookings) | booking_status_code (Table: Bookings) | returned_damaged_yn (Table: Bookings) | booking_start_date (Table: Bookings) | booking_end_date (Table: Bookings) | count_hired (Table: Bookings) | amount_payable (Table: Bookings) | amount_of_discount (Table: Bookings) | amount_outstanding (Table: Bookings) | amount_of_refund (Table: Bookings) | product_id (Table: Products_for_Hire) | product_type_code (Table: Products_for_Hire) | daily_hire_cost (Table: Products_for_Hire) | product_name (Table: Products_for_Hire) | product_description (Table: Products_for_Hire) | payment_id (Table: Payments) | booking_id (Table: Payments) | customer_id (Table: Payments) | payment_type_code (Table: Payments) | amount_paid_in_full_yn (Table: Payments) | payment_date (Table: Payments) | amount_due (Table: Payments) | amount_paid (Table: Payments) | booking_id (Table: Products_Booked) | product_id (Table: Products_Booked) | returned_yn (Table: Products_Booked) | returned_late_yn (Table: Products_Booked) | booked_count (Table: Products_Booked) | booked_amount (Table: Products_Booked) | product_id (Table: View_Product_Availability) | booking_id (Table: View_Product_Availability) | status_date (Table: View_Product_Availability) | available_yn (Table: View_Product_Availability)
List the names of wrestlers that have not been eliminated.,SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination),* (Table: Elimination) | Wrestler_ID (Table: wrestler) | Name (Table: wrestler) | Reign (Table: wrestler) | Days_held (Table: wrestler) | Location (Table: wrestler) | Event (Table: wrestler) | Elimination_ID (Table: Elimination) | Wrestler_ID (Table: Elimination) | Team (Table: Elimination) | Eliminated_By (Table: Elimination) | Elimination_Move (Table: Elimination) | Time (Table: Elimination)
Return the order ids and details for orderes with two or more invoices.,"SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
"Show the id, the date of account opened, the account name, and other account detail for all accounts.","SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
List the problem id and log id which are assigned to the staff named Rylan Homenick.,"SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = ""Rylan"" AND T1.staff_last_name = ""Homenick""",* (Table: Problems) | problem_category_code (Table: Problem_Category_Codes) | problem_category_description (Table: Problem_Category_Codes) | problem_log_id (Table: Problem_Log) | assigned_to_staff_id (Table: Problem_Log) | problem_id (Table: Problem_Log) | problem_category_code (Table: Problem_Log) | problem_status_code (Table: Problem_Log) | log_entry_date (Table: Problem_Log) | log_entry_description (Table: Problem_Log) | log_entry_fix (Table: Problem_Log) | other_log_details (Table: Problem_Log) | problem_status_code (Table: Problem_Status_Codes) | problem_status_description (Table: Problem_Status_Codes) | product_id (Table: Product) | product_name (Table: Product) | product_details (Table: Product) | staff_id (Table: Staff) | staff_first_name (Table: Staff) | staff_last_name (Table: Staff) | other_staff_details (Table: Staff) | problem_id (Table: Problems) | product_id (Table: Problems) | closure_authorised_by_staff_id (Table: Problems) | reported_by_staff_id (Table: Problems) | date_problem_reported (Table: Problems) | date_problem_closed (Table: Problems) | problem_description (Table: Problems) | other_problem_details (Table: Problems)
List the state names and the number of customers living in each state.,"SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county",* (Table: Order_Deliveries) | product_id (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | product_description (Table: Products) | address_id (Table: Addresses) | address_details (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | date_became_customer (Table: Customers) | regular_order_id (Table: Regular_Orders) | distributer_id (Table: Regular_Orders) | regular_order_id (Table: Regular_Order_Products) | product_id (Table: Regular_Order_Products) | actual_order_id (Table: Actual_Orders) | order_status_code (Table: Actual_Orders) | regular_order_id (Table: Actual_Orders) | actual_order_date (Table: Actual_Orders) | actual_order_id (Table: Actual_Order_Products) | product_id (Table: Actual_Order_Products) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | address_type (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | route_id (Table: Delivery_Routes) | route_name (Table: Delivery_Routes) | other_route_details (Table: Delivery_Routes) | location_code (Table: Delivery_Route_Locations) | route_id (Table: Delivery_Route_Locations) | location_address_id (Table: Delivery_Route_Locations) | location_name (Table: Delivery_Route_Locations) | truck_id (Table: Trucks) | truck_licence_number (Table: Trucks) | truck_details (Table: Trucks) | employee_id (Table: Employees) | employee_address_id (Table: Employees) | employee_name (Table: Employees) | employee_phone (Table: Employees) | location_code (Table: Order_Deliveries) | actual_order_id (Table: Order_Deliveries) | delivery_status_code (Table: Order_Deliveries) | driver_employee_id (Table: Order_Deliveries) | truck_id (Table: Order_Deliveries) | delivery_date (Table: Order_Deliveries)
"For each zip code, return how many times max wind speed reached 25?","SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",* (Table: weather) | id (Table: station) | name (Table: station) | lat (Table: station) | long (Table: station) | dock_count (Table: station) | city (Table: station) | installation_date (Table: station) | station_id (Table: status) | bikes_available (Table: status) | docks_available (Table: status) | time (Table: status) | id (Table: trip) | duration (Table: trip) | start_date (Table: trip) | start_station_name (Table: trip) | start_station_id (Table: trip) | end_date (Table: trip) | end_station_name (Table: trip) | end_station_id (Table: trip) | bike_id (Table: trip) | subscription_type (Table: trip) | zip_code (Table: trip) | date (Table: weather) | max_temperature_f (Table: weather) | mean_temperature_f (Table: weather) | min_temperature_f (Table: weather) | max_dew_point_f (Table: weather) | mean_dew_point_f (Table: weather) | min_dew_point_f (Table: weather) | max_humidity (Table: weather) | mean_humidity (Table: weather) | min_humidity (Table: weather) | max_sea_level_pressure_inches (Table: weather) | mean_sea_level_pressure_inches (Table: weather) | min_sea_level_pressure_inches (Table: weather) | max_visibility_miles (Table: weather) | mean_visibility_miles (Table: weather) | min_visibility_miles (Table: weather) | max_wind_Speed_mph (Table: weather) | mean_wind_speed_mph (Table: weather) | max_gust_speed_mph (Table: weather) | precipitation_inches (Table: weather) | cloud_cover (Table: weather) | events (Table: weather) | wind_dir_degrees (Table: weather) | zip_code (Table: weather)
What is the name and distance for aircraft with id 12?,"SELECT name ,  distance FROM Aircraft WHERE aid  =  12",* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
Find the schools that were either founded after 1850 or public.,SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public',* (Table: university) | Team_ID (Table: basketball_match) | School_ID (Table: basketball_match) | Team_Name (Table: basketball_match) | ACC_Regular_Season (Table: basketball_match) | ACC_Percent (Table: basketball_match) | ACC_Home (Table: basketball_match) | ACC_Road (Table: basketball_match) | All_Games (Table: basketball_match) | All_Games_Percent (Table: basketball_match) | All_Home (Table: basketball_match) | All_Road (Table: basketball_match) | All_Neutral (Table: basketball_match) | School_ID (Table: university) | School (Table: university) | Location (Table: university) | Founded (Table: university) | Affiliation (Table: university) | Enrollment (Table: university) | Nickname (Table: university) | Primary_conference (Table: university)
What are the details for the project whose research has been published?,SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%',* (Table: Tasks) | document_type_code (Table: Document_Types) | document_description (Table: Document_Types) | document_id (Table: Documents) | document_type_code (Table: Documents) | grant_id (Table: Documents) | sent_date (Table: Documents) | response_received_date (Table: Documents) | other_details (Table: Documents) | grant_id (Table: Grants) | organisation_id (Table: Grants) | grant_amount (Table: Grants) | grant_start_date (Table: Grants) | grant_end_date (Table: Grants) | other_details (Table: Grants) | organisation_type (Table: Organisation_Types) | organisation_type_description (Table: Organisation_Types) | organisation_id (Table: Organisations) | organisation_type (Table: Organisations) | organisation_details (Table: Organisations) | project_id (Table: Project_Outcomes) | outcome_code (Table: Project_Outcomes) | outcome_details (Table: Project_Outcomes) | staff_id (Table: Project_Staff) | project_id (Table: Project_Staff) | role_code (Table: Project_Staff) | date_from (Table: Project_Staff) | date_to (Table: Project_Staff) | other_details (Table: Project_Staff) | project_id (Table: Projects) | organisation_id (Table: Projects) | project_details (Table: Projects) | outcome_code (Table: Research_Outcomes) | outcome_description (Table: Research_Outcomes) | staff_id (Table: Research_Staff) | employer_organisation_id (Table: Research_Staff) | staff_details (Table: Research_Staff) | role_code (Table: Staff_Roles) | role_description (Table: Staff_Roles) | task_id (Table: Tasks) | project_id (Table: Tasks) | task_details (Table: Tasks) | eg Agree Objectives (Table: Tasks)
What is the most popular file format?,SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1,* (Table: song) | g_name (Table: genre) | rating (Table: genre) | most_popular_in (Table: genre) | artist_name (Table: artist) | country (Table: artist) | gender (Table: artist) | preferred_genre (Table: artist) | f_id (Table: files) | artist_name (Table: files) | file_size (Table: files) | duration (Table: files) | formats (Table: files) | song_name (Table: song) | artist_name (Table: song) | country (Table: song) | f_id (Table: song) | genre_is (Table: song) | rating (Table: song) | languages (Table: song) | releasedate (Table: song) | resolution (Table: song)
Show the parties that have both representatives in New York state and representatives in Pennsylvania state.,"SELECT Party FROM representative WHERE State  =  ""New York"" INTERSECT SELECT Party FROM representative WHERE State  =  ""Pennsylvania""",* (Table: representative) | Election_ID (Table: election) | Representative_ID (Table: election) | Date (Table: election) | Votes (Table: election) | Vote_Percent (Table: election) | Seats (Table: election) | Place (Table: election) | Representative_ID (Table: representative) | Name (Table: representative) | State (Table: representative) | Party (Table: representative) | Lifespan (Table: representative)
Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.,SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100,* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
Which people severed as governor most frequently?,SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1,* (Table: election) | County_Id (Table: county) | County_name (Table: county) | Population (Table: county) | Zip_code (Table: county) | Party_ID (Table: party) | Year (Table: party) | Party (Table: party) | Governor (Table: party) | Lieutenant_Governor (Table: party) | Comptroller (Table: party) | Attorney_General (Table: party) | US_Senate (Table: party) | Election_ID (Table: election) | Counties_Represented (Table: election) | District (Table: election) | Delegate (Table: election) | Party (Table: election) | First_Elected (Table: election) | Committee (Table: election)
Find the last and first name of students who are playing Football or Lacrosse.,"SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  ""Football"" OR T1.SportName  =  ""Lacrosse""",* (Table: SportsInfo) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | GameID (Table: Video_Games) | GName (Table: Video_Games) | GType (Table: Video_Games) | StuID (Table: Plays_Games) | GameID (Table: Plays_Games) | Hours_Played (Table: Plays_Games) | StuID (Table: SportsInfo) | SportName (Table: SportsInfo) | HoursPerWeek (Table: SportsInfo) | GamesPlayed (Table: SportsInfo) | OnScholarship (Table: SportsInfo)
"Find all members of ""Bootup Baltimore"" whose major is ""600"". Show the first name and last name.","SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  ""Bootup Baltimore"" AND t3.major  =  ""600""",* (Table: Member_of_club) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | ClubID (Table: Club) | ClubName (Table: Club) | ClubDesc (Table: Club) | ClubLocation (Table: Club) | StuID (Table: Member_of_club) | ClubID (Table: Member_of_club) | Position (Table: Member_of_club)
What is the transaction type that has processed the greatest total amount in transactions?,SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1,* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
Count the number of customers that have the customer type that is most common.,SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1,* (Table: Complaints) | staff_id (Table: Staff) | gender (Table: Staff) | first_name (Table: Staff) | last_name (Table: Staff) | email_address (Table: Staff) | phone_number (Table: Staff) | customer_id (Table: Customers) | customer_type_code (Table: Customers) | address_line_1 (Table: Customers) | address_line_2 (Table: Customers) | town_city (Table: Customers) | state (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | product_id (Table: Products) | parent_product_id (Table: Products) | product_category_code (Table: Products) | date_product_first_available (Table: Products) | date_product_discontinued (Table: Products) | product_name (Table: Products) | product_description (Table: Products) | product_price (Table: Products) | complaint_id (Table: Complaints) | product_id (Table: Complaints) | customer_id (Table: Complaints) | complaint_outcome_code (Table: Complaints) | complaint_status_code (Table: Complaints) | complaint_type_code (Table: Complaints) | date_complaint_raised (Table: Complaints) | date_complaint_closed (Table: Complaints) | staff_id (Table: Complaints)
"List the clubs having ""Davis Steven"" as a member.","SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  ""Davis"" AND t3.lname  =  ""Steven""",* (Table: Member_of_club) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | ClubID (Table: Club) | ClubName (Table: Club) | ClubDesc (Table: Club) | ClubLocation (Table: Club) | StuID (Table: Member_of_club) | ClubID (Table: Member_of_club) | Position (Table: Member_of_club)
"What are the types of vocals used in the song ""Le Pop""?","SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  ""Le Pop""",* (Table: Vocals) | SongId (Table: Songs) | Title (Table: Songs) | AId (Table: Albums) | Title (Table: Albums) | Year (Table: Albums) | Label (Table: Albums) | Type (Table: Albums) | Id (Table: Band) | Firstname (Table: Band) | Lastname (Table: Band) | SongId (Table: Instruments) | BandmateId (Table: Instruments) | Instrument (Table: Instruments) | SongId (Table: Performance) | Bandmate (Table: Performance) | StagePosition (Table: Performance) | AlbumId (Table: Tracklists) | Position (Table: Tracklists) | SongId (Table: Tracklists) | SongId (Table: Vocals) | Bandmate (Table: Vocals) | Type (Table: Vocals)
"What are the apartment number, start date, and end date of each apartment booking?","SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id",* (Table: View_Unit_Status) | building_id (Table: Apartment_Buildings) | building_short_name (Table: Apartment_Buildings) | building_full_name (Table: Apartment_Buildings) | building_description (Table: Apartment_Buildings) | building_address (Table: Apartment_Buildings) | building_manager (Table: Apartment_Buildings) | building_phone (Table: Apartment_Buildings) | apt_id (Table: Apartments) | building_id (Table: Apartments) | apt_type_code (Table: Apartments) | apt_number (Table: Apartments) | bathroom_count (Table: Apartments) | bedroom_count (Table: Apartments) | room_count (Table: Apartments) | apt_id (Table: Apartment_Facilities) | facility_code (Table: Apartment_Facilities) | guest_id (Table: Guests) | gender_code (Table: Guests) | guest_first_name (Table: Guests) | guest_last_name (Table: Guests) | date_of_birth (Table: Guests) | apt_booking_id (Table: Apartment_Bookings) | apt_id (Table: Apartment_Bookings) | guest_id (Table: Apartment_Bookings) | booking_status_code (Table: Apartment_Bookings) | booking_start_date (Table: Apartment_Bookings) | booking_end_date (Table: Apartment_Bookings) | apt_id (Table: View_Unit_Status) | apt_booking_id (Table: View_Unit_Status) | status_date (Table: View_Unit_Status) | available_yn (Table: View_Unit_Status)
What are the student ids for those on scholarship in major number 600?,SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y',* (Table: SportsInfo) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | GameID (Table: Video_Games) | GName (Table: Video_Games) | GType (Table: Video_Games) | StuID (Table: Plays_Games) | GameID (Table: Plays_Games) | Hours_Played (Table: Plays_Games) | StuID (Table: SportsInfo) | SportName (Table: SportsInfo) | HoursPerWeek (Table: SportsInfo) | GamesPlayed (Table: SportsInfo) | OnScholarship (Table: SportsInfo)
What is the course description and number of credits for QM-261?,"SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'",* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
Which college have both players with position midfielder and players with position defender?,"SELECT College FROM match_season WHERE POSITION  =  ""Midfielder"" INTERSECT SELECT College FROM match_season WHERE POSITION  =  ""Defender""",* (Table: player) | Country_id (Table: country) | Country_name (Table: country) | Capital (Table: country) | Official_native_language (Table: country) | Team_id (Table: team) | Name (Table: team) | Season (Table: match_season) | Player (Table: match_season) | Position (Table: match_season) | Country (Table: match_season) | Team (Table: match_season) | Draft_Pick_Number (Table: match_season) | Draft_Class (Table: match_season) | College (Table: match_season) | Player_ID (Table: player) | Player (Table: player) | Years_Played (Table: player) | Total_WL (Table: player) | Singles_WL (Table: player) | Doubles_WL (Table: player) | Team (Table: player)
"Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.",SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims ),* (Table: Payments) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Policy_ID (Table: Customer_Policies) | Customer_ID (Table: Customer_Policies) | Policy_Type_Code (Table: Customer_Policies) | Start_Date (Table: Customer_Policies) | End_Date (Table: Customer_Policies) | Claim_ID (Table: Claims) | Policy_ID (Table: Claims) | Date_Claim_Made (Table: Claims) | Date_Claim_Settled (Table: Claims) | Amount_Claimed (Table: Claims) | Amount_Settled (Table: Claims) | Settlement_ID (Table: Settlements) | Claim_ID (Table: Settlements) | Date_Claim_Made (Table: Settlements) | Date_Claim_Settled (Table: Settlements) | Amount_Claimed (Table: Settlements) | Amount_Settled (Table: Settlements) | Customer_Policy_ID (Table: Settlements) | Payment_ID (Table: Payments) | Settlement_ID (Table: Payments) | Payment_Method_Code (Table: Payments) | Date_Payment_Made (Table: Payments) | Amount_Payment (Table: Payments)
What countries are the female artists who sung in the language Bangla from?,"SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  ""Female"" AND T2.languages  =  ""bangla""",* (Table: song) | g_name (Table: genre) | rating (Table: genre) | most_popular_in (Table: genre) | artist_name (Table: artist) | country (Table: artist) | gender (Table: artist) | preferred_genre (Table: artist) | f_id (Table: files) | artist_name (Table: files) | file_size (Table: files) | duration (Table: files) | formats (Table: files) | song_name (Table: song) | artist_name (Table: song) | country (Table: song) | f_id (Table: song) | genre_is (Table: song) | rating (Table: song) | languages (Table: song) | releasedate (Table: song) | resolution (Table: song)
Count the number of tracks that are part of the rock genre.,"SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  ""Rock""",* (Table: Track) | AlbumId (Table: Album) | Title (Table: Album) | ArtistId (Table: Album) | ArtistId (Table: Artist) | Name (Table: Artist) | CustomerId (Table: Customer) | FirstName (Table: Customer) | LastName (Table: Customer) | Company (Table: Customer) | Address (Table: Customer) | City (Table: Customer) | State (Table: Customer) | Country (Table: Customer) | PostalCode (Table: Customer) | Phone (Table: Customer) | Fax (Table: Customer) | Email (Table: Customer) | SupportRepId (Table: Customer) | EmployeeId (Table: Employee) | LastName (Table: Employee) | FirstName (Table: Employee) | Title (Table: Employee) | ReportsTo (Table: Employee) | BirthDate (Table: Employee) | HireDate (Table: Employee) | Address (Table: Employee) | City (Table: Employee) | State (Table: Employee) | Country (Table: Employee) | PostalCode (Table: Employee) | Phone (Table: Employee) | Fax (Table: Employee) | Email (Table: Employee) | GenreId (Table: Genre) | Name (Table: Genre) | InvoiceId (Table: Invoice) | CustomerId (Table: Invoice) | InvoiceDate (Table: Invoice) | BillingAddress (Table: Invoice) | BillingCity (Table: Invoice) | BillingState (Table: Invoice) | BillingCountry (Table: Invoice) | BillingPostalCode (Table: Invoice) | Total (Table: Invoice) | InvoiceLineId (Table: InvoiceLine) | InvoiceId (Table: InvoiceLine) | TrackId (Table: InvoiceLine) | UnitPrice (Table: InvoiceLine) | Quantity (Table: InvoiceLine) | MediaTypeId (Table: MediaType) | Name (Table: MediaType) | PlaylistId (Table: Playlist) | Name (Table: Playlist) | PlaylistId (Table: PlaylistTrack) | TrackId (Table: PlaylistTrack) | TrackId (Table: Track) | Name (Table: Track) | AlbumId (Table: Track) | MediaTypeId (Table: Track) | GenreId (Table: Track) | Composer (Table: Track) | Milliseconds (Table: Track) | Bytes (Table: Track) | UnitPrice (Table: Track)
Sort the customer names in alphabetical order.,SELECT customer_details FROM customers ORDER BY customer_details,* (Table: Claims_Processing) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Staff_ID (Table: Staff) | Staff_Details (Table: Staff) | Policy_ID (Table: Policies) | Customer_ID (Table: Policies) | Policy_Type_Code (Table: Policies) | Start_Date (Table: Policies) | End_Date (Table: Policies) | Claim_Header_ID (Table: Claim_Headers) | Claim_Status_Code (Table: Claim_Headers) | Claim_Type_Code (Table: Claim_Headers) | Policy_ID (Table: Claim_Headers) | Date_of_Claim (Table: Claim_Headers) | Date_of_Settlement (Table: Claim_Headers) | Amount_Claimed (Table: Claim_Headers) | Amount_Piad (Table: Claim_Headers) | Claim_ID (Table: Claims_Documents) | Document_Type_Code (Table: Claims_Documents) | Created_by_Staff_ID (Table: Claims_Documents) | Created_Date (Table: Claims_Documents) | Claim_Stage_ID (Table: Claims_Processing_Stages) | Next_Claim_Stage_ID (Table: Claims_Processing_Stages) | Claim_Status_Name (Table: Claims_Processing_Stages) | Claim_Status_Description (Table: Claims_Processing_Stages) | Claim_Processing_ID (Table: Claims_Processing) | Claim_ID (Table: Claims_Processing) | Claim_Outcome_Code (Table: Claims_Processing) | Claim_Stage_ID (Table: Claims_Processing) | Staff_ID (Table: Claims_Processing)
What are the maximum price and score of wines produced by St. Helena appelation?,"SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  ""St. Helena""",* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
How many courses are offered by the Computer Info. Systems department?,"SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  ""Computer Info. Systems""",* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
"What are the types of vocals that the musician with the first name ""Solveig"" played in the song ""A Bar in Amsterdam""?","SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  ""Solveig"" AND T2.title  =  ""A Bar In Amsterdam""",* (Table: Vocals) | SongId (Table: Songs) | Title (Table: Songs) | AId (Table: Albums) | Title (Table: Albums) | Year (Table: Albums) | Label (Table: Albums) | Type (Table: Albums) | Id (Table: Band) | Firstname (Table: Band) | Lastname (Table: Band) | SongId (Table: Instruments) | BandmateId (Table: Instruments) | Instrument (Table: Instruments) | SongId (Table: Performance) | Bandmate (Table: Performance) | StagePosition (Table: Performance) | AlbumId (Table: Tracklists) | Position (Table: Tracklists) | SongId (Table: Tracklists) | SongId (Table: Vocals) | Bandmate (Table: Vocals) | Type (Table: Vocals)
Find the name of the department that offers the highest total credits?,SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1,* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Count the number of financial transactions that correspond to each account id.,"SELECT count(*) ,  account_id FROM Financial_transactions",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
"What are the minimum, average, and maximum quantities ordered? Check all the invoices.","SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES",* (Table: Invoice_Items) | payment_method_code (Table: Ref_Payment_Methods) | payment_method_description (Table: Ref_Payment_Methods) | Service_Type_Code (Table: Ref_Service_Types) | Parent_Service_Type_Code (Table: Ref_Service_Types) | Service_Type_Description (Table: Ref_Service_Types) | Address_ID (Table: Addresses) | Line_1 (Table: Addresses) | Line_2 (Table: Addresses) | City_Town (Table: Addresses) | State_County (Table: Addresses) | Other_Details (Table: Addresses) | Product_ID (Table: Products) | Product_Name (Table: Products) | Product_Price (Table: Products) | Product_Description (Table: Products) | Other_Product_Service_Details (Table: Products) | Marketing_Region_Code (Table: Marketing_Regions) | Marketing_Region_Name (Table: Marketing_Regions) | Marketing_Region_Descriptrion (Table: Marketing_Regions) | Other_Details (Table: Marketing_Regions) | Client_ID (Table: Clients) | Address_ID (Table: Clients) | Customer_Email_Address (Table: Clients) | Customer_Name (Table: Clients) | Customer_Phone (Table: Clients) | Other_Details (Table: Clients) | Workshop_Group_ID (Table: Drama_Workshop_Groups) | Address_ID (Table: Drama_Workshop_Groups) | Currency_Code (Table: Drama_Workshop_Groups) | Marketing_Region_Code (Table: Drama_Workshop_Groups) | Store_Name (Table: Drama_Workshop_Groups) | Store_Phone (Table: Drama_Workshop_Groups) | Store_Email_Address (Table: Drama_Workshop_Groups) | Other_Details (Table: Drama_Workshop_Groups) | Performer_ID (Table: Performers) | Address_ID (Table: Performers) | Customer_Name (Table: Performers) | Customer_Phone (Table: Performers) | Customer_Email_Address (Table: Performers) | Other_Details (Table: Performers) | Customer_ID (Table: Customers) | Address_ID (Table: Customers) | Customer_Name (Table: Customers) | Customer_Phone (Table: Customers) | Customer_Email_Address (Table: Customers) | Other_Details (Table: Customers) | Store_ID (Table: Stores) | Address_ID (Table: Stores) | Marketing_Region_Code (Table: Stores) | Store_Name (Table: Stores) | Store_Phone (Table: Stores) | Store_Email_Address (Table: Stores) | Other_Details (Table: Stores) | Booking_ID (Table: Bookings) | Customer_ID (Table: Bookings) | Workshop_Group_ID (Table: Bookings) | Status_Code (Table: Bookings) | Store_ID (Table: Bookings) | Order_Date (Table: Bookings) | Planned_Delivery_Date (Table: Bookings) | Actual_Delivery_Date (Table: Bookings) | Other_Order_Details (Table: Bookings) | Order_ID (Table: Performers_in_Bookings) | Performer_ID (Table: Performers_in_Bookings) | Order_ID (Table: Customer_Orders) | Customer_ID (Table: Customer_Orders) | Store_ID (Table: Customer_Orders) | Order_Date (Table: Customer_Orders) | Planned_Delivery_Date (Table: Customer_Orders) | Actual_Delivery_Date (Table: Customer_Orders) | Other_Order_Details (Table: Customer_Orders) | Order_Item_ID (Table: Order_Items) | Order_ID (Table: Order_Items) | Product_ID (Table: Order_Items) | Order_Quantity (Table: Order_Items) | Other_Item_Details (Table: Order_Items) | Invoice_ID (Table: Invoices) | Order_ID (Table: Invoices) | payment_method_code (Table: Invoices) | Product_ID (Table: Invoices) | Order_Quantity (Table: Invoices) | Other_Item_Details (Table: Invoices) | Order_Item_ID (Table: Invoices) | Service_ID (Table: Services) | Service_Type_Code (Table: Services) | Workshop_Group_ID (Table: Services) | Product_Description (Table: Services) | Product_Name (Table: Services) | Product_Price (Table: Services) | Other_Product_Service_Details (Table: Services) | Order_ID (Table: Bookings_Services) | Product_ID (Table: Bookings_Services) | Invoice_Item_ID (Table: Invoice_Items) | Invoice_ID (Table: Invoice_Items) | Order_ID (Table: Invoice_Items) | Order_Item_ID (Table: Invoice_Items) | Product_ID (Table: Invoice_Items) | Order_Quantity (Table: Invoice_Items) | Other_Item_Details (Table: Invoice_Items)
"In zip code 94107, on which day neither Fog nor Rain was not observed?","SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != ""Fog"" AND EVENTS != ""Rain""",* (Table: weather) | id (Table: station) | name (Table: station) | lat (Table: station) | long (Table: station) | dock_count (Table: station) | city (Table: station) | installation_date (Table: station) | station_id (Table: status) | bikes_available (Table: status) | docks_available (Table: status) | time (Table: status) | id (Table: trip) | duration (Table: trip) | start_date (Table: trip) | start_station_name (Table: trip) | start_station_id (Table: trip) | end_date (Table: trip) | end_station_name (Table: trip) | end_station_id (Table: trip) | bike_id (Table: trip) | subscription_type (Table: trip) | zip_code (Table: trip) | date (Table: weather) | max_temperature_f (Table: weather) | mean_temperature_f (Table: weather) | min_temperature_f (Table: weather) | max_dew_point_f (Table: weather) | mean_dew_point_f (Table: weather) | min_dew_point_f (Table: weather) | max_humidity (Table: weather) | mean_humidity (Table: weather) | min_humidity (Table: weather) | max_sea_level_pressure_inches (Table: weather) | mean_sea_level_pressure_inches (Table: weather) | min_sea_level_pressure_inches (Table: weather) | max_visibility_miles (Table: weather) | mean_visibility_miles (Table: weather) | min_visibility_miles (Table: weather) | max_wind_Speed_mph (Table: weather) | mean_wind_speed_mph (Table: weather) | max_gust_speed_mph (Table: weather) | precipitation_inches (Table: weather) | cloud_cover (Table: weather) | events (Table: weather) | wind_dir_degrees (Table: weather) | zip_code (Table: weather)
What are the themes and locations of parties?,"SELECT Party_Theme ,  LOCATION FROM party",* (Table: party_host) | Party_ID (Table: party) | Party_Theme (Table: party) | Location (Table: party) | First_year (Table: party) | Last_year (Table: party) | Number_of_hosts (Table: party) | Host_ID (Table: host) | Name (Table: host) | Nationality (Table: host) | Age (Table: host) | Party_ID (Table: party_host) | Host_ID (Table: party_host) | Is_Main_in_Charge (Table: party_host)
"What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in.","SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
Find the number of scientists who are not assigned to any project.,SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo),* (Table: AssignedTo) | SSN (Table: Scientists) | Name (Table: Scientists) | Code (Table: Projects) | Name (Table: Projects) | Hours (Table: Projects) | Scientist (Table: AssignedTo) | Project (Table: AssignedTo)
What are the full names of actors who had roles in more than 30 films?,"SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30",* (Table: store) | actor_id (Table: actor) | first_name (Table: actor) | last_name (Table: actor) | last_update (Table: actor) | address_id (Table: address) | address (Table: address) | address2 (Table: address) | district (Table: address) | city_id (Table: address) | postal_code (Table: address) | phone (Table: address) | last_update (Table: address) | category_id (Table: category) | name (Table: category) | last_update (Table: category) | city_id (Table: city) | city (Table: city) | country_id (Table: city) | last_update (Table: city) | country_id (Table: country) | country (Table: country) | last_update (Table: country) | customer_id (Table: customer) | store_id (Table: customer) | first_name (Table: customer) | last_name (Table: customer) | email (Table: customer) | address_id (Table: customer) | active (Table: customer) | create_date (Table: customer) | last_update (Table: customer) | film_id (Table: film) | title (Table: film) | description (Table: film) | release_year (Table: film) | language_id (Table: film) | original_language_id (Table: film) | rental_duration (Table: film) | rental_rate (Table: film) | length (Table: film) | replacement_cost (Table: film) | rating (Table: film) | special_features (Table: film) | last_update (Table: film) | actor_id (Table: film_actor) | film_id (Table: film_actor) | last_update (Table: film_actor) | film_id (Table: film_category) | category_id (Table: film_category) | last_update (Table: film_category) | film_id (Table: film_text) | title (Table: film_text) | description (Table: film_text) | inventory_id (Table: inventory) | film_id (Table: inventory) | store_id (Table: inventory) | last_update (Table: inventory) | language_id (Table: language) | name (Table: language) | last_update (Table: language) | payment_id (Table: payment) | customer_id (Table: payment) | staff_id (Table: payment) | rental_id (Table: payment) | amount (Table: payment) | payment_date (Table: payment) | last_update (Table: payment) | rental_id (Table: rental) | rental_date (Table: rental) | inventory_id (Table: rental) | customer_id (Table: rental) | return_date (Table: rental) | staff_id (Table: rental) | last_update (Table: rental) | staff_id (Table: staff) | first_name (Table: staff) | last_name (Table: staff) | address_id (Table: staff) | picture (Table: staff) | email (Table: staff) | store_id (Table: staff) | active (Table: staff) | username (Table: staff) | password (Table: staff) | last_update (Table: staff) | store_id (Table: store) | manager_staff_id (Table: store) | address_id (Table: store) | last_update (Table: store)
What are the total and average enrollment of all schools?,"SELECT sum(enrollment) ,  avg(enrollment) FROM school",* (Table: endowment) | School_id (Table: School) | School_name (Table: School) | Location (Table: School) | Mascot (Table: School) | Enrollment (Table: School) | IHSAA_Class (Table: School) | IHSAA_Football_Class (Table: School) | County (Table: School) | School_id (Table: budget) | Year (Table: budget) | Budgeted (Table: budget) | total_budget_percent_budgeted (Table: budget) | Invested (Table: budget) | total_budget_percent_invested (Table: budget) | Budget_invested_percent (Table: budget) | endowment_id (Table: endowment) | School_id (Table: endowment) | donator_name (Table: endowment) | amount (Table: endowment)
"What are the names, headquarters and founders of the company with the highest revenue?","SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1",* (Table: Products) | Code (Table: Manufacturers) | Name (Table: Manufacturers) | Headquarter (Table: Manufacturers) | Founder (Table: Manufacturers) | Revenue (Table: Manufacturers) | Code (Table: Products) | Name (Table: Products) | Price (Table: Products) | Manufacturer (Table: Products)
List the types of competition and the number of competitions of each type.,"SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type",* (Table: competition_result) | Club_ID (Table: club) | name (Table: club) | Region (Table: club) | Start_year (Table: club) | Rank (Table: club_rank) | Club_ID (Table: club_rank) | Gold (Table: club_rank) | Silver (Table: club_rank) | Bronze (Table: club_rank) | Total (Table: club_rank) | Player_ID (Table: player) | name (Table: player) | Position (Table: player) | Club_ID (Table: player) | Apps (Table: player) | Tries (Table: player) | Goals (Table: player) | Points (Table: player) | Competition_ID (Table: competition) | Year (Table: competition) | Competition_type (Table: competition) | Country (Table: competition) | Competition_ID (Table: competition_result) | Club_ID_1 (Table: competition_result) | Club_ID_2 (Table: competition_result) | Score (Table: competition_result)
"What are the emails of employees with null commission, salary between 7000 and 12000, and who work in department 50?","SELECT email FROM employees WHERE commission_pct  =  ""null"" AND salary BETWEEN 7000 AND 12000 AND department_id = 50",* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
"Show all official native languages that contain the word ""English"".","SELECT Official_native_language FROM country WHERE Official_native_language LIKE ""%English%""",* (Table: player) | Country_id (Table: country) | Country_name (Table: country) | Capital (Table: country) | Official_native_language (Table: country) | Team_id (Table: team) | Name (Table: team) | Season (Table: match_season) | Player (Table: match_season) | Position (Table: match_season) | Country (Table: match_season) | Team (Table: match_season) | Draft_Pick_Number (Table: match_season) | Draft_Class (Table: match_season) | College (Table: match_season) | Player_ID (Table: player) | Player (Table: player) | Years_Played (Table: player) | Total_WL (Table: player) | Singles_WL (Table: player) | Doubles_WL (Table: player) | Team (Table: player)
Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.,"SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  ""John Wen""",* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
when is the hire date for those employees whose first name does not containing the letter M?,SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%',* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
Find the names of all reviewers who have contributed three or more ratings.,SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3,* (Table: Rating) | mID (Table: Movie) | title (Table: Movie) | year (Table: Movie) | director (Table: Movie) | rID (Table: Reviewer) | name (Table: Reviewer) | rID (Table: Rating) | mID (Table: Rating) | stars (Table: Rating) | ratingDate (Table: Rating)
"How many clubs are located at ""HHH""?","SELECT count(*) FROM club WHERE clublocation  =  ""HHH""",* (Table: Member_of_club) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | ClubID (Table: Club) | ClubName (Table: Club) | ClubDesc (Table: Club) | ClubLocation (Table: Club) | StuID (Table: Member_of_club) | ClubID (Table: Member_of_club) | Position (Table: Member_of_club)
What are the course names for courses taught on MTW?,"SELECT CName FROM COURSE WHERE Days  =  ""MTW""",* (Table: Gradeconversion) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty) | DNO (Table: Department) | Division (Table: Department) | DName (Table: Department) | Room (Table: Department) | Building (Table: Department) | DPhone (Table: Department) | FacID (Table: Member_of) | DNO (Table: Member_of) | Appt_Type (Table: Member_of) | CID (Table: Course) | CName (Table: Course) | Credits (Table: Course) | Instructor (Table: Course) | Days (Table: Course) | Hours (Table: Course) | DNO (Table: Course) | StuID (Table: Minor_in) | DNO (Table: Minor_in) | StuID (Table: Enrolled_in) | CID (Table: Enrolled_in) | Grade (Table: Enrolled_in) | lettergrade (Table: Gradeconversion) | gradepoint (Table: Gradeconversion)
What is the total grant amount of the organisations described as research?,SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research',* (Table: Tasks) | document_type_code (Table: Document_Types) | document_description (Table: Document_Types) | document_id (Table: Documents) | document_type_code (Table: Documents) | grant_id (Table: Documents) | sent_date (Table: Documents) | response_received_date (Table: Documents) | other_details (Table: Documents) | grant_id (Table: Grants) | organisation_id (Table: Grants) | grant_amount (Table: Grants) | grant_start_date (Table: Grants) | grant_end_date (Table: Grants) | other_details (Table: Grants) | organisation_type (Table: Organisation_Types) | organisation_type_description (Table: Organisation_Types) | organisation_id (Table: Organisations) | organisation_type (Table: Organisations) | organisation_details (Table: Organisations) | project_id (Table: Project_Outcomes) | outcome_code (Table: Project_Outcomes) | outcome_details (Table: Project_Outcomes) | staff_id (Table: Project_Staff) | project_id (Table: Project_Staff) | role_code (Table: Project_Staff) | date_from (Table: Project_Staff) | date_to (Table: Project_Staff) | other_details (Table: Project_Staff) | project_id (Table: Projects) | organisation_id (Table: Projects) | project_details (Table: Projects) | outcome_code (Table: Research_Outcomes) | outcome_description (Table: Research_Outcomes) | staff_id (Table: Research_Staff) | employer_organisation_id (Table: Research_Staff) | staff_details (Table: Research_Staff) | role_code (Table: Staff_Roles) | role_description (Table: Staff_Roles) | task_id (Table: Tasks) | project_id (Table: Tasks) | task_details (Table: Tasks) | eg Agree Objectives (Table: Tasks)
What are the names of students who took a course in the Fall of 2003?,SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003),* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Find the number of times ROY SWEAZY has reserved a room.,"SELECT count(*) FROM Reservations WHERE FirstName = ""ROY"" AND LastName  =  ""SWEAZY"";",* (Table: Reservations) | RoomId (Table: Rooms) | roomName (Table: Rooms) | beds (Table: Rooms) | bedType (Table: Rooms) | maxOccupancy (Table: Rooms) | basePrice (Table: Rooms) | decor (Table: Rooms) | Code (Table: Reservations) | Room (Table: Reservations) | CheckIn (Table: Reservations) | CheckOut (Table: Reservations) | Rate (Table: Reservations) | LastName (Table: Reservations) | FirstName (Table: Reservations) | Adults (Table: Reservations) | Kids (Table: Reservations)
What is the song in the volume with the maximum weeks on top?,SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1,* (Table: music_festival) | Artist_ID (Table: artist) | Artist (Table: artist) | Age (Table: artist) | Famous_Title (Table: artist) | Famous_Release_date (Table: artist) | Volume_ID (Table: volume) | Volume_Issue (Table: volume) | Issue_Date (Table: volume) | Weeks_on_Top (Table: volume) | Song (Table: volume) | Artist_ID (Table: volume) | ID (Table: music_festival) | Music_Festival (Table: music_festival) | Date_of_ceremony (Table: music_festival) | Category (Table: music_festival) | Volume (Table: music_festival) | Result (Table: music_festival)
What are the details and star ratings of the three hotels with the lowest price ranges?,"SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
Show the addresses of the buildings that have apartments with more than 2 bathrooms.,SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2,* (Table: View_Unit_Status) | building_id (Table: Apartment_Buildings) | building_short_name (Table: Apartment_Buildings) | building_full_name (Table: Apartment_Buildings) | building_description (Table: Apartment_Buildings) | building_address (Table: Apartment_Buildings) | building_manager (Table: Apartment_Buildings) | building_phone (Table: Apartment_Buildings) | apt_id (Table: Apartments) | building_id (Table: Apartments) | apt_type_code (Table: Apartments) | apt_number (Table: Apartments) | bathroom_count (Table: Apartments) | bedroom_count (Table: Apartments) | room_count (Table: Apartments) | apt_id (Table: Apartment_Facilities) | facility_code (Table: Apartment_Facilities) | guest_id (Table: Guests) | gender_code (Table: Guests) | guest_first_name (Table: Guests) | guest_last_name (Table: Guests) | date_of_birth (Table: Guests) | apt_booking_id (Table: Apartment_Bookings) | apt_id (Table: Apartment_Bookings) | guest_id (Table: Apartment_Bookings) | booking_status_code (Table: Apartment_Bookings) | booking_start_date (Table: Apartment_Bookings) | booking_end_date (Table: Apartment_Bookings) | apt_id (Table: View_Unit_Status) | apt_booking_id (Table: View_Unit_Status) | status_date (Table: View_Unit_Status) | available_yn (Table: View_Unit_Status)
"Which customers have an insurance policy with the type code ""Deputy"" or ""Uniform""? Return the customer details.","SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  ""Deputy"" OR t1.policy_type_code  =  ""Uniform""",* (Table: Claims_Processing) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Staff_ID (Table: Staff) | Staff_Details (Table: Staff) | Policy_ID (Table: Policies) | Customer_ID (Table: Policies) | Policy_Type_Code (Table: Policies) | Start_Date (Table: Policies) | End_Date (Table: Policies) | Claim_Header_ID (Table: Claim_Headers) | Claim_Status_Code (Table: Claim_Headers) | Claim_Type_Code (Table: Claim_Headers) | Policy_ID (Table: Claim_Headers) | Date_of_Claim (Table: Claim_Headers) | Date_of_Settlement (Table: Claim_Headers) | Amount_Claimed (Table: Claim_Headers) | Amount_Piad (Table: Claim_Headers) | Claim_ID (Table: Claims_Documents) | Document_Type_Code (Table: Claims_Documents) | Created_by_Staff_ID (Table: Claims_Documents) | Created_Date (Table: Claims_Documents) | Claim_Stage_ID (Table: Claims_Processing_Stages) | Next_Claim_Stage_ID (Table: Claims_Processing_Stages) | Claim_Status_Name (Table: Claims_Processing_Stages) | Claim_Status_Description (Table: Claims_Processing_Stages) | Claim_Processing_ID (Table: Claims_Processing) | Claim_ID (Table: Claims_Processing) | Claim_Outcome_Code (Table: Claims_Processing) | Claim_Stage_ID (Table: Claims_Processing) | Staff_ID (Table: Claims_Processing)
Show the ids of the employees who don't authorize destruction for any document.,SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed,* (Table: Documents_to_be_Destroyed) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Calendar_Date (Table: Ref_Calendar) | Day_Number (Table: Ref_Calendar) | Location_Code (Table: Ref_Locations) | Location_Name (Table: Ref_Locations) | Location_Description (Table: Ref_Locations) | Role_Code (Table: Roles) | Role_Name (Table: Roles) | Role_Description (Table: Roles) | Document_ID (Table: All_Documents) | Date_Stored (Table: All_Documents) | Document_Type_Code (Table: All_Documents) | Document_Name (Table: All_Documents) | Document_Description (Table: All_Documents) | Other_Details (Table: All_Documents) | Employee_ID (Table: Employees) | Role_Code (Table: Employees) | Employee_Name (Table: Employees) | Gender_MFU (Table: Employees) | Date_of_Birth (Table: Employees) | Other_Details (Table: Employees) | Document_ID (Table: Document_Locations) | Location_Code (Table: Document_Locations) | Date_in_Location_From (Table: Document_Locations) | Date_in_Locaton_To (Table: Document_Locations) | Document_ID (Table: Documents_to_be_Destroyed) | Destruction_Authorised_by_Employee_ID (Table: Documents_to_be_Destroyed) | Destroyed_by_Employee_ID (Table: Documents_to_be_Destroyed) | Planned_Destruction_Date (Table: Documents_to_be_Destroyed) | Actual_Destruction_Date (Table: Documents_to_be_Destroyed) | Other_Details (Table: Documents_to_be_Destroyed)
"Which problems are reported by the staff with last name ""Bosco""? Show the ids of the problems.","SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = ""Bosco""",* (Table: Problems) | problem_category_code (Table: Problem_Category_Codes) | problem_category_description (Table: Problem_Category_Codes) | problem_log_id (Table: Problem_Log) | assigned_to_staff_id (Table: Problem_Log) | problem_id (Table: Problem_Log) | problem_category_code (Table: Problem_Log) | problem_status_code (Table: Problem_Log) | log_entry_date (Table: Problem_Log) | log_entry_description (Table: Problem_Log) | log_entry_fix (Table: Problem_Log) | other_log_details (Table: Problem_Log) | problem_status_code (Table: Problem_Status_Codes) | problem_status_description (Table: Problem_Status_Codes) | product_id (Table: Product) | product_name (Table: Product) | product_details (Table: Product) | staff_id (Table: Staff) | staff_first_name (Table: Staff) | staff_last_name (Table: Staff) | other_staff_details (Table: Staff) | problem_id (Table: Problems) | product_id (Table: Problems) | closure_authorised_by_staff_id (Table: Problems) | reported_by_staff_id (Table: Problems) | date_problem_reported (Table: Problems) | date_problem_closed (Table: Problems) | problem_description (Table: Problems) | other_problem_details (Table: Problems)
"Find the start and end dates of behavior incidents of students with last name ""Fahey"".","SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  ""Fahey""",* (Table: Students_in_Detention) | address_type_code (Table: Ref_Address_Types) | address_type_description (Table: Ref_Address_Types) | detention_type_code (Table: Ref_Detention_Type) | detention_type_description (Table: Ref_Detention_Type) | incident_type_code (Table: Ref_Incident_Type) | incident_type_description (Table: Ref_Incident_Type) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | line_3 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | student_id (Table: Students) | address_id (Table: Students) | first_name (Table: Students) | middle_name (Table: Students) | last_name (Table: Students) | cell_mobile_number (Table: Students) | email_address (Table: Students) | date_first_rental (Table: Students) | date_left_university (Table: Students) | other_student_details (Table: Students) | teacher_id (Table: Teachers) | address_id (Table: Teachers) | first_name (Table: Teachers) | middle_name (Table: Teachers) | last_name (Table: Teachers) | gender (Table: Teachers) | cell_mobile_number (Table: Teachers) | email_address (Table: Teachers) | other_details (Table: Teachers) | notes_id (Table: Assessment_Notes) | student_id (Table: Assessment_Notes) | teacher_id (Table: Assessment_Notes) | date_of_notes (Table: Assessment_Notes) | text_of_notes (Table: Assessment_Notes) | other_details (Table: Assessment_Notes) | incident_id (Table: Behavior_Incident) | incident_type_code (Table: Behavior_Incident) | student_id (Table: Behavior_Incident) | date_incident_start (Table: Behavior_Incident) | date_incident_end (Table: Behavior_Incident) | incident_summary (Table: Behavior_Incident) | recommendations (Table: Behavior_Incident) | other_details (Table: Behavior_Incident) | detention_id (Table: Detention) | detention_type_code (Table: Detention) | teacher_id (Table: Detention) | datetime_detention_start (Table: Detention) | datetime_detention_end (Table: Detention) | detention_summary (Table: Detention) | other_details (Table: Detention) | student_id (Table: Student_Addresses) | address_id (Table: Student_Addresses) | date_address_from (Table: Student_Addresses) | date_address_to (Table: Student_Addresses) | monthly_rental (Table: Student_Addresses) | other_details (Table: Student_Addresses) | student_id (Table: Students_in_Detention) | detention_id (Table: Students_in_Detention) | incident_id (Table: Students_in_Detention)
What is the name of the medication used for the patient staying in room 111?,SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111,* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
What are the first names of students studying in room 107?,SELECT DISTINCT firstname FROM list WHERE classroom  =  107,* (Table: teachers) | LastName (Table: list) | FirstName (Table: list) | Grade (Table: list) | Classroom (Table: list) | LastName (Table: teachers) | FirstName (Table: teachers) | Classroom (Table: teachers)
Find the common personal name of course authors and students.,SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students,* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
Show the id and name of the employee with maximum salary.,"SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1",* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
Who are the players that have names containing the letter a?,SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%',* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
What is the total number of students enrolled in schools without any goalies?,"SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  ""goalie"")",* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
Which city does staff with first name as Janessa and last name as Sawayn live?,"SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = ""Janessa"" AND T2.last_name = ""Sawayn"";",* (Table: Lessons) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | staff_id (Table: Staff) | staff_address_id (Table: Staff) | nickname (Table: Staff) | first_name (Table: Staff) | middle_name (Table: Staff) | last_name (Table: Staff) | date_of_birth (Table: Staff) | date_joined_staff (Table: Staff) | date_left_staff (Table: Staff) | vehicle_id (Table: Vehicles) | vehicle_details (Table: Vehicles) | customer_id (Table: Customers) | customer_address_id (Table: Customers) | customer_status_code (Table: Customers) | date_became_customer (Table: Customers) | date_of_birth (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | amount_outstanding (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | cell_mobile_phone_number (Table: Customers) | customer_id (Table: Customer_Payments) | datetime_payment (Table: Customer_Payments) | payment_method_code (Table: Customer_Payments) | amount_payment (Table: Customer_Payments) | lesson_id (Table: Lessons) | customer_id (Table: Lessons) | lesson_status_code (Table: Lessons) | staff_id (Table: Lessons) | vehicle_id (Table: Lessons) | lesson_date (Table: Lessons) | lesson_time (Table: Lessons) | price (Table: Lessons)
What are the name and level of catalog structure with level number between 5 and 10,"SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",* (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Attribute_Definitions) | attribute_name (Table: Attribute_Definitions) | attribute_data_type (Table: Attribute_Definitions) | catalog_id (Table: Catalogs) | catalog_name (Table: Catalogs) | catalog_publisher (Table: Catalogs) | date_of_publication (Table: Catalogs) | date_of_latest_revision (Table: Catalogs) | catalog_level_number (Table: Catalog_Structure) | catalog_id (Table: Catalog_Structure) | catalog_level_name (Table: Catalog_Structure) | catalog_entry_id (Table: Catalog_Contents) | catalog_level_number (Table: Catalog_Contents) | parent_entry_id (Table: Catalog_Contents) | previous_entry_id (Table: Catalog_Contents) | next_entry_id (Table: Catalog_Contents) | catalog_entry_name (Table: Catalog_Contents) | product_stock_number (Table: Catalog_Contents) | price_in_dollars (Table: Catalog_Contents) | price_in_euros (Table: Catalog_Contents) | price_in_pounds (Table: Catalog_Contents) | capacity (Table: Catalog_Contents) | length (Table: Catalog_Contents) | height (Table: Catalog_Contents) | width (Table: Catalog_Contents) | catalog_entry_id (Table: Catalog_Contents_Additional_Attributes) | catalog_level_number (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Catalog_Contents_Additional_Attributes) | attribute_value (Table: Catalog_Contents_Additional_Attributes)
What are the types of competition and number of competitions for that type?,"SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type",* (Table: competition_result) | Club_ID (Table: club) | name (Table: club) | Region (Table: club) | Start_year (Table: club) | Rank (Table: club_rank) | Club_ID (Table: club_rank) | Gold (Table: club_rank) | Silver (Table: club_rank) | Bronze (Table: club_rank) | Total (Table: club_rank) | Player_ID (Table: player) | name (Table: player) | Position (Table: player) | Club_ID (Table: player) | Apps (Table: player) | Tries (Table: player) | Goals (Table: player) | Points (Table: player) | Competition_ID (Table: competition) | Year (Table: competition) | Competition_type (Table: competition) | Country (Table: competition) | Competition_ID (Table: competition_result) | Club_ID_1 (Table: competition_result) | Club_ID_2 (Table: competition_result) | Score (Table: competition_result)
What is the name of the department that has the largest number of students enrolled?,SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1,* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
what are the employee ids and job titles for employees in department 80?,"SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
List the teams of the players with the top 5 largest ages.,SELECT Team FROM player ORDER BY Age DESC LIMIT 5,* (Table: player) | School_ID (Table: school) | School (Table: school) | Location (Table: school) | Enrollment (Table: school) | Founded (Table: school) | Denomination (Table: school) | Boys_or_Girls (Table: school) | Day_or_Boarding (Table: school) | Year_Entered_Competition (Table: school) | School_Colors (Table: school) | School_ID (Table: school_details) | Nickname (Table: school_details) | Colors (Table: school_details) | League (Table: school_details) | Class (Table: school_details) | Division (Table: school_details) | School_Id (Table: school_performance) | School_Year (Table: school_performance) | Class_A (Table: school_performance) | Class_AA (Table: school_performance) | Player_ID (Table: player) | Player (Table: player) | Team (Table: player) | Age (Table: player) | Position (Table: player) | School_ID (Table: player)
What is the name of the entrepreneur with the greatest weight?,SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1,* (Table: people) | Entrepreneur_ID (Table: entrepreneur) | People_ID (Table: entrepreneur) | Company (Table: entrepreneur) | Money_Requested (Table: entrepreneur) | Investor (Table: entrepreneur) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Date_of_Birth (Table: people)
What is the most common competition type?,SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1,* (Table: competition_result) | Club_ID (Table: club) | name (Table: club) | Region (Table: club) | Start_year (Table: club) | Rank (Table: club_rank) | Club_ID (Table: club_rank) | Gold (Table: club_rank) | Silver (Table: club_rank) | Bronze (Table: club_rank) | Total (Table: club_rank) | Player_ID (Table: player) | name (Table: player) | Position (Table: player) | Club_ID (Table: player) | Apps (Table: player) | Tries (Table: player) | Goals (Table: player) | Points (Table: player) | Competition_ID (Table: competition) | Year (Table: competition) | Competition_type (Table: competition) | Country (Table: competition) | Competition_ID (Table: competition_result) | Club_ID_1 (Table: competition_result) | Club_ID_2 (Table: competition_result) | Score (Table: competition_result)
List the companies and the investors of entrepreneurs.,"SELECT Company ,  Investor FROM entrepreneur",* (Table: people) | Entrepreneur_ID (Table: entrepreneur) | People_ID (Table: entrepreneur) | Company (Table: entrepreneur) | Money_Requested (Table: entrepreneur) | Investor (Table: entrepreneur) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Date_of_Birth (Table: people)
How many drivers did not race in 2009?,SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 ),* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
"What are the names and headquarters of all manufacturers, ordered by revenue descending?","SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC",* (Table: Products) | Code (Table: Manufacturers) | Name (Table: Manufacturers) | Headquarter (Table: Manufacturers) | Founder (Table: Manufacturers) | Revenue (Table: Manufacturers) | Code (Table: Products) | Name (Table: Products) | Price (Table: Products) | Manufacturer (Table: Products)
Find the name and gender of the candidate who got the highest support rate.,"SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",* (Table: people) | Candidate_ID (Table: candidate) | People_ID (Table: candidate) | Poll_Source (Table: candidate) | Date (Table: candidate) | Support_rate (Table: candidate) | Consider_rate (Table: candidate) | Oppose_rate (Table: candidate) | Unsure_rate (Table: candidate) | People_ID (Table: people) | Sex (Table: people) | Name (Table: people) | Date_of_Birth (Table: people) | Height (Table: people) | Weight (Table: people)
Find the name of customers who have more than one loan.,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1,* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
Which member names corresponding to members who are not in the Progress Party?,"SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != ""Progress Party""",* (Table: party_events) | Region_ID (Table: region) | Region_name (Table: region) | Date (Table: region) | Label (Table: region) | Format (Table: region) | Catalogue (Table: region) | Party_ID (Table: party) | Minister (Table: party) | Took_office (Table: party) | Left_office (Table: party) | Region_ID (Table: party) | Party_name (Table: party) | Member_ID (Table: member) | Member_Name (Table: member) | Party_ID (Table: member) | In_office (Table: member) | Event_ID (Table: party_events) | Event_Name (Table: party_events) | Party_ID (Table: party_events) | Member_in_charge_ID (Table: party_events)
What is all the customer information for customers in NY state?,"SELECT * FROM CUSTOMER WHERE State  =  ""NY""",* (Table: Track) | AlbumId (Table: Album) | Title (Table: Album) | ArtistId (Table: Album) | ArtistId (Table: Artist) | Name (Table: Artist) | CustomerId (Table: Customer) | FirstName (Table: Customer) | LastName (Table: Customer) | Company (Table: Customer) | Address (Table: Customer) | City (Table: Customer) | State (Table: Customer) | Country (Table: Customer) | PostalCode (Table: Customer) | Phone (Table: Customer) | Fax (Table: Customer) | Email (Table: Customer) | SupportRepId (Table: Customer) | EmployeeId (Table: Employee) | LastName (Table: Employee) | FirstName (Table: Employee) | Title (Table: Employee) | ReportsTo (Table: Employee) | BirthDate (Table: Employee) | HireDate (Table: Employee) | Address (Table: Employee) | City (Table: Employee) | State (Table: Employee) | Country (Table: Employee) | PostalCode (Table: Employee) | Phone (Table: Employee) | Fax (Table: Employee) | Email (Table: Employee) | GenreId (Table: Genre) | Name (Table: Genre) | InvoiceId (Table: Invoice) | CustomerId (Table: Invoice) | InvoiceDate (Table: Invoice) | BillingAddress (Table: Invoice) | BillingCity (Table: Invoice) | BillingState (Table: Invoice) | BillingCountry (Table: Invoice) | BillingPostalCode (Table: Invoice) | Total (Table: Invoice) | InvoiceLineId (Table: InvoiceLine) | InvoiceId (Table: InvoiceLine) | TrackId (Table: InvoiceLine) | UnitPrice (Table: InvoiceLine) | Quantity (Table: InvoiceLine) | MediaTypeId (Table: MediaType) | Name (Table: MediaType) | PlaylistId (Table: Playlist) | Name (Table: Playlist) | PlaylistId (Table: PlaylistTrack) | TrackId (Table: PlaylistTrack) | TrackId (Table: Track) | Name (Table: Track) | AlbumId (Table: Track) | MediaTypeId (Table: Track) | GenreId (Table: Track) | Composer (Table: Track) | Milliseconds (Table: Track) | Bytes (Table: Track) | UnitPrice (Table: Track)
What are the ids of all students who have attended at least one course?,SELECT student_id FROM student_course_attendance,* (Table: Candidate_Assessments) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | person_id (Table: People) | first_name (Table: People) | middle_name (Table: People) | last_name (Table: People) | cell_mobile_number (Table: People) | email_address (Table: People) | login_name (Table: People) | password (Table: People) | student_id (Table: Students) | student_details (Table: Students) | course_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | other_details (Table: Courses) | person_address_id (Table: People_Addresses) | person_id (Table: People_Addresses) | address_id (Table: People_Addresses) | date_from (Table: People_Addresses) | date_to (Table: People_Addresses) | student_id (Table: Student_Course_Registrations) | course_id (Table: Student_Course_Registrations) | registration_date (Table: Student_Course_Registrations) | student_id (Table: Student_Course_Attendance) | course_id (Table: Student_Course_Attendance) | date_of_attendance (Table: Student_Course_Attendance) | candidate_id (Table: Candidates) | candidate_details (Table: Candidates) | candidate_id (Table: Candidate_Assessments) | qualification (Table: Candidate_Assessments) | assessment_date (Table: Candidate_Assessments) | asessment_outcome_code (Table: Candidate_Assessments)
Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.,"SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'",* (Table: store) | actor_id (Table: actor) | first_name (Table: actor) | last_name (Table: actor) | last_update (Table: actor) | address_id (Table: address) | address (Table: address) | address2 (Table: address) | district (Table: address) | city_id (Table: address) | postal_code (Table: address) | phone (Table: address) | last_update (Table: address) | category_id (Table: category) | name (Table: category) | last_update (Table: category) | city_id (Table: city) | city (Table: city) | country_id (Table: city) | last_update (Table: city) | country_id (Table: country) | country (Table: country) | last_update (Table: country) | customer_id (Table: customer) | store_id (Table: customer) | first_name (Table: customer) | last_name (Table: customer) | email (Table: customer) | address_id (Table: customer) | active (Table: customer) | create_date (Table: customer) | last_update (Table: customer) | film_id (Table: film) | title (Table: film) | description (Table: film) | release_year (Table: film) | language_id (Table: film) | original_language_id (Table: film) | rental_duration (Table: film) | rental_rate (Table: film) | length (Table: film) | replacement_cost (Table: film) | rating (Table: film) | special_features (Table: film) | last_update (Table: film) | actor_id (Table: film_actor) | film_id (Table: film_actor) | last_update (Table: film_actor) | film_id (Table: film_category) | category_id (Table: film_category) | last_update (Table: film_category) | film_id (Table: film_text) | title (Table: film_text) | description (Table: film_text) | inventory_id (Table: inventory) | film_id (Table: inventory) | store_id (Table: inventory) | last_update (Table: inventory) | language_id (Table: language) | name (Table: language) | last_update (Table: language) | payment_id (Table: payment) | customer_id (Table: payment) | staff_id (Table: payment) | rental_id (Table: payment) | amount (Table: payment) | payment_date (Table: payment) | last_update (Table: payment) | rental_id (Table: rental) | rental_date (Table: rental) | inventory_id (Table: rental) | customer_id (Table: rental) | return_date (Table: rental) | staff_id (Table: rental) | last_update (Table: rental) | staff_id (Table: staff) | first_name (Table: staff) | last_name (Table: staff) | address_id (Table: staff) | picture (Table: staff) | email (Table: staff) | store_id (Table: staff) | active (Table: staff) | username (Table: staff) | password (Table: staff) | last_update (Table: staff) | store_id (Table: store) | manager_staff_id (Table: store) | address_id (Table: store) | last_update (Table: store)
List names for drivers from Hartford city and younger than 40.,SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40,* (Table: school_bus) | Driver_ID (Table: driver) | Name (Table: driver) | Party (Table: driver) | Home_city (Table: driver) | Age (Table: driver) | School_ID (Table: school) | Grade (Table: school) | School (Table: school) | Location (Table: school) | Type (Table: school) | School_ID (Table: school_bus) | Driver_ID (Table: school_bus) | Years_Working (Table: school_bus) | If_full_time (Table: school_bus)
What is the last name of the student who received an A in the class with the code 10018?,SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018,* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
"Which apartments have type code ""Flat""? Give me their apartment numbers.","SELECT apt_number FROM Apartments WHERE apt_type_code  =  ""Flat""",* (Table: View_Unit_Status) | building_id (Table: Apartment_Buildings) | building_short_name (Table: Apartment_Buildings) | building_full_name (Table: Apartment_Buildings) | building_description (Table: Apartment_Buildings) | building_address (Table: Apartment_Buildings) | building_manager (Table: Apartment_Buildings) | building_phone (Table: Apartment_Buildings) | apt_id (Table: Apartments) | building_id (Table: Apartments) | apt_type_code (Table: Apartments) | apt_number (Table: Apartments) | bathroom_count (Table: Apartments) | bedroom_count (Table: Apartments) | room_count (Table: Apartments) | apt_id (Table: Apartment_Facilities) | facility_code (Table: Apartment_Facilities) | guest_id (Table: Guests) | gender_code (Table: Guests) | guest_first_name (Table: Guests) | guest_last_name (Table: Guests) | date_of_birth (Table: Guests) | apt_booking_id (Table: Apartment_Bookings) | apt_id (Table: Apartment_Bookings) | guest_id (Table: Apartment_Bookings) | booking_status_code (Table: Apartment_Bookings) | booking_start_date (Table: Apartment_Bookings) | booking_end_date (Table: Apartment_Bookings) | apt_id (Table: View_Unit_Status) | apt_booking_id (Table: View_Unit_Status) | status_date (Table: View_Unit_Status) | available_yn (Table: View_Unit_Status)
What are the distinct secretary votes in the fall election cycle?,"SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  ""Fall""",* (Table: Voting_record) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | StuID (Table: Voting_record) | Registration_Date (Table: Voting_record) | Election_Cycle (Table: Voting_record) | President_Vote (Table: Voting_record) | Vice_President_Vote (Table: Voting_record) | Secretary_Vote (Table: Voting_record) | Treasurer_Vote (Table: Voting_record) | Class_President_Vote (Table: Voting_record) | Class_Senator_Vote (Table: Voting_record)
How many wrestlers are there?,SELECT count(*) FROM wrestler,* (Table: Elimination) | Wrestler_ID (Table: wrestler) | Name (Table: wrestler) | Reign (Table: wrestler) | Days_held (Table: wrestler) | Location (Table: wrestler) | Event (Table: wrestler) | Elimination_ID (Table: Elimination) | Wrestler_ID (Table: Elimination) | Team (Table: Elimination) | Eliminated_By (Table: Elimination) | Elimination_Move (Table: Elimination) | Time (Table: Elimination)
Count the total number of roles listed.,SELECT count(*) FROM ROLES,* (Table: Documents_to_be_Destroyed) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Calendar_Date (Table: Ref_Calendar) | Day_Number (Table: Ref_Calendar) | Location_Code (Table: Ref_Locations) | Location_Name (Table: Ref_Locations) | Location_Description (Table: Ref_Locations) | Role_Code (Table: Roles) | Role_Name (Table: Roles) | Role_Description (Table: Roles) | Document_ID (Table: All_Documents) | Date_Stored (Table: All_Documents) | Document_Type_Code (Table: All_Documents) | Document_Name (Table: All_Documents) | Document_Description (Table: All_Documents) | Other_Details (Table: All_Documents) | Employee_ID (Table: Employees) | Role_Code (Table: Employees) | Employee_Name (Table: Employees) | Gender_MFU (Table: Employees) | Date_of_Birth (Table: Employees) | Other_Details (Table: Employees) | Document_ID (Table: Document_Locations) | Location_Code (Table: Document_Locations) | Date_in_Location_From (Table: Document_Locations) | Date_in_Locaton_To (Table: Document_Locations) | Document_ID (Table: Documents_to_be_Destroyed) | Destruction_Authorised_by_Employee_ID (Table: Documents_to_be_Destroyed) | Destroyed_by_Employee_ID (Table: Documents_to_be_Destroyed) | Planned_Destruction_Date (Table: Documents_to_be_Destroyed) | Actual_Destruction_Date (Table: Documents_to_be_Destroyed) | Other_Details (Table: Documents_to_be_Destroyed)
What are the names of reviewers who had rated 3 star and 4 star?,SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4,* (Table: Rating) | mID (Table: Movie) | title (Table: Movie) | year (Table: Movie) | director (Table: Movie) | rID (Table: Reviewer) | name (Table: Reviewer) | rID (Table: Rating) | mID (Table: Rating) | stars (Table: Rating) | ratingDate (Table: Rating)
Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?,"SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
What is the count of states with college students playing in the mid position but not as goalies?,SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'),* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
Provide the last name of the youngest student.,SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student),* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
List the main industry with highest total market value and its number of companies.,"SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",* (Table: station_company) | Company_ID (Table: company) | Rank (Table: company) | Company (Table: company) | Headquarters (Table: company) | Main_Industry (Table: company) | Sales_billion (Table: company) | Profits_billion (Table: company) | Assets_billion (Table: company) | Market_Value (Table: company) | Station_ID (Table: gas_station) | Open_Year (Table: gas_station) | Location (Table: gas_station) | Manager_Name (Table: gas_station) | Vice_Manager_Name (Table: gas_station) | Representative_Name (Table: gas_station) | Station_ID (Table: station_company) | Company_ID (Table: station_company) | Rank_of_the_Year (Table: station_company)
What is the name and the average gpa of department whose students have the highest average gpa?,"SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1",* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
What are the names of the customers and staff members?,SELECT customer_details FROM customers UNION SELECT staff_details FROM staff,* (Table: Claims_Processing) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Staff_ID (Table: Staff) | Staff_Details (Table: Staff) | Policy_ID (Table: Policies) | Customer_ID (Table: Policies) | Policy_Type_Code (Table: Policies) | Start_Date (Table: Policies) | End_Date (Table: Policies) | Claim_Header_ID (Table: Claim_Headers) | Claim_Status_Code (Table: Claim_Headers) | Claim_Type_Code (Table: Claim_Headers) | Policy_ID (Table: Claim_Headers) | Date_of_Claim (Table: Claim_Headers) | Date_of_Settlement (Table: Claim_Headers) | Amount_Claimed (Table: Claim_Headers) | Amount_Piad (Table: Claim_Headers) | Claim_ID (Table: Claims_Documents) | Document_Type_Code (Table: Claims_Documents) | Created_by_Staff_ID (Table: Claims_Documents) | Created_Date (Table: Claims_Documents) | Claim_Stage_ID (Table: Claims_Processing_Stages) | Next_Claim_Stage_ID (Table: Claims_Processing_Stages) | Claim_Status_Name (Table: Claims_Processing_Stages) | Claim_Status_Description (Table: Claims_Processing_Stages) | Claim_Processing_ID (Table: Claims_Processing) | Claim_ID (Table: Claims_Processing) | Claim_Outcome_Code (Table: Claims_Processing) | Claim_Stage_ID (Table: Claims_Processing) | Staff_ID (Table: Claims_Processing)
Give me the average and minimum price (in Euro) of the products.,"SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",* (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Attribute_Definitions) | attribute_name (Table: Attribute_Definitions) | attribute_data_type (Table: Attribute_Definitions) | catalog_id (Table: Catalogs) | catalog_name (Table: Catalogs) | catalog_publisher (Table: Catalogs) | date_of_publication (Table: Catalogs) | date_of_latest_revision (Table: Catalogs) | catalog_level_number (Table: Catalog_Structure) | catalog_id (Table: Catalog_Structure) | catalog_level_name (Table: Catalog_Structure) | catalog_entry_id (Table: Catalog_Contents) | catalog_level_number (Table: Catalog_Contents) | parent_entry_id (Table: Catalog_Contents) | previous_entry_id (Table: Catalog_Contents) | next_entry_id (Table: Catalog_Contents) | catalog_entry_name (Table: Catalog_Contents) | product_stock_number (Table: Catalog_Contents) | price_in_dollars (Table: Catalog_Contents) | price_in_euros (Table: Catalog_Contents) | price_in_pounds (Table: Catalog_Contents) | capacity (Table: Catalog_Contents) | length (Table: Catalog_Contents) | height (Table: Catalog_Contents) | width (Table: Catalog_Contents) | catalog_entry_id (Table: Catalog_Contents_Additional_Attributes) | catalog_level_number (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Catalog_Contents_Additional_Attributes) | attribute_value (Table: Catalog_Contents_Additional_Attributes)
"What are the distinct nominees of the musicals with the award that is not ""Tony Award""?","SELECT DISTINCT Nominee FROM musical WHERE Award != ""Tony Award""",* (Table: actor) | Musical_ID (Table: musical) | Name (Table: musical) | Year (Table: musical) | Award (Table: musical) | Category (Table: musical) | Nominee (Table: musical) | Result (Table: musical) | Actor_ID (Table: actor) | Name (Table: actor) | Musical_ID (Table: actor) | Character (Table: actor) | Duration (Table: actor) | age (Table: actor)
How many branches where have more than average number of memberships are there?,SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch),* (Table: purchase) | Member_ID (Table: member) | Card_Number (Table: member) | Name (Table: member) | Hometown (Table: member) | Level (Table: member) | Branch_ID (Table: branch) | Name (Table: branch) | Open_year (Table: branch) | Address_road (Table: branch) | City (Table: branch) | membership_amount (Table: branch) | Member_ID (Table: membership_register_branch) | Branch_ID (Table: membership_register_branch) | Register_Year (Table: membership_register_branch) | Member_ID (Table: purchase) | Branch_ID (Table: purchase) | Year (Table: purchase) | Total_pounds (Table: purchase)
"Return the decor of the room named ""Recluse and defiance"".","SELECT decor FROM Rooms WHERE roomName  =  ""Recluse and defiance"";",* (Table: Reservations) | RoomId (Table: Rooms) | roomName (Table: Rooms) | beds (Table: Rooms) | bedType (Table: Rooms) | maxOccupancy (Table: Rooms) | basePrice (Table: Rooms) | decor (Table: Rooms) | Code (Table: Reservations) | Room (Table: Reservations) | CheckIn (Table: Reservations) | CheckOut (Table: Reservations) | Rate (Table: Reservations) | LastName (Table: Reservations) | FirstName (Table: Reservations) | Adults (Table: Reservations) | Kids (Table: Reservations)
Which cities served as a host city after 2010?,SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010,* (Table: hosting_city) | City_ID (Table: city) | City (Table: city) | Hanzi (Table: city) | Hanyu_Pinyin (Table: city) | Regional_Population (Table: city) | GDP (Table: city) | Match_ID (Table: match) | Date (Table: match) | Venue (Table: match) | Score (Table: match) | Result (Table: match) | Competition (Table: match) | City_ID (Table: temperature) | Jan (Table: temperature) | Feb (Table: temperature) | Mar (Table: temperature) | Apr (Table: temperature) | Jun (Table: temperature) | Jul (Table: temperature) | Aug (Table: temperature) | Sep (Table: temperature) | Oct (Table: temperature) | Nov (Table: temperature) | Dec (Table: temperature) | Year (Table: hosting_city) | Match_ID (Table: hosting_city) | Host_City (Table: hosting_city)
"Find the name, account type, and account balance of the customer who has the highest credit score.","SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
Which program is broadcast most frequently? Give me the program name.,SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1,* (Table: broadcast_share) | Program_ID (Table: program) | Name (Table: program) | Origin (Table: program) | Launch (Table: program) | Owner (Table: program) | Channel_ID (Table: channel) | Name (Table: channel) | Owner (Table: channel) | Share_in_percent (Table: channel) | Rating_in_percent (Table: channel) | Channel_ID (Table: broadcast) | Program_ID (Table: broadcast) | Time_of_day (Table: broadcast) | Channel_ID (Table: broadcast_share) | Program_ID (Table: broadcast_share) | Date (Table: broadcast_share) | Share_in_percent (Table: broadcast_share)
What is the number of distinct publication dates?,SELECT COUNT (DISTINCT Publication_Date) FROM publication,* (Table: book) | Publication_ID (Table: publication) | Book_ID (Table: publication) | Publisher (Table: publication) | Publication_Date (Table: publication) | Price (Table: publication) | Book_ID (Table: book) | Title (Table: book) | Issues (Table: book) | Writer (Table: book)
Which rank is the most common among captains?,SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1,* (Table: Ship) | Captain_ID (Table: captain) | Name (Table: captain) | Ship_ID (Table: captain) | age (Table: captain) | Class (Table: captain) | Rank (Table: captain) | Ship_ID (Table: Ship) | Name (Table: Ship) | Type (Table: Ship) | Built_Year (Table: Ship) | Class (Table: Ship) | Flag (Table: Ship)
How many buildings are there?,SELECT count(*) FROM building,* (Table: protein) | building_id (Table: building) | Name (Table: building) | Street_address (Table: building) | Years_as_tallest (Table: building) | Height_feet (Table: building) | Floors (Table: building) | Institution_id (Table: Institution) | Institution (Table: Institution) | Location (Table: Institution) | Founded (Table: Institution) | Type (Table: Institution) | Enrollment (Table: Institution) | Team (Table: Institution) | Primary_Conference (Table: Institution) | building_id (Table: Institution) | common_name (Table: protein) | protein_name (Table: protein) | divergence_from_human_lineage (Table: protein) | accession_number (Table: protein) | sequence_length (Table: protein) | sequence_identity_to_human_protein (Table: protein) | Institution_id (Table: protein)
Show the ids of all employees who have authorized destruction.,SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed,* (Table: Documents_to_be_Destroyed) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Calendar_Date (Table: Ref_Calendar) | Day_Number (Table: Ref_Calendar) | Location_Code (Table: Ref_Locations) | Location_Name (Table: Ref_Locations) | Location_Description (Table: Ref_Locations) | Role_Code (Table: Roles) | Role_Name (Table: Roles) | Role_Description (Table: Roles) | Document_ID (Table: All_Documents) | Date_Stored (Table: All_Documents) | Document_Type_Code (Table: All_Documents) | Document_Name (Table: All_Documents) | Document_Description (Table: All_Documents) | Other_Details (Table: All_Documents) | Employee_ID (Table: Employees) | Role_Code (Table: Employees) | Employee_Name (Table: Employees) | Gender_MFU (Table: Employees) | Date_of_Birth (Table: Employees) | Other_Details (Table: Employees) | Document_ID (Table: Document_Locations) | Location_Code (Table: Document_Locations) | Date_in_Location_From (Table: Document_Locations) | Date_in_Locaton_To (Table: Document_Locations) | Document_ID (Table: Documents_to_be_Destroyed) | Destruction_Authorised_by_Employee_ID (Table: Documents_to_be_Destroyed) | Destroyed_by_Employee_ID (Table: Documents_to_be_Destroyed) | Planned_Destruction_Date (Table: Documents_to_be_Destroyed) | Actual_Destruction_Date (Table: Documents_to_be_Destroyed) | Other_Details (Table: Documents_to_be_Destroyed)
Find the semester and year which has the least number of student taking any class.,"SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
What are the names of people in ascending alphabetical order?,SELECT Name FROM People ORDER BY Name ASC,* (Table: people) | Gymnast_ID (Table: gymnast) | Floor_Exercise_Points (Table: gymnast) | Pommel_Horse_Points (Table: gymnast) | Rings_Points (Table: gymnast) | Vault_Points (Table: gymnast) | Parallel_Bars_Points (Table: gymnast) | Horizontal_Bar_Points (Table: gymnast) | Total_Points (Table: gymnast) | People_ID (Table: people) | Name (Table: people) | Age (Table: people) | Height (Table: people) | Hometown (Table: people)
Find how many school locations have the word 'NY'.,"SELECT count(*) FROM university WHERE LOCATION LIKE ""%NY%""",* (Table: university) | Team_ID (Table: basketball_match) | School_ID (Table: basketball_match) | Team_Name (Table: basketball_match) | ACC_Regular_Season (Table: basketball_match) | ACC_Percent (Table: basketball_match) | ACC_Home (Table: basketball_match) | ACC_Road (Table: basketball_match) | All_Games (Table: basketball_match) | All_Games_Percent (Table: basketball_match) | All_Home (Table: basketball_match) | All_Road (Table: basketball_match) | All_Neutral (Table: basketball_match) | School_ID (Table: university) | School (Table: university) | Location (Table: university) | Founded (Table: university) | Affiliation (Table: university) | Enrollment (Table: university) | Nickname (Table: university) | Primary_conference (Table: university)
Find distinct cities of addresses of people?,SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id,* (Table: Candidate_Assessments) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | person_id (Table: People) | first_name (Table: People) | middle_name (Table: People) | last_name (Table: People) | cell_mobile_number (Table: People) | email_address (Table: People) | login_name (Table: People) | password (Table: People) | student_id (Table: Students) | student_details (Table: Students) | course_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | other_details (Table: Courses) | person_address_id (Table: People_Addresses) | person_id (Table: People_Addresses) | address_id (Table: People_Addresses) | date_from (Table: People_Addresses) | date_to (Table: People_Addresses) | student_id (Table: Student_Course_Registrations) | course_id (Table: Student_Course_Registrations) | registration_date (Table: Student_Course_Registrations) | student_id (Table: Student_Course_Attendance) | course_id (Table: Student_Course_Attendance) | date_of_attendance (Table: Student_Course_Attendance) | candidate_id (Table: Candidates) | candidate_details (Table: Candidates) | candidate_id (Table: Candidate_Assessments) | qualification (Table: Candidate_Assessments) | assessment_date (Table: Candidate_Assessments) | asessment_outcome_code (Table: Candidate_Assessments)
Find the first names of professors who are teaching more than one class.,SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1,* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
Find the entry name of the catalog with the highest price (in USD).,SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1,* (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Attribute_Definitions) | attribute_name (Table: Attribute_Definitions) | attribute_data_type (Table: Attribute_Definitions) | catalog_id (Table: Catalogs) | catalog_name (Table: Catalogs) | catalog_publisher (Table: Catalogs) | date_of_publication (Table: Catalogs) | date_of_latest_revision (Table: Catalogs) | catalog_level_number (Table: Catalog_Structure) | catalog_id (Table: Catalog_Structure) | catalog_level_name (Table: Catalog_Structure) | catalog_entry_id (Table: Catalog_Contents) | catalog_level_number (Table: Catalog_Contents) | parent_entry_id (Table: Catalog_Contents) | previous_entry_id (Table: Catalog_Contents) | next_entry_id (Table: Catalog_Contents) | catalog_entry_name (Table: Catalog_Contents) | product_stock_number (Table: Catalog_Contents) | price_in_dollars (Table: Catalog_Contents) | price_in_euros (Table: Catalog_Contents) | price_in_pounds (Table: Catalog_Contents) | capacity (Table: Catalog_Contents) | length (Table: Catalog_Contents) | height (Table: Catalog_Contents) | width (Table: Catalog_Contents) | catalog_entry_id (Table: Catalog_Contents_Additional_Attributes) | catalog_level_number (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Catalog_Contents_Additional_Attributes) | attribute_value (Table: Catalog_Contents_Additional_Attributes)
"What is the average points of players from club with name ""AIB"".","SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  ""AIB""",* (Table: competition_result) | Club_ID (Table: club) | name (Table: club) | Region (Table: club) | Start_year (Table: club) | Rank (Table: club_rank) | Club_ID (Table: club_rank) | Gold (Table: club_rank) | Silver (Table: club_rank) | Bronze (Table: club_rank) | Total (Table: club_rank) | Player_ID (Table: player) | name (Table: player) | Position (Table: player) | Club_ID (Table: player) | Apps (Table: player) | Tries (Table: player) | Goals (Table: player) | Points (Table: player) | Competition_ID (Table: competition) | Year (Table: competition) | Competition_type (Table: competition) | Country (Table: competition) | Competition_ID (Table: competition_result) | Club_ID_1 (Table: competition_result) | Club_ID_2 (Table: competition_result) | Score (Table: competition_result)
What are the lot details of lots associated with transactions with share count smaller than 50?,SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50,* (Table: Transactions_Lots) | investor_id (Table: Investors) | Investor_details (Table: Investors) | lot_id (Table: Lots) | investor_id (Table: Lots) | lot_details (Table: Lots) | transaction_type_code (Table: Ref_Transaction_Types) | transaction_type_description (Table: Ref_Transaction_Types) | transaction_id (Table: Transactions) | investor_id (Table: Transactions) | transaction_type_code (Table: Transactions) | date_of_transaction (Table: Transactions) | amount_of_transaction (Table: Transactions) | share_count (Table: Transactions) | other_details (Table: Transactions) | sales_transaction_id (Table: Sales) | sales_details (Table: Sales) | purchase_transaction_id (Table: Purchases) | purchase_details (Table: Purchases) | transaction_id (Table: Transactions_Lots) | lot_id (Table: Transactions_Lots)
"Find the name of the products that have the color description ""red"" and have the characteristic name ""fast"".","SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  ""red"" AND t3.characteristic_name  =  ""fast""",* (Table: Product_Characteristics) | characteristic_type_code (Table: Ref_Characteristic_Types) | characteristic_type_description (Table: Ref_Characteristic_Types) | color_code (Table: Ref_Colors) | color_description (Table: Ref_Colors) | product_category_code (Table: Ref_Product_Categories) | product_category_description (Table: Ref_Product_Categories) | unit_of_measure (Table: Ref_Product_Categories) | characteristic_id (Table: Characteristics) | characteristic_type_code (Table: Characteristics) | characteristic_data_type (Table: Characteristics) | characteristic_name (Table: Characteristics) | other_characteristic_details (Table: Characteristics) | product_id (Table: Products) | color_code (Table: Products) | product_category_code (Table: Products) | product_name (Table: Products) | typical_buying_price (Table: Products) | typical_selling_price (Table: Products) | product_description (Table: Products) | other_product_details (Table: Products) | product_id (Table: Product_Characteristics) | characteristic_id (Table: Product_Characteristics) | product_characteristic_value (Table: Product_Characteristics)
Show the minister who took office after 1961 or before 1959.,SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959,* (Table: party_events) | Region_ID (Table: region) | Region_name (Table: region) | Date (Table: region) | Label (Table: region) | Format (Table: region) | Catalogue (Table: region) | Party_ID (Table: party) | Minister (Table: party) | Took_office (Table: party) | Left_office (Table: party) | Region_ID (Table: party) | Party_name (Table: party) | Member_ID (Table: member) | Member_Name (Table: member) | Party_ID (Table: member) | In_office (Table: member) | Event_ID (Table: party_events) | Event_Name (Table: party_events) | Party_ID (Table: party_events) | Member_in_charge_ID (Table: party_events)
Find the names of students who have taken any course in the fall semester of year 2003.,SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003),* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Find the student ID and middle name for all the students with at most two enrollments.,"SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2",* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
What are the names of all aircrafts that have won a match at least twice?,SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2,* (Table: airport_aircraft) | Pilot_Id (Table: pilot) | Name (Table: pilot) | Age (Table: pilot) | Aircraft_ID (Table: aircraft) | Aircraft (Table: aircraft) | Description (Table: aircraft) | Max_Gross_Weight (Table: aircraft) | Total_disk_area (Table: aircraft) | Max_disk_Loading (Table: aircraft) | Round (Table: match) | Location (Table: match) | Country (Table: match) | Date (Table: match) | Fastest_Qualifying (Table: match) | Winning_Pilot (Table: match) | Winning_Aircraft (Table: match) | Airport_ID (Table: airport) | Airport_Name (Table: airport) | Total_Passengers (Table: airport) | %_Change_2007 (Table: airport) | International_Passengers (Table: airport) | Domestic_Passengers (Table: airport) | Transit_Passengers (Table: airport) | Aircraft_Movements (Table: airport) | Freight_Metric_Tonnes (Table: airport) | ID (Table: airport_aircraft) | Airport_ID (Table: airport_aircraft) | Aircraft_ID (Table: airport_aircraft)
What is the average high temperature for each day of week?,"SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week",* (Table: weekly_weather) | id (Table: train) | train_number (Table: train) | name (Table: train) | origin (Table: train) | destination (Table: train) | time (Table: train) | interval (Table: train) | id (Table: station) | network_name (Table: station) | services (Table: station) | local_authority (Table: station) | train_id (Table: route) | station_id (Table: route) | station_id (Table: weekly_weather) | day_of_week (Table: weekly_weather) | high_temperature (Table: weekly_weather) | low_temperature (Table: weekly_weather) | precipitation (Table: weekly_weather) | wind_speed_mph (Table: weekly_weather)
Give me all the phone numbers and email addresses of the workshop groups where services are performed.,"SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID",* (Table: Invoice_Items) | payment_method_code (Table: Ref_Payment_Methods) | payment_method_description (Table: Ref_Payment_Methods) | Service_Type_Code (Table: Ref_Service_Types) | Parent_Service_Type_Code (Table: Ref_Service_Types) | Service_Type_Description (Table: Ref_Service_Types) | Address_ID (Table: Addresses) | Line_1 (Table: Addresses) | Line_2 (Table: Addresses) | City_Town (Table: Addresses) | State_County (Table: Addresses) | Other_Details (Table: Addresses) | Product_ID (Table: Products) | Product_Name (Table: Products) | Product_Price (Table: Products) | Product_Description (Table: Products) | Other_Product_Service_Details (Table: Products) | Marketing_Region_Code (Table: Marketing_Regions) | Marketing_Region_Name (Table: Marketing_Regions) | Marketing_Region_Descriptrion (Table: Marketing_Regions) | Other_Details (Table: Marketing_Regions) | Client_ID (Table: Clients) | Address_ID (Table: Clients) | Customer_Email_Address (Table: Clients) | Customer_Name (Table: Clients) | Customer_Phone (Table: Clients) | Other_Details (Table: Clients) | Workshop_Group_ID (Table: Drama_Workshop_Groups) | Address_ID (Table: Drama_Workshop_Groups) | Currency_Code (Table: Drama_Workshop_Groups) | Marketing_Region_Code (Table: Drama_Workshop_Groups) | Store_Name (Table: Drama_Workshop_Groups) | Store_Phone (Table: Drama_Workshop_Groups) | Store_Email_Address (Table: Drama_Workshop_Groups) | Other_Details (Table: Drama_Workshop_Groups) | Performer_ID (Table: Performers) | Address_ID (Table: Performers) | Customer_Name (Table: Performers) | Customer_Phone (Table: Performers) | Customer_Email_Address (Table: Performers) | Other_Details (Table: Performers) | Customer_ID (Table: Customers) | Address_ID (Table: Customers) | Customer_Name (Table: Customers) | Customer_Phone (Table: Customers) | Customer_Email_Address (Table: Customers) | Other_Details (Table: Customers) | Store_ID (Table: Stores) | Address_ID (Table: Stores) | Marketing_Region_Code (Table: Stores) | Store_Name (Table: Stores) | Store_Phone (Table: Stores) | Store_Email_Address (Table: Stores) | Other_Details (Table: Stores) | Booking_ID (Table: Bookings) | Customer_ID (Table: Bookings) | Workshop_Group_ID (Table: Bookings) | Status_Code (Table: Bookings) | Store_ID (Table: Bookings) | Order_Date (Table: Bookings) | Planned_Delivery_Date (Table: Bookings) | Actual_Delivery_Date (Table: Bookings) | Other_Order_Details (Table: Bookings) | Order_ID (Table: Performers_in_Bookings) | Performer_ID (Table: Performers_in_Bookings) | Order_ID (Table: Customer_Orders) | Customer_ID (Table: Customer_Orders) | Store_ID (Table: Customer_Orders) | Order_Date (Table: Customer_Orders) | Planned_Delivery_Date (Table: Customer_Orders) | Actual_Delivery_Date (Table: Customer_Orders) | Other_Order_Details (Table: Customer_Orders) | Order_Item_ID (Table: Order_Items) | Order_ID (Table: Order_Items) | Product_ID (Table: Order_Items) | Order_Quantity (Table: Order_Items) | Other_Item_Details (Table: Order_Items) | Invoice_ID (Table: Invoices) | Order_ID (Table: Invoices) | payment_method_code (Table: Invoices) | Product_ID (Table: Invoices) | Order_Quantity (Table: Invoices) | Other_Item_Details (Table: Invoices) | Order_Item_ID (Table: Invoices) | Service_ID (Table: Services) | Service_Type_Code (Table: Services) | Workshop_Group_ID (Table: Services) | Product_Description (Table: Services) | Product_Name (Table: Services) | Product_Price (Table: Services) | Other_Product_Service_Details (Table: Services) | Order_ID (Table: Bookings_Services) | Product_ID (Table: Bookings_Services) | Invoice_Item_ID (Table: Invoice_Items) | Invoice_ID (Table: Invoice_Items) | Order_ID (Table: Invoice_Items) | Order_Item_ID (Table: Invoice_Items) | Product_ID (Table: Invoice_Items) | Order_Quantity (Table: Invoice_Items) | Other_Item_Details (Table: Invoice_Items)
"What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",SELECT team_name FROM basketball_match ORDER BY All_Home DESC,* (Table: university) | Team_ID (Table: basketball_match) | School_ID (Table: basketball_match) | Team_Name (Table: basketball_match) | ACC_Regular_Season (Table: basketball_match) | ACC_Percent (Table: basketball_match) | ACC_Home (Table: basketball_match) | ACC_Road (Table: basketball_match) | All_Games (Table: basketball_match) | All_Games_Percent (Table: basketball_match) | All_Home (Table: basketball_match) | All_Road (Table: basketball_match) | All_Neutral (Table: basketball_match) | School_ID (Table: university) | School (Table: university) | Location (Table: university) | Founded (Table: university) | Affiliation (Table: university) | Enrollment (Table: university) | Nickname (Table: university) | Primary_conference (Table: university)
Find the first names of all the authors ordered in alphabetical order.,SELECT fname FROM authors ORDER BY fname,* (Table: Authorship) | instID (Table: Inst) | name (Table: Inst) | country (Table: Inst) | authID (Table: Authors) | lname (Table: Authors) | fname (Table: Authors) | paperID (Table: Papers) | title (Table: Papers) | authID (Table: Authorship) | instID (Table: Authorship) | paperID (Table: Authorship) | authOrder (Table: Authorship)
What is the city with the most customers?,SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;,* (Table: Lessons) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | staff_id (Table: Staff) | staff_address_id (Table: Staff) | nickname (Table: Staff) | first_name (Table: Staff) | middle_name (Table: Staff) | last_name (Table: Staff) | date_of_birth (Table: Staff) | date_joined_staff (Table: Staff) | date_left_staff (Table: Staff) | vehicle_id (Table: Vehicles) | vehicle_details (Table: Vehicles) | customer_id (Table: Customers) | customer_address_id (Table: Customers) | customer_status_code (Table: Customers) | date_became_customer (Table: Customers) | date_of_birth (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | amount_outstanding (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | cell_mobile_phone_number (Table: Customers) | customer_id (Table: Customer_Payments) | datetime_payment (Table: Customer_Payments) | payment_method_code (Table: Customer_Payments) | amount_payment (Table: Customer_Payments) | lesson_id (Table: Lessons) | customer_id (Table: Lessons) | lesson_status_code (Table: Lessons) | staff_id (Table: Lessons) | vehicle_id (Table: Lessons) | lesson_date (Table: Lessons) | lesson_time (Table: Lessons) | price (Table: Lessons)
How many council taxes are collected for renting arrears ?,SELECT count(*) FROM rent_arrears,* (Table: Electoral_Register) | master_customer_id (Table: Customer_Master_Index) | cmi_details (Table: Customer_Master_Index) | cmi_cross_ref_id (Table: CMI_Cross_References) | master_customer_id (Table: CMI_Cross_References) | source_system_code (Table: CMI_Cross_References) | council_tax_id (Table: Council_Tax) | cmi_cross_ref_id (Table: Council_Tax) | business_rates_id (Table: Business_Rates) | cmi_cross_ref_id (Table: Business_Rates) | council_tax_id (Table: Benefits_Overpayments) | cmi_cross_ref_id (Table: Benefits_Overpayments) | council_tax_id (Table: Parking_Fines) | cmi_cross_ref_id (Table: Parking_Fines) | council_tax_id (Table: Rent_Arrears) | cmi_cross_ref_id (Table: Rent_Arrears) | electoral_register_id (Table: Electoral_Register) | cmi_cross_ref_id (Table: Electoral_Register)
What is the average capacity of the stadiums that were opened in year 2005?,SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005,* (Table: record) | ID (Table: swimmer) | name (Table: swimmer) | Nationality (Table: swimmer) | meter_100 (Table: swimmer) | meter_200 (Table: swimmer) | meter_300 (Table: swimmer) | meter_400 (Table: swimmer) | meter_500 (Table: swimmer) | meter_600 (Table: swimmer) | meter_700 (Table: swimmer) | Time (Table: swimmer) | ID (Table: stadium) | name (Table: stadium) | Capacity (Table: stadium) | City (Table: stadium) | Country (Table: stadium) | Opening_year (Table: stadium) | ID (Table: event) | Name (Table: event) | Stadium_ID (Table: event) | Year (Table: event) | ID (Table: record) | Result (Table: record) | Swimmer_ID (Table: record) | Event_ID (Table: record)
"Find the first names and last names of the authors whose institution affiliation is ""Google"".","SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""Google""",* (Table: Authorship) | instID (Table: Inst) | name (Table: Inst) | country (Table: Inst) | authID (Table: Authors) | lname (Table: Authors) | fname (Table: Authors) | paperID (Table: Papers) | title (Table: Papers) | authID (Table: Authorship) | instID (Table: Authorship) | paperID (Table: Authorship) | authOrder (Table: Authorship)
"Find the titles of all the papers written by ""Aaron Turon"".","SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  ""Aaron"" AND t1.lname  =  ""Turon""",* (Table: Authorship) | instID (Table: Inst) | name (Table: Inst) | country (Table: Inst) | authID (Table: Authors) | lname (Table: Authors) | fname (Table: Authors) | paperID (Table: Papers) | title (Table: Papers) | authID (Table: Authorship) | instID (Table: Authorship) | paperID (Table: Authorship) | authOrder (Table: Authorship)
Which apartment type code is the most common among apartments with more than one bathroom?,SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1,* (Table: View_Unit_Status) | building_id (Table: Apartment_Buildings) | building_short_name (Table: Apartment_Buildings) | building_full_name (Table: Apartment_Buildings) | building_description (Table: Apartment_Buildings) | building_address (Table: Apartment_Buildings) | building_manager (Table: Apartment_Buildings) | building_phone (Table: Apartment_Buildings) | apt_id (Table: Apartments) | building_id (Table: Apartments) | apt_type_code (Table: Apartments) | apt_number (Table: Apartments) | bathroom_count (Table: Apartments) | bedroom_count (Table: Apartments) | room_count (Table: Apartments) | apt_id (Table: Apartment_Facilities) | facility_code (Table: Apartment_Facilities) | guest_id (Table: Guests) | gender_code (Table: Guests) | guest_first_name (Table: Guests) | guest_last_name (Table: Guests) | date_of_birth (Table: Guests) | apt_booking_id (Table: Apartment_Bookings) | apt_id (Table: Apartment_Bookings) | guest_id (Table: Apartment_Bookings) | booking_status_code (Table: Apartment_Bookings) | booking_start_date (Table: Apartment_Bookings) | booking_end_date (Table: Apartment_Bookings) | apt_id (Table: View_Unit_Status) | apt_booking_id (Table: View_Unit_Status) | status_date (Table: View_Unit_Status) | available_yn (Table: View_Unit_Status)
Show the distinct venues of debates,SELECT DISTINCT Venue FROM debate,* (Table: debate_people) | People_ID (Table: people) | District (Table: people) | Name (Table: people) | Party (Table: people) | Age (Table: people) | Debate_ID (Table: debate) | Date (Table: debate) | Venue (Table: debate) | Num_of_Audience (Table: debate) | Debate_ID (Table: debate_people) | Affirmative (Table: debate_people) | Negative (Table: debate_people) | If_Affirmative_Win (Table: debate_people)
Show customer ids who don't have an account.,SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts,* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
Find the email and phone number of the customers who have never filed a complaint before.,"SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",* (Table: Complaints) | staff_id (Table: Staff) | gender (Table: Staff) | first_name (Table: Staff) | last_name (Table: Staff) | email_address (Table: Staff) | phone_number (Table: Staff) | customer_id (Table: Customers) | customer_type_code (Table: Customers) | address_line_1 (Table: Customers) | address_line_2 (Table: Customers) | town_city (Table: Customers) | state (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | product_id (Table: Products) | parent_product_id (Table: Products) | product_category_code (Table: Products) | date_product_first_available (Table: Products) | date_product_discontinued (Table: Products) | product_name (Table: Products) | product_description (Table: Products) | product_price (Table: Products) | complaint_id (Table: Complaints) | product_id (Table: Complaints) | customer_id (Table: Complaints) | complaint_outcome_code (Table: Complaints) | complaint_status_code (Table: Complaints) | complaint_type_code (Table: Complaints) | date_complaint_raised (Table: Complaints) | date_complaint_closed (Table: Complaints) | staff_id (Table: Complaints)
What are the names of wrestlers who have never been eliminated?,SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination),* (Table: Elimination) | Wrestler_ID (Table: wrestler) | Name (Table: wrestler) | Reign (Table: wrestler) | Days_held (Table: wrestler) | Location (Table: wrestler) | Event (Table: wrestler) | Elimination_ID (Table: Elimination) | Wrestler_ID (Table: Elimination) | Team (Table: Elimination) | Eliminated_By (Table: Elimination) | Elimination_Move (Table: Elimination) | Time (Table: Elimination)
What is the title of the course that is a prerequisite for Mobile Computing?,SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing'),* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
What are the codes of the locations with at least three documents?,SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3,* (Table: Documents_to_be_Destroyed) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Calendar_Date (Table: Ref_Calendar) | Day_Number (Table: Ref_Calendar) | Location_Code (Table: Ref_Locations) | Location_Name (Table: Ref_Locations) | Location_Description (Table: Ref_Locations) | Role_Code (Table: Roles) | Role_Name (Table: Roles) | Role_Description (Table: Roles) | Document_ID (Table: All_Documents) | Date_Stored (Table: All_Documents) | Document_Type_Code (Table: All_Documents) | Document_Name (Table: All_Documents) | Document_Description (Table: All_Documents) | Other_Details (Table: All_Documents) | Employee_ID (Table: Employees) | Role_Code (Table: Employees) | Employee_Name (Table: Employees) | Gender_MFU (Table: Employees) | Date_of_Birth (Table: Employees) | Other_Details (Table: Employees) | Document_ID (Table: Document_Locations) | Location_Code (Table: Document_Locations) | Date_in_Location_From (Table: Document_Locations) | Date_in_Locaton_To (Table: Document_Locations) | Document_ID (Table: Documents_to_be_Destroyed) | Destruction_Authorised_by_Employee_ID (Table: Documents_to_be_Destroyed) | Destroyed_by_Employee_ID (Table: Documents_to_be_Destroyed) | Planned_Destruction_Date (Table: Documents_to_be_Destroyed) | Actual_Destruction_Date (Table: Documents_to_be_Destroyed) | Other_Details (Table: Documents_to_be_Destroyed)
How many distinct kinds of injuries happened after season 2010?,SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010,* (Table: injury_accident) | id (Table: stadium) | name (Table: stadium) | Home_Games (Table: stadium) | Average_Attendance (Table: stadium) | Total_Attendance (Table: stadium) | Capacity_Percentage (Table: stadium) | stadium_id (Table: game) | id (Table: game) | Season (Table: game) | Date (Table: game) | Home_team (Table: game) | Away_team (Table: game) | Score (Table: game) | Competition (Table: game) | game_id (Table: injury_accident) | id (Table: injury_accident) | Player (Table: injury_accident) | Injury (Table: injury_accident) | Number_of_matches (Table: injury_accident) | Source (Table: injury_accident)
"What are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed?","SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details",* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
How many students live in each city and what are their average ages?,"SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
Show all customer ids and the number of cards owned by each customer.,"SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id",* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
Find the type code of the most frequently used policy.,SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1,* (Table: Claims_Processing) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Staff_ID (Table: Staff) | Staff_Details (Table: Staff) | Policy_ID (Table: Policies) | Customer_ID (Table: Policies) | Policy_Type_Code (Table: Policies) | Start_Date (Table: Policies) | End_Date (Table: Policies) | Claim_Header_ID (Table: Claim_Headers) | Claim_Status_Code (Table: Claim_Headers) | Claim_Type_Code (Table: Claim_Headers) | Policy_ID (Table: Claim_Headers) | Date_of_Claim (Table: Claim_Headers) | Date_of_Settlement (Table: Claim_Headers) | Amount_Claimed (Table: Claim_Headers) | Amount_Piad (Table: Claim_Headers) | Claim_ID (Table: Claims_Documents) | Document_Type_Code (Table: Claims_Documents) | Created_by_Staff_ID (Table: Claims_Documents) | Created_Date (Table: Claims_Documents) | Claim_Stage_ID (Table: Claims_Processing_Stages) | Next_Claim_Stage_ID (Table: Claims_Processing_Stages) | Claim_Status_Name (Table: Claims_Processing_Stages) | Claim_Status_Description (Table: Claims_Processing_Stages) | Claim_Processing_ID (Table: Claims_Processing) | Claim_ID (Table: Claims_Processing) | Claim_Outcome_Code (Table: Claims_Processing) | Claim_Stage_ID (Table: Claims_Processing) | Staff_ID (Table: Claims_Processing)
"Find the names and descriptions of the photos taken at the tourist attraction called ""film festival"".","SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  ""film festival""",* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
How many rooms are there?,SELECT count(*) FROM Rooms;,* (Table: Reservations) | RoomId (Table: Rooms) | roomName (Table: Rooms) | beds (Table: Rooms) | bedType (Table: Rooms) | maxOccupancy (Table: Rooms) | basePrice (Table: Rooms) | decor (Table: Rooms) | Code (Table: Reservations) | Room (Table: Reservations) | CheckIn (Table: Reservations) | CheckOut (Table: Reservations) | Rate (Table: Reservations) | LastName (Table: Reservations) | FirstName (Table: Reservations) | Adults (Table: Reservations) | Kids (Table: Reservations)
Return the most frequent result across all musicals.,SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1,* (Table: actor) | Musical_ID (Table: musical) | Name (Table: musical) | Year (Table: musical) | Award (Table: musical) | Category (Table: musical) | Nominee (Table: musical) | Result (Table: musical) | Actor_ID (Table: actor) | Name (Table: actor) | Musical_ID (Table: actor) | Character (Table: actor) | Duration (Table: actor) | age (Table: actor)
"Which course author teaches the ""advanced database"" course? Give me his or her login name.","SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  ""advanced database""",* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
What are the amenities in alphabetical order that Anonymous Donor Hall has?,SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name,* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
What are the issue dates of volumes associated with the artist aged 23 or younger?,SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23,* (Table: music_festival) | Artist_ID (Table: artist) | Artist (Table: artist) | Age (Table: artist) | Famous_Title (Table: artist) | Famous_Release_date (Table: artist) | Volume_ID (Table: volume) | Volume_Issue (Table: volume) | Issue_Date (Table: volume) | Weeks_on_Top (Table: volume) | Song (Table: volume) | Artist_ID (Table: volume) | ID (Table: music_festival) | Music_Festival (Table: music_festival) | Date_of_ceremony (Table: music_festival) | Category (Table: music_festival) | Volume (Table: music_festival) | Result (Table: music_festival)
Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.,"SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC",* (Table: round) | College_ID (Table: college) | Name (Table: college) | Leader_Name (Table: college) | College_Location (Table: college) | Member_ID (Table: member) | Name (Table: member) | Country (Table: member) | College_ID (Table: member) | Round_ID (Table: round) | Member_ID (Table: round) | Decoration_Theme (Table: round) | Rank_in_Round (Table: round)
How many members have the black membership card?,SELECT count(*) FROM member WHERE Membership_card  =  'Black',* (Table: happy_hour_member) | Shop_ID (Table: shop) | Address (Table: shop) | Num_of_staff (Table: shop) | Score (Table: shop) | Open_Year (Table: shop) | Member_ID (Table: member) | Name (Table: member) | Membership_card (Table: member) | Age (Table: member) | Time_of_purchase (Table: member) | Level_of_membership (Table: member) | Address (Table: member) | HH_ID (Table: happy_hour) | Shop_ID (Table: happy_hour) | Month (Table: happy_hour) | Num_of_shaff_in_charge (Table: happy_hour) | HH_ID (Table: happy_hour_member) | Member_ID (Table: happy_hour_member) | Total_amount (Table: happy_hour_member)
"List name, dates active, and number of deaths for all storms with at least 1 death.","SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1",* (Table: affected_region) | Storm_ID (Table: storm) | Name (Table: storm) | Dates_active (Table: storm) | Max_speed (Table: storm) | Damage_millions_USD (Table: storm) | Number_Deaths (Table: storm) | Region_id (Table: region) | Region_code (Table: region) | Region_name (Table: region) | Region_id (Table: affected_region) | Storm_ID (Table: affected_region) | Number_city_affected (Table: affected_region)
"What are the names of organizations that contain the word ""Party""?","SELECT organization_name FROM organizations WHERE organization_name LIKE ""%Party%""",* (Table: Party_Services) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | town_city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | service_id (Table: Services) | service_type_code (Table: Services) | service_name (Table: Services) | service_descriptio (Table: Services) | form_id (Table: Forms) | form_type_code (Table: Forms) | service_id (Table: Forms) | form_number (Table: Forms) | form_name (Table: Forms) | form_description (Table: Forms) | individual_id (Table: Individuals) | individual_first_name (Table: Individuals) | individual_middle_name (Table: Individuals) | inidividual_phone (Table: Individuals) | individual_email (Table: Individuals) | individual_address (Table: Individuals) | individual_last_name (Table: Individuals) | organization_id (Table: Organizations) | date_formed (Table: Organizations) | organization_name (Table: Organizations) | uk_vat_number (Table: Organizations) | party_id (Table: Parties) | payment_method_code (Table: Parties) | party_phone (Table: Parties) | party_email (Table: Parties) | individual_id (Table: Organization_Contact_Individuals) | organization_id (Table: Organization_Contact_Individuals) | date_contact_from (Table: Organization_Contact_Individuals) | date_contact_to (Table: Organization_Contact_Individuals) | party_id (Table: Party_Addresses) | address_id (Table: Party_Addresses) | date_address_from (Table: Party_Addresses) | address_type_code (Table: Party_Addresses) | date_address_to (Table: Party_Addresses) | party_id (Table: Party_Forms) | form_id (Table: Party_Forms) | date_completion_started (Table: Party_Forms) | form_status_code (Table: Party_Forms) | date_fully_completed (Table: Party_Forms) | booking_id (Table: Party_Services) | customer_id (Table: Party_Services) | service_id (Table: Party_Services) | service_datetime (Table: Party_Services) | booking_made_date (Table: Party_Services)
"Find all the locations whose names contain the word ""film"".","SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE ""%film%""",* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
What is the name of the media type that is least common across all tracks?,SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1,* (Table: Track) | AlbumId (Table: Album) | Title (Table: Album) | ArtistId (Table: Album) | ArtistId (Table: Artist) | Name (Table: Artist) | CustomerId (Table: Customer) | FirstName (Table: Customer) | LastName (Table: Customer) | Company (Table: Customer) | Address (Table: Customer) | City (Table: Customer) | State (Table: Customer) | Country (Table: Customer) | PostalCode (Table: Customer) | Phone (Table: Customer) | Fax (Table: Customer) | Email (Table: Customer) | SupportRepId (Table: Customer) | EmployeeId (Table: Employee) | LastName (Table: Employee) | FirstName (Table: Employee) | Title (Table: Employee) | ReportsTo (Table: Employee) | BirthDate (Table: Employee) | HireDate (Table: Employee) | Address (Table: Employee) | City (Table: Employee) | State (Table: Employee) | Country (Table: Employee) | PostalCode (Table: Employee) | Phone (Table: Employee) | Fax (Table: Employee) | Email (Table: Employee) | GenreId (Table: Genre) | Name (Table: Genre) | InvoiceId (Table: Invoice) | CustomerId (Table: Invoice) | InvoiceDate (Table: Invoice) | BillingAddress (Table: Invoice) | BillingCity (Table: Invoice) | BillingState (Table: Invoice) | BillingCountry (Table: Invoice) | BillingPostalCode (Table: Invoice) | Total (Table: Invoice) | InvoiceLineId (Table: InvoiceLine) | InvoiceId (Table: InvoiceLine) | TrackId (Table: InvoiceLine) | UnitPrice (Table: InvoiceLine) | Quantity (Table: InvoiceLine) | MediaTypeId (Table: MediaType) | Name (Table: MediaType) | PlaylistId (Table: Playlist) | Name (Table: Playlist) | PlaylistId (Table: PlaylistTrack) | TrackId (Table: PlaylistTrack) | TrackId (Table: Track) | Name (Table: Track) | AlbumId (Table: Track) | MediaTypeId (Table: Track) | GenreId (Table: Track) | Composer (Table: Track) | Milliseconds (Table: Track) | Bytes (Table: Track) | UnitPrice (Table: Track)
"Which department has more than 1 head at a time? List the id, name and the number of heads.","SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",* (Table: management) | Department_ID (Table: department) | Name (Table: department) | Creation (Table: department) | Ranking (Table: department) | Budget_in_Billions (Table: department) | Num_Employees (Table: department) | head_ID (Table: head) | name (Table: head) | born_state (Table: head) | age (Table: head) | department_ID (Table: management) | head_ID (Table: management) | temporary_acting (Table: management)
In which city do the most employees live and how many of them live there?,"SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;",* (Table: Lessons) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | staff_id (Table: Staff) | staff_address_id (Table: Staff) | nickname (Table: Staff) | first_name (Table: Staff) | middle_name (Table: Staff) | last_name (Table: Staff) | date_of_birth (Table: Staff) | date_joined_staff (Table: Staff) | date_left_staff (Table: Staff) | vehicle_id (Table: Vehicles) | vehicle_details (Table: Vehicles) | customer_id (Table: Customers) | customer_address_id (Table: Customers) | customer_status_code (Table: Customers) | date_became_customer (Table: Customers) | date_of_birth (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | amount_outstanding (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | cell_mobile_phone_number (Table: Customers) | customer_id (Table: Customer_Payments) | datetime_payment (Table: Customer_Payments) | payment_method_code (Table: Customer_Payments) | amount_payment (Table: Customer_Payments) | lesson_id (Table: Lessons) | customer_id (Table: Lessons) | lesson_status_code (Table: Lessons) | staff_id (Table: Lessons) | vehicle_id (Table: Lessons) | lesson_date (Table: Lessons) | lesson_time (Table: Lessons) | price (Table: Lessons)
What is the most common interaction type between enzymes and medicine? And how many are there?,"SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",* (Table: medicine_enzyme_interaction) | id (Table: medicine) | name (Table: medicine) | Trade_Name (Table: medicine) | FDA_approved (Table: medicine) | id (Table: enzyme) | name (Table: enzyme) | Location (Table: enzyme) | Product (Table: enzyme) | Chromosome (Table: enzyme) | OMIM (Table: enzyme) | Porphyria (Table: enzyme) | enzyme_id (Table: medicine_enzyme_interaction) | medicine_id (Table: medicine_enzyme_interaction) | interaction_type (Table: medicine_enzyme_interaction)
What are the names of climbers who are not from the country of Switzerland?,"SELECT Name FROM climber WHERE Country != ""Switzerland""",* (Table: climber) | Mountain_ID (Table: mountain) | Name (Table: mountain) | Height (Table: mountain) | Prominence (Table: mountain) | Range (Table: mountain) | Country (Table: mountain) | Climber_ID (Table: climber) | Name (Table: climber) | Country (Table: climber) | Time (Table: climber) | Points (Table: climber) | Mountain_ID (Table: climber)
"Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.","SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000",* (Table: culture_company) | book_club_id (Table: book_club) | Year (Table: book_club) | Author_or_Editor (Table: book_club) | Book_Title (Table: book_club) | Publisher (Table: book_club) | Category (Table: book_club) | Result (Table: book_club) | movie_id (Table: movie) | Title (Table: movie) | Year (Table: movie) | Director (Table: movie) | Budget_million (Table: movie) | Gross_worldwide (Table: movie) | Company_name (Table: culture_company) | Type (Table: culture_company) | Incorporated_in (Table: culture_company) | Group_Equity_Shareholding (Table: culture_company) | book_club_id (Table: culture_company) | movie_id (Table: culture_company)
In which year were most departments established?,SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1,* (Table: management) | Department_ID (Table: department) | Name (Table: department) | Creation (Table: department) | Ranking (Table: department) | Budget_in_Billions (Table: department) | Num_Employees (Table: department) | head_ID (Table: head) | name (Table: head) | born_state (Table: head) | age (Table: head) | department_ID (Table: management) | head_ID (Table: management) | temporary_acting (Table: management)
What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?,"SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = ""Monaco Grand Prix""",* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
"What are the types of vocals used in the song ""Demon Kitty Rag""?","SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  ""Demon Kitty Rag""",* (Table: Vocals) | SongId (Table: Songs) | Title (Table: Songs) | AId (Table: Albums) | Title (Table: Albums) | Year (Table: Albums) | Label (Table: Albums) | Type (Table: Albums) | Id (Table: Band) | Firstname (Table: Band) | Lastname (Table: Band) | SongId (Table: Instruments) | BandmateId (Table: Instruments) | Instrument (Table: Instruments) | SongId (Table: Performance) | Bandmate (Table: Performance) | StagePosition (Table: Performance) | AlbumId (Table: Tracklists) | Position (Table: Tracklists) | SongId (Table: Tracklists) | SongId (Table: Vocals) | Bandmate (Table: Vocals) | Type (Table: Vocals)
Which catalog contents have length below 3 or above 5? Find the catalog entry names.,SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5,* (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Attribute_Definitions) | attribute_name (Table: Attribute_Definitions) | attribute_data_type (Table: Attribute_Definitions) | catalog_id (Table: Catalogs) | catalog_name (Table: Catalogs) | catalog_publisher (Table: Catalogs) | date_of_publication (Table: Catalogs) | date_of_latest_revision (Table: Catalogs) | catalog_level_number (Table: Catalog_Structure) | catalog_id (Table: Catalog_Structure) | catalog_level_name (Table: Catalog_Structure) | catalog_entry_id (Table: Catalog_Contents) | catalog_level_number (Table: Catalog_Contents) | parent_entry_id (Table: Catalog_Contents) | previous_entry_id (Table: Catalog_Contents) | next_entry_id (Table: Catalog_Contents) | catalog_entry_name (Table: Catalog_Contents) | product_stock_number (Table: Catalog_Contents) | price_in_dollars (Table: Catalog_Contents) | price_in_euros (Table: Catalog_Contents) | price_in_pounds (Table: Catalog_Contents) | capacity (Table: Catalog_Contents) | length (Table: Catalog_Contents) | height (Table: Catalog_Contents) | width (Table: Catalog_Contents) | catalog_entry_id (Table: Catalog_Contents_Additional_Attributes) | catalog_level_number (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Catalog_Contents_Additional_Attributes) | attribute_value (Table: Catalog_Contents_Additional_Attributes)
display the department name and number of employees in each of the department.,"SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name",* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
Find the total number of king beds available.,SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';,* (Table: Reservations) | RoomId (Table: Rooms) | roomName (Table: Rooms) | beds (Table: Rooms) | bedType (Table: Rooms) | maxOccupancy (Table: Rooms) | basePrice (Table: Rooms) | decor (Table: Rooms) | Code (Table: Reservations) | Room (Table: Reservations) | CheckIn (Table: Reservations) | CheckOut (Table: Reservations) | Rate (Table: Reservations) | LastName (Table: Reservations) | FirstName (Table: Reservations) | Adults (Table: Reservations) | Kids (Table: Reservations)
What is the id and detail of the vehicle used in lessons for most of the times?,"SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1",* (Table: Lessons) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | staff_id (Table: Staff) | staff_address_id (Table: Staff) | nickname (Table: Staff) | first_name (Table: Staff) | middle_name (Table: Staff) | last_name (Table: Staff) | date_of_birth (Table: Staff) | date_joined_staff (Table: Staff) | date_left_staff (Table: Staff) | vehicle_id (Table: Vehicles) | vehicle_details (Table: Vehicles) | customer_id (Table: Customers) | customer_address_id (Table: Customers) | customer_status_code (Table: Customers) | date_became_customer (Table: Customers) | date_of_birth (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | amount_outstanding (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | cell_mobile_phone_number (Table: Customers) | customer_id (Table: Customer_Payments) | datetime_payment (Table: Customer_Payments) | payment_method_code (Table: Customer_Payments) | amount_payment (Table: Customer_Payments) | lesson_id (Table: Lessons) | customer_id (Table: Lessons) | lesson_status_code (Table: Lessons) | staff_id (Table: Lessons) | vehicle_id (Table: Lessons) | lesson_date (Table: Lessons) | lesson_time (Table: Lessons) | price (Table: Lessons)
What is the label that has the most albums?,SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1,* (Table: Vocals) | SongId (Table: Songs) | Title (Table: Songs) | AId (Table: Albums) | Title (Table: Albums) | Year (Table: Albums) | Label (Table: Albums) | Type (Table: Albums) | Id (Table: Band) | Firstname (Table: Band) | Lastname (Table: Band) | SongId (Table: Instruments) | BandmateId (Table: Instruments) | Instrument (Table: Instruments) | SongId (Table: Performance) | Bandmate (Table: Performance) | StagePosition (Table: Performance) | AlbumId (Table: Tracklists) | Position (Table: Tracklists) | SongId (Table: Tracklists) | SongId (Table: Vocals) | Bandmate (Table: Vocals) | Type (Table: Vocals)
Who are the lieutenant governor and comptroller from the democratic party?,"SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  ""Democratic""",* (Table: election) | County_Id (Table: county) | County_name (Table: county) | Population (Table: county) | Zip_code (Table: county) | Party_ID (Table: party) | Year (Table: party) | Party (Table: party) | Governor (Table: party) | Lieutenant_Governor (Table: party) | Comptroller (Table: party) | Attorney_General (Table: party) | US_Senate (Table: party) | Election_ID (Table: election) | Counties_Represented (Table: election) | District (Table: election) | Delegate (Table: election) | Party (Table: election) | First_Elected (Table: election) | Committee (Table: election)
What are the names of all directors who have made one movie except for the director named NULL?,"SELECT director FROM Movie WHERE director != ""null"" GROUP BY director HAVING count(*)  =  1",* (Table: Rating) | mID (Table: Movie) | title (Table: Movie) | year (Table: Movie) | director (Table: Movie) | rID (Table: Reviewer) | name (Table: Reviewer) | rID (Table: Rating) | mID (Table: Rating) | stars (Table: Rating) | ratingDate (Table: Rating)
Show the average transaction amount for different transaction types.,"SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",* (Table: Transactions_Lots) | investor_id (Table: Investors) | Investor_details (Table: Investors) | lot_id (Table: Lots) | investor_id (Table: Lots) | lot_details (Table: Lots) | transaction_type_code (Table: Ref_Transaction_Types) | transaction_type_description (Table: Ref_Transaction_Types) | transaction_id (Table: Transactions) | investor_id (Table: Transactions) | transaction_type_code (Table: Transactions) | date_of_transaction (Table: Transactions) | amount_of_transaction (Table: Transactions) | share_count (Table: Transactions) | other_details (Table: Transactions) | sales_transaction_id (Table: Sales) | sales_details (Table: Sales) | purchase_transaction_id (Table: Purchases) | purchase_details (Table: Purchases) | transaction_id (Table: Transactions_Lots) | lot_id (Table: Transactions_Lots)
How many project members were leaders or started working before '1989-04-24 23:51:54'?,SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54',* (Table: Tasks) | document_type_code (Table: Document_Types) | document_description (Table: Document_Types) | document_id (Table: Documents) | document_type_code (Table: Documents) | grant_id (Table: Documents) | sent_date (Table: Documents) | response_received_date (Table: Documents) | other_details (Table: Documents) | grant_id (Table: Grants) | organisation_id (Table: Grants) | grant_amount (Table: Grants) | grant_start_date (Table: Grants) | grant_end_date (Table: Grants) | other_details (Table: Grants) | organisation_type (Table: Organisation_Types) | organisation_type_description (Table: Organisation_Types) | organisation_id (Table: Organisations) | organisation_type (Table: Organisations) | organisation_details (Table: Organisations) | project_id (Table: Project_Outcomes) | outcome_code (Table: Project_Outcomes) | outcome_details (Table: Project_Outcomes) | staff_id (Table: Project_Staff) | project_id (Table: Project_Staff) | role_code (Table: Project_Staff) | date_from (Table: Project_Staff) | date_to (Table: Project_Staff) | other_details (Table: Project_Staff) | project_id (Table: Projects) | organisation_id (Table: Projects) | project_details (Table: Projects) | outcome_code (Table: Research_Outcomes) | outcome_description (Table: Research_Outcomes) | staff_id (Table: Research_Staff) | employer_organisation_id (Table: Research_Staff) | staff_details (Table: Research_Staff) | role_code (Table: Staff_Roles) | role_description (Table: Staff_Roles) | task_id (Table: Tasks) | project_id (Table: Tasks) | task_details (Table: Tasks) | eg Agree Objectives (Table: Tasks)
What is the project id and detail for the project with at least two documents?,"SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2",* (Table: Accounts) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Budget_Type_Code (Table: Ref_Budget_Codes) | Budget_Type_Description (Table: Ref_Budget_Codes) | Project_ID (Table: Projects) | Project_Details (Table: Projects) | Document_ID (Table: Documents) | Document_Type_Code (Table: Documents) | Project_ID (Table: Documents) | Document_Date (Table: Documents) | Document_Name (Table: Documents) | Document_Description (Table: Documents) | Other_Details (Table: Documents) | Statement_ID (Table: Statements) | Statement_Details (Table: Statements) | Document_ID (Table: Documents_with_Expenses) | Budget_Type_Code (Table: Documents_with_Expenses) | Document_Details (Table: Documents_with_Expenses) | Account_ID (Table: Accounts) | Statement_ID (Table: Accounts) | Account_Details (Table: Accounts)
How many products are there in the records?,SELECT count(*) FROM catalog_contents,* (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Attribute_Definitions) | attribute_name (Table: Attribute_Definitions) | attribute_data_type (Table: Attribute_Definitions) | catalog_id (Table: Catalogs) | catalog_name (Table: Catalogs) | catalog_publisher (Table: Catalogs) | date_of_publication (Table: Catalogs) | date_of_latest_revision (Table: Catalogs) | catalog_level_number (Table: Catalog_Structure) | catalog_id (Table: Catalog_Structure) | catalog_level_name (Table: Catalog_Structure) | catalog_entry_id (Table: Catalog_Contents) | catalog_level_number (Table: Catalog_Contents) | parent_entry_id (Table: Catalog_Contents) | previous_entry_id (Table: Catalog_Contents) | next_entry_id (Table: Catalog_Contents) | catalog_entry_name (Table: Catalog_Contents) | product_stock_number (Table: Catalog_Contents) | price_in_dollars (Table: Catalog_Contents) | price_in_euros (Table: Catalog_Contents) | price_in_pounds (Table: Catalog_Contents) | capacity (Table: Catalog_Contents) | length (Table: Catalog_Contents) | height (Table: Catalog_Contents) | width (Table: Catalog_Contents) | catalog_entry_id (Table: Catalog_Contents_Additional_Attributes) | catalog_level_number (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Catalog_Contents_Additional_Attributes) | attribute_value (Table: Catalog_Contents_Additional_Attributes)
What was the date of the earliest payment?,SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1,* (Table: store) | actor_id (Table: actor) | first_name (Table: actor) | last_name (Table: actor) | last_update (Table: actor) | address_id (Table: address) | address (Table: address) | address2 (Table: address) | district (Table: address) | city_id (Table: address) | postal_code (Table: address) | phone (Table: address) | last_update (Table: address) | category_id (Table: category) | name (Table: category) | last_update (Table: category) | city_id (Table: city) | city (Table: city) | country_id (Table: city) | last_update (Table: city) | country_id (Table: country) | country (Table: country) | last_update (Table: country) | customer_id (Table: customer) | store_id (Table: customer) | first_name (Table: customer) | last_name (Table: customer) | email (Table: customer) | address_id (Table: customer) | active (Table: customer) | create_date (Table: customer) | last_update (Table: customer) | film_id (Table: film) | title (Table: film) | description (Table: film) | release_year (Table: film) | language_id (Table: film) | original_language_id (Table: film) | rental_duration (Table: film) | rental_rate (Table: film) | length (Table: film) | replacement_cost (Table: film) | rating (Table: film) | special_features (Table: film) | last_update (Table: film) | actor_id (Table: film_actor) | film_id (Table: film_actor) | last_update (Table: film_actor) | film_id (Table: film_category) | category_id (Table: film_category) | last_update (Table: film_category) | film_id (Table: film_text) | title (Table: film_text) | description (Table: film_text) | inventory_id (Table: inventory) | film_id (Table: inventory) | store_id (Table: inventory) | last_update (Table: inventory) | language_id (Table: language) | name (Table: language) | last_update (Table: language) | payment_id (Table: payment) | customer_id (Table: payment) | staff_id (Table: payment) | rental_id (Table: payment) | amount (Table: payment) | payment_date (Table: payment) | last_update (Table: payment) | rental_id (Table: rental) | rental_date (Table: rental) | inventory_id (Table: rental) | customer_id (Table: rental) | return_date (Table: rental) | staff_id (Table: rental) | last_update (Table: rental) | staff_id (Table: staff) | first_name (Table: staff) | last_name (Table: staff) | address_id (Table: staff) | picture (Table: staff) | email (Table: staff) | store_id (Table: staff) | active (Table: staff) | username (Table: staff) | password (Table: staff) | last_update (Table: staff) | store_id (Table: store) | manager_staff_id (Table: store) | address_id (Table: store) | last_update (Table: store)
"Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.",SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred,* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
What is total number of show times per dat for each cinema?,"SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id",* (Table: schedule) | Film_ID (Table: film) | Rank_in_series (Table: film) | Number_in_season (Table: film) | Title (Table: film) | Directed_by (Table: film) | Original_air_date (Table: film) | Production_code (Table: film) | Cinema_ID (Table: cinema) | Name (Table: cinema) | Openning_year (Table: cinema) | Capacity (Table: cinema) | Location (Table: cinema) | Cinema_ID (Table: schedule) | Film_ID (Table: schedule) | Date (Table: schedule) | Show_times_per_day (Table: schedule) | Price (Table: schedule)
What are the full names of students minoring in department 140?,"SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",* (Table: Gradeconversion) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty) | DNO (Table: Department) | Division (Table: Department) | DName (Table: Department) | Room (Table: Department) | Building (Table: Department) | DPhone (Table: Department) | FacID (Table: Member_of) | DNO (Table: Member_of) | Appt_Type (Table: Member_of) | CID (Table: Course) | CName (Table: Course) | Credits (Table: Course) | Instructor (Table: Course) | Days (Table: Course) | Hours (Table: Course) | DNO (Table: Course) | StuID (Table: Minor_in) | DNO (Table: Minor_in) | StuID (Table: Enrolled_in) | CID (Table: Enrolled_in) | Grade (Table: Enrolled_in) | lettergrade (Table: Gradeconversion) | gradepoint (Table: Gradeconversion)
What are the names of storms that did not affect any regions?,SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region),* (Table: affected_region) | Storm_ID (Table: storm) | Name (Table: storm) | Dates_active (Table: storm) | Max_speed (Table: storm) | Damage_millions_USD (Table: storm) | Number_Deaths (Table: storm) | Region_id (Table: region) | Region_code (Table: region) | Region_name (Table: region) | Region_id (Table: affected_region) | Storm_ID (Table: affected_region) | Number_city_affected (Table: affected_region)
Find the city and name of bank branches that provide business loans.,"SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
What is the name of the youngest male?,SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' ),* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
"What are all the songs in albums under label ""Universal Music Group""?","SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  ""Universal Music Group""",* (Table: Vocals) | SongId (Table: Songs) | Title (Table: Songs) | AId (Table: Albums) | Title (Table: Albums) | Year (Table: Albums) | Label (Table: Albums) | Type (Table: Albums) | Id (Table: Band) | Firstname (Table: Band) | Lastname (Table: Band) | SongId (Table: Instruments) | BandmateId (Table: Instruments) | Instrument (Table: Instruments) | SongId (Table: Performance) | Bandmate (Table: Performance) | StagePosition (Table: Performance) | AlbumId (Table: Tracklists) | Position (Table: Tracklists) | SongId (Table: Tracklists) | SongId (Table: Vocals) | Bandmate (Table: Vocals) | Type (Table: Vocals)
What is the name of all tracks in the Rock genre?,"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = ""Rock"";",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
Show all member names and registered branch names sorted by register year.,"SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year",* (Table: purchase) | Member_ID (Table: member) | Card_Number (Table: member) | Name (Table: member) | Hometown (Table: member) | Level (Table: member) | Branch_ID (Table: branch) | Name (Table: branch) | Open_year (Table: branch) | Address_road (Table: branch) | City (Table: branch) | membership_amount (Table: branch) | Member_ID (Table: membership_register_branch) | Branch_ID (Table: membership_register_branch) | Register_Year (Table: membership_register_branch) | Member_ID (Table: purchase) | Branch_ID (Table: purchase) | Year (Table: purchase) | Total_pounds (Table: purchase)
What is the name of the airport with the most number of routes that start in China?,SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1,* (Table: airlines) | rid (Table: routes) | dst_apid (Table: routes) | dst_ap (Table: routes) | src_apid (Table: routes) | src_ap (Table: routes) | alid (Table: routes) | airline (Table: routes) | codeshare (Table: routes) | apid (Table: airports) | name (Table: airports) | city (Table: airports) | country (Table: airports) | x (Table: airports) | y (Table: airports) | elevation (Table: airports) | iata (Table: airports) | icao (Table: airports) | alid (Table: airlines) | name (Table: airlines) | iata (Table: airlines) | icao (Table: airlines) | callsign (Table: airlines) | country (Table: airlines) | active (Table: airlines)
Which order deals with the most items? Return the order id.,SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1,* (Table: Shipment_Items) | customer_id (Table: Customers) | customer_name (Table: Customers) | customer_details (Table: Customers) | invoice_number (Table: Invoices) | invoice_date (Table: Invoices) | invoice_details (Table: Invoices) | order_id (Table: Orders) | customer_id (Table: Orders) | order_status (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | product_id (Table: Products) | product_name (Table: Products) | product_details (Table: Products) | order_item_id (Table: Order_Items) | product_id (Table: Order_Items) | order_id (Table: Order_Items) | order_item_status (Table: Order_Items) | order_item_details (Table: Order_Items) | shipment_id (Table: Shipments) | order_id (Table: Shipments) | invoice_number (Table: Shipments) | shipment_tracking_number (Table: Shipments) | shipment_date (Table: Shipments) | other_shipment_details (Table: Shipments) | shipment_id (Table: Shipment_Items) | order_item_id (Table: Shipment_Items)
What is the average prices of wines for each each?,"SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR",* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
Find the number of different product types.,SELECT count(DISTINCT product_type_code) FROM products,* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
What is the total number of routes for each country and airline in that country?,"SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",* (Table: airlines) | rid (Table: routes) | dst_apid (Table: routes) | dst_ap (Table: routes) | src_apid (Table: routes) | src_ap (Table: routes) | alid (Table: routes) | airline (Table: routes) | codeshare (Table: routes) | apid (Table: airports) | name (Table: airports) | city (Table: airports) | country (Table: airports) | x (Table: airports) | y (Table: airports) | elevation (Table: airports) | iata (Table: airports) | icao (Table: airports) | alid (Table: airlines) | name (Table: airlines) | iata (Table: airlines) | icao (Table: airlines) | callsign (Table: airlines) | country (Table: airlines) | active (Table: airlines)
What are the name of the players who received a card in descending order of the hours of training?,SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC,* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
What are the names of the technicians  and how many machines are they assigned to repair?,"SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",* (Table: repair_assignment) | repair_ID (Table: repair) | name (Table: repair) | Launch_Date (Table: repair) | Notes (Table: repair) | Machine_ID (Table: machine) | Making_Year (Table: machine) | Class (Table: machine) | Team (Table: machine) | Machine_series (Table: machine) | value_points (Table: machine) | quality_rank (Table: machine) | technician_id (Table: technician) | Name (Table: technician) | Team (Table: technician) | Starting_Year (Table: technician) | Age (Table: technician) | technician_id (Table: repair_assignment) | repair_ID (Table: repair_assignment) | Machine_ID (Table: repair_assignment)
Find the names of nurses who are on call.,SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse,* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
What is the customer id of the customer who has the most orders?,SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1,* (Table: Shipment_Items) | customer_id (Table: Customers) | customer_name (Table: Customers) | customer_details (Table: Customers) | invoice_number (Table: Invoices) | invoice_date (Table: Invoices) | invoice_details (Table: Invoices) | order_id (Table: Orders) | customer_id (Table: Orders) | order_status (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | product_id (Table: Products) | product_name (Table: Products) | product_details (Table: Products) | order_item_id (Table: Order_Items) | product_id (Table: Order_Items) | order_id (Table: Order_Items) | order_item_status (Table: Order_Items) | order_item_details (Table: Order_Items) | shipment_id (Table: Shipments) | order_id (Table: Shipments) | invoice_number (Table: Shipments) | shipment_tracking_number (Table: Shipments) | shipment_date (Table: Shipments) | other_shipment_details (Table: Shipments) | shipment_id (Table: Shipment_Items) | order_item_id (Table: Shipment_Items)
"Show the total number of rooms of the apartments in the building with short name ""Columbus Square"".","SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  ""Columbus Square""",* (Table: View_Unit_Status) | building_id (Table: Apartment_Buildings) | building_short_name (Table: Apartment_Buildings) | building_full_name (Table: Apartment_Buildings) | building_description (Table: Apartment_Buildings) | building_address (Table: Apartment_Buildings) | building_manager (Table: Apartment_Buildings) | building_phone (Table: Apartment_Buildings) | apt_id (Table: Apartments) | building_id (Table: Apartments) | apt_type_code (Table: Apartments) | apt_number (Table: Apartments) | bathroom_count (Table: Apartments) | bedroom_count (Table: Apartments) | room_count (Table: Apartments) | apt_id (Table: Apartment_Facilities) | facility_code (Table: Apartment_Facilities) | guest_id (Table: Guests) | gender_code (Table: Guests) | guest_first_name (Table: Guests) | guest_last_name (Table: Guests) | date_of_birth (Table: Guests) | apt_booking_id (Table: Apartment_Bookings) | apt_id (Table: Apartment_Bookings) | guest_id (Table: Apartment_Bookings) | booking_status_code (Table: Apartment_Bookings) | booking_start_date (Table: Apartment_Bookings) | booking_end_date (Table: Apartment_Bookings) | apt_id (Table: View_Unit_Status) | apt_booking_id (Table: View_Unit_Status) | status_date (Table: View_Unit_Status) | available_yn (Table: View_Unit_Status)
Which state has the greatest total number of bank customers?,SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1,* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
Find the number of distinct gender for dorms.,SELECT count(DISTINCT gender) FROM dorm,* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
What are the dates of ceremony and results for each music festival?,"SELECT Date_of_ceremony ,  RESULT FROM music_festival",* (Table: music_festival) | Artist_ID (Table: artist) | Artist (Table: artist) | Age (Table: artist) | Famous_Title (Table: artist) | Famous_Release_date (Table: artist) | Volume_ID (Table: volume) | Volume_Issue (Table: volume) | Issue_Date (Table: volume) | Weeks_on_Top (Table: volume) | Song (Table: volume) | Artist_ID (Table: volume) | ID (Table: music_festival) | Music_Festival (Table: music_festival) | Date_of_ceremony (Table: music_festival) | Category (Table: music_festival) | Volume (Table: music_festival) | Result (Table: music_festival)
What is the name of the movie that is rated by most of times?,"SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1",* (Table: Rating) | mID (Table: Movie) | title (Table: Movie) | year (Table: Movie) | director (Table: Movie) | rID (Table: Reviewer) | name (Table: Reviewer) | rID (Table: Rating) | mID (Table: Rating) | stars (Table: Rating) | ratingDate (Table: Rating)
List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.,"SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1",* (Table: Problems) | problem_category_code (Table: Problem_Category_Codes) | problem_category_description (Table: Problem_Category_Codes) | problem_log_id (Table: Problem_Log) | assigned_to_staff_id (Table: Problem_Log) | problem_id (Table: Problem_Log) | problem_category_code (Table: Problem_Log) | problem_status_code (Table: Problem_Log) | log_entry_date (Table: Problem_Log) | log_entry_description (Table: Problem_Log) | log_entry_fix (Table: Problem_Log) | other_log_details (Table: Problem_Log) | problem_status_code (Table: Problem_Status_Codes) | problem_status_description (Table: Problem_Status_Codes) | product_id (Table: Product) | product_name (Table: Product) | product_details (Table: Product) | staff_id (Table: Staff) | staff_first_name (Table: Staff) | staff_last_name (Table: Staff) | other_staff_details (Table: Staff) | problem_id (Table: Problems) | product_id (Table: Problems) | closure_authorised_by_staff_id (Table: Problems) | reported_by_staff_id (Table: Problems) | date_problem_reported (Table: Problems) | date_problem_closed (Table: Problems) | problem_description (Table: Problems) | other_problem_details (Table: Problems)
"Show the faculty id of each faculty member, along with the number of students he or she advises.","SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
Find the cities which have exactly two airports.,SELECT city FROM airports GROUP BY city HAVING count(*)  =  2,* (Table: airlines) | rid (Table: routes) | dst_apid (Table: routes) | dst_ap (Table: routes) | src_apid (Table: routes) | src_ap (Table: routes) | alid (Table: routes) | airline (Table: routes) | codeshare (Table: routes) | apid (Table: airports) | name (Table: airports) | city (Table: airports) | country (Table: airports) | x (Table: airports) | y (Table: airports) | elevation (Table: airports) | iata (Table: airports) | icao (Table: airports) | alid (Table: airlines) | name (Table: airlines) | iata (Table: airlines) | icao (Table: airlines) | callsign (Table: airlines) | country (Table: airlines) | active (Table: airlines)
What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?,"SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'",* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
"How many clubs does ""Linda Smith"" belong to?","SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  ""Linda"" AND t3.lname  =  ""Smith""",* (Table: Member_of_club) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | ClubID (Table: Club) | ClubName (Table: Club) | ClubDesc (Table: Club) | ClubLocation (Table: Club) | StuID (Table: Member_of_club) | ClubID (Table: Member_of_club) | Position (Table: Member_of_club)
Which college has any student who is a goalie and succeeded in the tryout.,SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie',* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT?,"SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  ""PIT""",* (Table: Voting_record) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | StuID (Table: Voting_record) | Registration_Date (Table: Voting_record) | Election_Cycle (Table: Voting_record) | President_Vote (Table: Voting_record) | Vice_President_Vote (Table: Voting_record) | Secretary_Vote (Table: Voting_record) | Treasurer_Vote (Table: Voting_record) | Class_President_Vote (Table: Voting_record) | Class_Senator_Vote (Table: Voting_record)
What are all the different zip codes that have a maximum dew point that was always below 70?,SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70,* (Table: weather) | id (Table: station) | name (Table: station) | lat (Table: station) | long (Table: station) | dock_count (Table: station) | city (Table: station) | installation_date (Table: station) | station_id (Table: status) | bikes_available (Table: status) | docks_available (Table: status) | time (Table: status) | id (Table: trip) | duration (Table: trip) | start_date (Table: trip) | start_station_name (Table: trip) | start_station_id (Table: trip) | end_date (Table: trip) | end_station_name (Table: trip) | end_station_id (Table: trip) | bike_id (Table: trip) | subscription_type (Table: trip) | zip_code (Table: trip) | date (Table: weather) | max_temperature_f (Table: weather) | mean_temperature_f (Table: weather) | min_temperature_f (Table: weather) | max_dew_point_f (Table: weather) | mean_dew_point_f (Table: weather) | min_dew_point_f (Table: weather) | max_humidity (Table: weather) | mean_humidity (Table: weather) | min_humidity (Table: weather) | max_sea_level_pressure_inches (Table: weather) | mean_sea_level_pressure_inches (Table: weather) | min_sea_level_pressure_inches (Table: weather) | max_visibility_miles (Table: weather) | mean_visibility_miles (Table: weather) | min_visibility_miles (Table: weather) | max_wind_Speed_mph (Table: weather) | mean_wind_speed_mph (Table: weather) | max_gust_speed_mph (Table: weather) | precipitation_inches (Table: weather) | cloud_cover (Table: weather) | events (Table: weather) | wind_dir_degrees (Table: weather) | zip_code (Table: weather)
What is the address of each course author or tutor?,SELECT address_line_1 FROM Course_Authors_and_Tutors,* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
What are the maximum and minimum resolution of songs whose duration is 3 minutes?,"SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE ""3:%""",* (Table: song) | g_name (Table: genre) | rating (Table: genre) | most_popular_in (Table: genre) | artist_name (Table: artist) | country (Table: artist) | gender (Table: artist) | preferred_genre (Table: artist) | f_id (Table: files) | artist_name (Table: files) | file_size (Table: files) | duration (Table: files) | formats (Table: files) | song_name (Table: song) | artist_name (Table: song) | country (Table: song) | f_id (Table: song) | genre_is (Table: song) | rating (Table: song) | languages (Table: song) | releasedate (Table: song) | resolution (Table: song)
"Which institution is the author ""Matthias Blume"" belong to? Give me the name of the institution.","SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  ""Matthias"" AND t1.lname  =  ""Blume""",* (Table: Authorship) | instID (Table: Inst) | name (Table: Inst) | country (Table: Inst) | authID (Table: Authors) | lname (Table: Authors) | fname (Table: Authors) | paperID (Table: Papers) | title (Table: Papers) | authID (Table: Authorship) | instID (Table: Authorship) | paperID (Table: Authorship) | authOrder (Table: Authorship)
Show white percentages of cities and the crime rates of counties they are in.,"SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID",* (Table: city) | County_ID (Table: county_public_safety) | Name (Table: county_public_safety) | Population (Table: county_public_safety) | Police_officers (Table: county_public_safety) | Residents_per_officer (Table: county_public_safety) | Case_burden (Table: county_public_safety) | Crime_rate (Table: county_public_safety) | Police_force (Table: county_public_safety) | Location (Table: county_public_safety) | City_ID (Table: city) | County_ID (Table: city) | Name (Table: city) | White (Table: city) | Black (Table: city) | Amerindian (Table: city) | Asian (Table: city) | Multiracial (Table: city) | Hispanic (Table: city)
What is the first name and GPA of every student that has a GPA lower than average?,"SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)",* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
Find the GDP of the city with the largest regional population.,SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1,* (Table: hosting_city) | City_ID (Table: city) | City (Table: city) | Hanzi (Table: city) | Hanyu_Pinyin (Table: city) | Regional_Population (Table: city) | GDP (Table: city) | Match_ID (Table: match) | Date (Table: match) | Venue (Table: match) | Score (Table: match) | Result (Table: match) | Competition (Table: match) | City_ID (Table: temperature) | Jan (Table: temperature) | Feb (Table: temperature) | Mar (Table: temperature) | Apr (Table: temperature) | Jun (Table: temperature) | Jul (Table: temperature) | Aug (Table: temperature) | Sep (Table: temperature) | Oct (Table: temperature) | Nov (Table: temperature) | Dec (Table: temperature) | Year (Table: hosting_city) | Match_ID (Table: hosting_city) | Host_City (Table: hosting_city)
"How many orders have detail ""Second time""?","SELECT count(*) FROM customer_orders WHERE order_details  =  ""Second time""",* (Table: Order_Items) | address_id (Table: Addresses) | address_content (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | product_id (Table: Products) | product_details (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | date_became_customer (Table: Customers) | other_customer_details (Table: Customers) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | customer_id (Table: Customer_Contact_Channels) | channel_code (Table: Customer_Contact_Channels) | active_from_date (Table: Customer_Contact_Channels) | active_to_date (Table: Customer_Contact_Channels) | contact_number (Table: Customer_Contact_Channels) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status (Table: Customer_Orders) | order_date (Table: Customer_Orders) | order_details (Table: Customer_Orders) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | order_quantity (Table: Order_Items)
What are the names of the aircraft that the least people are certified to fly?,SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1,* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
"What is the zip code of the address where the teacher with first name ""Lyla"" lives?","SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  ""Lyla""",* (Table: Students_in_Detention) | address_type_code (Table: Ref_Address_Types) | address_type_description (Table: Ref_Address_Types) | detention_type_code (Table: Ref_Detention_Type) | detention_type_description (Table: Ref_Detention_Type) | incident_type_code (Table: Ref_Incident_Type) | incident_type_description (Table: Ref_Incident_Type) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | line_3 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | student_id (Table: Students) | address_id (Table: Students) | first_name (Table: Students) | middle_name (Table: Students) | last_name (Table: Students) | cell_mobile_number (Table: Students) | email_address (Table: Students) | date_first_rental (Table: Students) | date_left_university (Table: Students) | other_student_details (Table: Students) | teacher_id (Table: Teachers) | address_id (Table: Teachers) | first_name (Table: Teachers) | middle_name (Table: Teachers) | last_name (Table: Teachers) | gender (Table: Teachers) | cell_mobile_number (Table: Teachers) | email_address (Table: Teachers) | other_details (Table: Teachers) | notes_id (Table: Assessment_Notes) | student_id (Table: Assessment_Notes) | teacher_id (Table: Assessment_Notes) | date_of_notes (Table: Assessment_Notes) | text_of_notes (Table: Assessment_Notes) | other_details (Table: Assessment_Notes) | incident_id (Table: Behavior_Incident) | incident_type_code (Table: Behavior_Incident) | student_id (Table: Behavior_Incident) | date_incident_start (Table: Behavior_Incident) | date_incident_end (Table: Behavior_Incident) | incident_summary (Table: Behavior_Incident) | recommendations (Table: Behavior_Incident) | other_details (Table: Behavior_Incident) | detention_id (Table: Detention) | detention_type_code (Table: Detention) | teacher_id (Table: Detention) | datetime_detention_start (Table: Detention) | datetime_detention_end (Table: Detention) | detention_summary (Table: Detention) | other_details (Table: Detention) | student_id (Table: Student_Addresses) | address_id (Table: Student_Addresses) | date_address_from (Table: Student_Addresses) | date_address_to (Table: Student_Addresses) | monthly_rental (Table: Student_Addresses) | other_details (Table: Student_Addresses) | student_id (Table: Students_in_Detention) | detention_id (Table: Students_in_Detention) | incident_id (Table: Students_in_Detention)
Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?,"SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = ""Australian Grand Prix"" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = ""Chinese Grand Prix""",* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
Find the average and minimum weight for each gender.,"SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex",* (Table: people) | Candidate_ID (Table: candidate) | People_ID (Table: candidate) | Poll_Source (Table: candidate) | Date (Table: candidate) | Support_rate (Table: candidate) | Consider_rate (Table: candidate) | Oppose_rate (Table: candidate) | Unsure_rate (Table: candidate) | People_ID (Table: people) | Sex (Table: people) | Name (Table: people) | Date_of_Birth (Table: people) | Height (Table: people) | Weight (Table: people)
Find the minimum salary for the departments whose average salary is above the average payment of all instructors.,"SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)",* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Show all date and share count of transactions.,"SELECT date_of_transaction ,  share_count FROM TRANSACTIONS",* (Table: Transactions_Lots) | investor_id (Table: Investors) | Investor_details (Table: Investors) | lot_id (Table: Lots) | investor_id (Table: Lots) | lot_details (Table: Lots) | transaction_type_code (Table: Ref_Transaction_Types) | transaction_type_description (Table: Ref_Transaction_Types) | transaction_id (Table: Transactions) | investor_id (Table: Transactions) | transaction_type_code (Table: Transactions) | date_of_transaction (Table: Transactions) | amount_of_transaction (Table: Transactions) | share_count (Table: Transactions) | other_details (Table: Transactions) | sales_transaction_id (Table: Sales) | sales_details (Table: Sales) | purchase_transaction_id (Table: Purchases) | purchase_details (Table: Purchases) | transaction_id (Table: Transactions_Lots) | lot_id (Table: Transactions_Lots)
find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.,"SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",* (Table: airport_aircraft) | Pilot_Id (Table: pilot) | Name (Table: pilot) | Age (Table: pilot) | Aircraft_ID (Table: aircraft) | Aircraft (Table: aircraft) | Description (Table: aircraft) | Max_Gross_Weight (Table: aircraft) | Total_disk_area (Table: aircraft) | Max_disk_Loading (Table: aircraft) | Round (Table: match) | Location (Table: match) | Country (Table: match) | Date (Table: match) | Fastest_Qualifying (Table: match) | Winning_Pilot (Table: match) | Winning_Aircraft (Table: match) | Airport_ID (Table: airport) | Airport_Name (Table: airport) | Total_Passengers (Table: airport) | %_Change_2007 (Table: airport) | International_Passengers (Table: airport) | Domestic_Passengers (Table: airport) | Transit_Passengers (Table: airport) | Aircraft_Movements (Table: airport) | Freight_Metric_Tonnes (Table: airport) | ID (Table: airport_aircraft) | Airport_ID (Table: airport_aircraft) | Aircraft_ID (Table: airport_aircraft)
Find the number of funiture types produced by each manufacturer as well as the company names.,"SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id",* (Table: furniture_manufacte) | Manufacturer_ID (Table: manufacturer) | Open_Year (Table: manufacturer) | Name (Table: manufacturer) | Num_of_Factories (Table: manufacturer) | Num_of_Shops (Table: manufacturer) | Furniture_ID (Table: furniture) | Name (Table: furniture) | Num_of_Component (Table: furniture) | Market_Rate (Table: furniture) | Manufacturer_ID (Table: furniture_manufacte) | Furniture_ID (Table: furniture_manufacte) | Price_in_Dollar (Table: furniture_manufacte)
What is the code of each location and the number of documents in that location?,"SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",* (Table: Documents_to_be_Destroyed) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Calendar_Date (Table: Ref_Calendar) | Day_Number (Table: Ref_Calendar) | Location_Code (Table: Ref_Locations) | Location_Name (Table: Ref_Locations) | Location_Description (Table: Ref_Locations) | Role_Code (Table: Roles) | Role_Name (Table: Roles) | Role_Description (Table: Roles) | Document_ID (Table: All_Documents) | Date_Stored (Table: All_Documents) | Document_Type_Code (Table: All_Documents) | Document_Name (Table: All_Documents) | Document_Description (Table: All_Documents) | Other_Details (Table: All_Documents) | Employee_ID (Table: Employees) | Role_Code (Table: Employees) | Employee_Name (Table: Employees) | Gender_MFU (Table: Employees) | Date_of_Birth (Table: Employees) | Other_Details (Table: Employees) | Document_ID (Table: Document_Locations) | Location_Code (Table: Document_Locations) | Date_in_Location_From (Table: Document_Locations) | Date_in_Locaton_To (Table: Document_Locations) | Document_ID (Table: Documents_to_be_Destroyed) | Destruction_Authorised_by_Employee_ID (Table: Documents_to_be_Destroyed) | Destroyed_by_Employee_ID (Table: Documents_to_be_Destroyed) | Planned_Destruction_Date (Table: Documents_to_be_Destroyed) | Actual_Destruction_Date (Table: Documents_to_be_Destroyed) | Other_Details (Table: Documents_to_be_Destroyed)
Find the name of dorms which have both TV Lounge and Study Room as amenities.,SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room',* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
Find the number of trains starting from each origin.,"SELECT origin ,  count(*) FROM train GROUP BY origin",* (Table: weekly_weather) | id (Table: train) | train_number (Table: train) | name (Table: train) | origin (Table: train) | destination (Table: train) | time (Table: train) | interval (Table: train) | id (Table: station) | network_name (Table: station) | services (Table: station) | local_authority (Table: station) | train_id (Table: route) | station_id (Table: route) | station_id (Table: weekly_weather) | day_of_week (Table: weekly_weather) | high_temperature (Table: weekly_weather) | low_temperature (Table: weekly_weather) | precipitation (Table: weekly_weather) | wind_speed_mph (Table: weekly_weather)
Which courses are taught on days MTW?,"SELECT CName FROM COURSE WHERE Days  =  ""MTW""",* (Table: Gradeconversion) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty) | DNO (Table: Department) | Division (Table: Department) | DName (Table: Department) | Room (Table: Department) | Building (Table: Department) | DPhone (Table: Department) | FacID (Table: Member_of) | DNO (Table: Member_of) | Appt_Type (Table: Member_of) | CID (Table: Course) | CName (Table: Course) | Credits (Table: Course) | Instructor (Table: Course) | Days (Table: Course) | Hours (Table: Course) | DNO (Table: Course) | StuID (Table: Minor_in) | DNO (Table: Minor_in) | StuID (Table: Enrolled_in) | CID (Table: Enrolled_in) | Grade (Table: Enrolled_in) | lettergrade (Table: Gradeconversion) | gradepoint (Table: Gradeconversion)
What are the ids of the candidates that have an outcome code of Pass?,"SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = ""Pass""",* (Table: Candidate_Assessments) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | person_id (Table: People) | first_name (Table: People) | middle_name (Table: People) | last_name (Table: People) | cell_mobile_number (Table: People) | email_address (Table: People) | login_name (Table: People) | password (Table: People) | student_id (Table: Students) | student_details (Table: Students) | course_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | other_details (Table: Courses) | person_address_id (Table: People_Addresses) | person_id (Table: People_Addresses) | address_id (Table: People_Addresses) | date_from (Table: People_Addresses) | date_to (Table: People_Addresses) | student_id (Table: Student_Course_Registrations) | course_id (Table: Student_Course_Registrations) | registration_date (Table: Student_Course_Registrations) | student_id (Table: Student_Course_Attendance) | course_id (Table: Student_Course_Attendance) | date_of_attendance (Table: Student_Course_Attendance) | candidate_id (Table: Candidates) | candidate_details (Table: Candidates) | candidate_id (Table: Candidate_Assessments) | qualification (Table: Candidate_Assessments) | assessment_date (Table: Candidate_Assessments) | asessment_outcome_code (Table: Candidate_Assessments)
"List all role codes, role names, and role descriptions.","SELECT role_code ,  role_name ,  role_description FROM ROLES",* (Table: Documents_to_be_Destroyed) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Calendar_Date (Table: Ref_Calendar) | Day_Number (Table: Ref_Calendar) | Location_Code (Table: Ref_Locations) | Location_Name (Table: Ref_Locations) | Location_Description (Table: Ref_Locations) | Role_Code (Table: Roles) | Role_Name (Table: Roles) | Role_Description (Table: Roles) | Document_ID (Table: All_Documents) | Date_Stored (Table: All_Documents) | Document_Type_Code (Table: All_Documents) | Document_Name (Table: All_Documents) | Document_Description (Table: All_Documents) | Other_Details (Table: All_Documents) | Employee_ID (Table: Employees) | Role_Code (Table: Employees) | Employee_Name (Table: Employees) | Gender_MFU (Table: Employees) | Date_of_Birth (Table: Employees) | Other_Details (Table: Employees) | Document_ID (Table: Document_Locations) | Location_Code (Table: Document_Locations) | Date_in_Location_From (Table: Document_Locations) | Date_in_Locaton_To (Table: Document_Locations) | Document_ID (Table: Documents_to_be_Destroyed) | Destruction_Authorised_by_Employee_ID (Table: Documents_to_be_Destroyed) | Destroyed_by_Employee_ID (Table: Documents_to_be_Destroyed) | Planned_Destruction_Date (Table: Documents_to_be_Destroyed) | Actual_Destruction_Date (Table: Documents_to_be_Destroyed) | Other_Details (Table: Documents_to_be_Destroyed)
Which engineers have never visited to maintain the assets? List the engineer first name and last name.,"SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)",* (Table: Skills_Required_To_Fix) | company_id (Table: Third_Party_Companies) | company_type (Table: Third_Party_Companies) | company_name (Table: Third_Party_Companies) | company_address (Table: Third_Party_Companies) | other_company_details (Table: Third_Party_Companies) | maintenance_contract_id (Table: Maintenance_Contracts) | maintenance_contract_company_id (Table: Maintenance_Contracts) | contract_start_date (Table: Maintenance_Contracts) | contract_end_date (Table: Maintenance_Contracts) | other_contract_details (Table: Maintenance_Contracts) | part_id (Table: Parts) | part_name (Table: Parts) | chargeable_yn (Table: Parts) | chargeable_amount (Table: Parts) | other_part_details (Table: Parts) | skill_id (Table: Skills) | skill_code (Table: Skills) | skill_description (Table: Skills) | staff_id (Table: Staff) | staff_name (Table: Staff) | gender (Table: Staff) | other_staff_details (Table: Staff) | asset_id (Table: Assets) | maintenance_contract_id (Table: Assets) | supplier_company_id (Table: Assets) | asset_details (Table: Assets) | asset_make (Table: Assets) | asset_model (Table: Assets) | asset_acquired_date (Table: Assets) | asset_disposed_date (Table: Assets) | other_asset_details (Table: Assets) | asset_id (Table: Asset_Parts) | part_id (Table: Asset_Parts) | engineer_id (Table: Maintenance_Engineers) | company_id (Table: Maintenance_Engineers) | first_name (Table: Maintenance_Engineers) | last_name (Table: Maintenance_Engineers) | other_details (Table: Maintenance_Engineers) | engineer_id (Table: Engineer_Skills) | skill_id (Table: Engineer_Skills) | fault_log_entry_id (Table: Fault_Log) | asset_id (Table: Fault_Log) | recorded_by_staff_id (Table: Fault_Log) | fault_log_entry_datetime (Table: Fault_Log) | fault_description (Table: Fault_Log) | other_fault_details (Table: Fault_Log) | engineer_visit_id (Table: Engineer_Visits) | contact_staff_id (Table: Engineer_Visits) | engineer_id (Table: Engineer_Visits) | fault_log_entry_id (Table: Engineer_Visits) | fault_status (Table: Engineer_Visits) | visit_start_datetime (Table: Engineer_Visits) | visit_end_datetime (Table: Engineer_Visits) | other_visit_details (Table: Engineer_Visits) | part_fault_id (Table: Part_Faults) | part_id (Table: Part_Faults) | fault_short_name (Table: Part_Faults) | fault_description (Table: Part_Faults) | other_fault_details (Table: Part_Faults) | fault_log_entry_id (Table: Fault_Log_Parts) | part_fault_id (Table: Fault_Log_Parts) | fault_status (Table: Fault_Log_Parts) | part_fault_id (Table: Skills_Required_To_Fix) | skill_id (Table: Skills_Required_To_Fix)
What are the names and types of the dorms that have a capacity greater than 300 or less than 100?,"SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
Show names for all employees who have certificate of Boeing 737-800.,"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  ""Boeing 737-800""",* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
"For each submission, find its author and acceptance result.","SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID",* (Table: Acceptance) | Workshop_ID (Table: workshop) | Date (Table: workshop) | Venue (Table: workshop) | Name (Table: workshop) | Submission_ID (Table: submission) | Scores (Table: submission) | Author (Table: submission) | College (Table: submission) | Submission_ID (Table: Acceptance) | Workshop_ID (Table: Acceptance) | Result (Table: Acceptance)
Find the code of city where most of students are living in.,SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1,* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
How old is the doctor named Zach?,SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach',* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
How many employees who are IT staff are from each city?,"SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
"What are the average, maximum and total revenues of all companies?","SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers",* (Table: Products) | Code (Table: Manufacturers) | Name (Table: Manufacturers) | Headquarter (Table: Manufacturers) | Founder (Table: Manufacturers) | Revenue (Table: Manufacturers) | Code (Table: Products) | Name (Table: Products) | Price (Table: Products) | Manufacturer (Table: Products)
"What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?","SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
List the names of people that are not entrepreneurs.,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur),* (Table: people) | Entrepreneur_ID (Table: entrepreneur) | People_ID (Table: entrepreneur) | Company (Table: entrepreneur) | Money_Requested (Table: entrepreneur) | Investor (Table: entrepreneur) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Date_of_Birth (Table: people)
How many sports do we have?,SELECT count(DISTINCT sportname) FROM Sportsinfo,* (Table: SportsInfo) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | GameID (Table: Video_Games) | GName (Table: Video_Games) | GType (Table: Video_Games) | StuID (Table: Plays_Games) | GameID (Table: Plays_Games) | Hours_Played (Table: Plays_Games) | StuID (Table: SportsInfo) | SportName (Table: SportsInfo) | HoursPerWeek (Table: SportsInfo) | GamesPlayed (Table: SportsInfo) | OnScholarship (Table: SportsInfo)
Show the premise type and address type code for all customer addresses.,"SELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id",* (Table: Order_Items) | premise_id (Table: Premises) | premises_type (Table: Premises) | premise_details (Table: Premises) | product_id (Table: Products) | product_category (Table: Products) | product_name (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | customer_address (Table: Customers) | customer_login (Table: Customers) | customer_password (Table: Customers) | mailshot_id (Table: Mailshot_Campaigns) | product_category (Table: Mailshot_Campaigns) | mailshot_name (Table: Mailshot_Campaigns) | mailshot_start_date (Table: Mailshot_Campaigns) | mailshot_end_date (Table: Mailshot_Campaigns) | customer_id (Table: Customer_Addresses) | premise_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type_code (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | shipping_method_code (Table: Customer_Orders) | order_placed_datetime (Table: Customer_Orders) | order_delivered_datetime (Table: Customer_Orders) | order_shipping_charges (Table: Customer_Orders) | mailshot_id (Table: Mailshot_Customers) | customer_id (Table: Mailshot_Customers) | outcome_code (Table: Mailshot_Customers) | mailshot_customer_date (Table: Mailshot_Customers) | item_id (Table: Order_Items) | order_item_status_code (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | item_status_code (Table: Order_Items) | item_delivered_datetime (Table: Order_Items) | item_order_quantity (Table: Order_Items)
"What is all the information about courses, ordered by credits ascending?",SELECT * FROM COURSE ORDER BY Credits,* (Table: Gradeconversion) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty) | DNO (Table: Department) | Division (Table: Department) | DName (Table: Department) | Room (Table: Department) | Building (Table: Department) | DPhone (Table: Department) | FacID (Table: Member_of) | DNO (Table: Member_of) | Appt_Type (Table: Member_of) | CID (Table: Course) | CName (Table: Course) | Credits (Table: Course) | Instructor (Table: Course) | Days (Table: Course) | Hours (Table: Course) | DNO (Table: Course) | StuID (Table: Minor_in) | DNO (Table: Minor_in) | StuID (Table: Enrolled_in) | CID (Table: Enrolled_in) | Grade (Table: Enrolled_in) | lettergrade (Table: Gradeconversion) | gradepoint (Table: Gradeconversion)
What is the total number of deaths and damage for all storms with a max speed greater than the average?,"SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)",* (Table: affected_region) | Storm_ID (Table: storm) | Name (Table: storm) | Dates_active (Table: storm) | Max_speed (Table: storm) | Damage_millions_USD (Table: storm) | Number_Deaths (Table: storm) | Region_id (Table: region) | Region_code (Table: region) | Region_name (Table: region) | Region_id (Table: affected_region) | Storm_ID (Table: affected_region) | Number_city_affected (Table: affected_region)
Count the number of products.,SELECT count(*) FROM products,* (Table: Product_Characteristics) | characteristic_type_code (Table: Ref_Characteristic_Types) | characteristic_type_description (Table: Ref_Characteristic_Types) | color_code (Table: Ref_Colors) | color_description (Table: Ref_Colors) | product_category_code (Table: Ref_Product_Categories) | product_category_description (Table: Ref_Product_Categories) | unit_of_measure (Table: Ref_Product_Categories) | characteristic_id (Table: Characteristics) | characteristic_type_code (Table: Characteristics) | characteristic_data_type (Table: Characteristics) | characteristic_name (Table: Characteristics) | other_characteristic_details (Table: Characteristics) | product_id (Table: Products) | color_code (Table: Products) | product_category_code (Table: Products) | product_name (Table: Products) | typical_buying_price (Table: Products) | typical_selling_price (Table: Products) | product_description (Table: Products) | other_product_details (Table: Products) | product_id (Table: Product_Characteristics) | characteristic_id (Table: Product_Characteristics) | product_characteristic_value (Table: Product_Characteristics)
What is the title and id of the film that has the greatest number of copies in inventory?,"SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",* (Table: store) | actor_id (Table: actor) | first_name (Table: actor) | last_name (Table: actor) | last_update (Table: actor) | address_id (Table: address) | address (Table: address) | address2 (Table: address) | district (Table: address) | city_id (Table: address) | postal_code (Table: address) | phone (Table: address) | last_update (Table: address) | category_id (Table: category) | name (Table: category) | last_update (Table: category) | city_id (Table: city) | city (Table: city) | country_id (Table: city) | last_update (Table: city) | country_id (Table: country) | country (Table: country) | last_update (Table: country) | customer_id (Table: customer) | store_id (Table: customer) | first_name (Table: customer) | last_name (Table: customer) | email (Table: customer) | address_id (Table: customer) | active (Table: customer) | create_date (Table: customer) | last_update (Table: customer) | film_id (Table: film) | title (Table: film) | description (Table: film) | release_year (Table: film) | language_id (Table: film) | original_language_id (Table: film) | rental_duration (Table: film) | rental_rate (Table: film) | length (Table: film) | replacement_cost (Table: film) | rating (Table: film) | special_features (Table: film) | last_update (Table: film) | actor_id (Table: film_actor) | film_id (Table: film_actor) | last_update (Table: film_actor) | film_id (Table: film_category) | category_id (Table: film_category) | last_update (Table: film_category) | film_id (Table: film_text) | title (Table: film_text) | description (Table: film_text) | inventory_id (Table: inventory) | film_id (Table: inventory) | store_id (Table: inventory) | last_update (Table: inventory) | language_id (Table: language) | name (Table: language) | last_update (Table: language) | payment_id (Table: payment) | customer_id (Table: payment) | staff_id (Table: payment) | rental_id (Table: payment) | amount (Table: payment) | payment_date (Table: payment) | last_update (Table: payment) | rental_id (Table: rental) | rental_date (Table: rental) | inventory_id (Table: rental) | customer_id (Table: rental) | return_date (Table: rental) | staff_id (Table: rental) | last_update (Table: rental) | staff_id (Table: staff) | first_name (Table: staff) | last_name (Table: staff) | address_id (Table: staff) | picture (Table: staff) | email (Table: staff) | store_id (Table: staff) | active (Table: staff) | username (Table: staff) | password (Table: staff) | last_update (Table: staff) | store_id (Table: store) | manager_staff_id (Table: store) | address_id (Table: store) | last_update (Table: store)
What is the id of the most recent order?,SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1,* (Table: Shipment_Items) | customer_id (Table: Customers) | customer_name (Table: Customers) | customer_details (Table: Customers) | invoice_number (Table: Invoices) | invoice_date (Table: Invoices) | invoice_details (Table: Invoices) | order_id (Table: Orders) | customer_id (Table: Orders) | order_status (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | product_id (Table: Products) | product_name (Table: Products) | product_details (Table: Products) | order_item_id (Table: Order_Items) | product_id (Table: Order_Items) | order_id (Table: Order_Items) | order_item_status (Table: Order_Items) | order_item_details (Table: Order_Items) | shipment_id (Table: Shipments) | order_id (Table: Shipments) | invoice_number (Table: Shipments) | shipment_tracking_number (Table: Shipments) | shipment_date (Table: Shipments) | other_shipment_details (Table: Shipments) | shipment_id (Table: Shipment_Items) | order_item_id (Table: Shipment_Items)
How many voting records do we have?,SELECT count(*) FROM VOTING_RECORD,* (Table: Voting_record) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | StuID (Table: Voting_record) | Registration_Date (Table: Voting_record) | Election_Cycle (Table: Voting_record) | President_Vote (Table: Voting_record) | Vice_President_Vote (Table: Voting_record) | Secretary_Vote (Table: Voting_record) | Treasurer_Vote (Table: Voting_record) | Class_President_Vote (Table: Voting_record) | Class_Senator_Vote (Table: Voting_record)
What are the names of rooms that have either king or queen bed?,"SELECT roomName FROM Rooms WHERE bedType  =  ""King"" OR bedType  =  ""Queen"";",* (Table: Reservations) | RoomId (Table: Rooms) | roomName (Table: Rooms) | beds (Table: Rooms) | bedType (Table: Rooms) | maxOccupancy (Table: Rooms) | basePrice (Table: Rooms) | decor (Table: Rooms) | Code (Table: Reservations) | Room (Table: Reservations) | CheckIn (Table: Reservations) | CheckOut (Table: Reservations) | Rate (Table: Reservations) | LastName (Table: Reservations) | FirstName (Table: Reservations) | Adults (Table: Reservations) | Kids (Table: Reservations)
How many courses does the department of Computer Information Systmes offer?,"SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  ""Computer Info. Systems""",* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
Find the committees that have delegates both from from the democratic party and the liberal party.,"SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  ""Democratic"" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  ""Liberal""",* (Table: election) | County_Id (Table: county) | County_name (Table: county) | Population (Table: county) | Zip_code (Table: county) | Party_ID (Table: party) | Year (Table: party) | Party (Table: party) | Governor (Table: party) | Lieutenant_Governor (Table: party) | Comptroller (Table: party) | Attorney_General (Table: party) | US_Senate (Table: party) | Election_ID (Table: election) | Counties_Represented (Table: election) | District (Table: election) | Delegate (Table: election) | Party (Table: election) | First_Elected (Table: election) | Committee (Table: election)
Find the total number of instructors who teach a course in the Spring 2010 semester.,SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010,* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Which services have been used more than twice in first notification of loss? Return the service name.,SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2,* (Table: Settlements) | Customer_ID (Table: Customers) | Customer_name (Table: Customers) | Service_ID (Table: Services) | Service_name (Table: Services) | Policy_ID (Table: Available_Policies) | policy_type_code (Table: Available_Policies) | Customer_Phone (Table: Available_Policies) | Customer_ID (Table: Customers_Policies) | Policy_ID (Table: Customers_Policies) | Date_Opened (Table: Customers_Policies) | Date_Closed (Table: Customers_Policies) | FNOL_ID (Table: First_Notification_of_Loss) | Customer_ID (Table: First_Notification_of_Loss) | Policy_ID (Table: First_Notification_of_Loss) | Service_ID (Table: First_Notification_of_Loss) | Claim_ID (Table: Claims) | FNOL_ID (Table: Claims) | Effective_Date (Table: Claims) | Settlement_ID (Table: Settlements) | Claim_ID (Table: Settlements) | Effective_Date (Table: Settlements) | Settlement_Amount (Table: Settlements)
"What are the names of wines, sorted by price ascending?",SELECT DISTINCT Name FROM WINE ORDER BY price,* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
List the service id and details for the events.,"SELECT service_id ,  event_details FROM EVENTS",* (Table: Participants_in_Events) | Service_ID (Table: Services) | Service_Type_Code (Table: Services) | Participant_ID (Table: Participants) | Participant_Type_Code (Table: Participants) | Participant_Details (Table: Participants) | Event_ID (Table: Events) | Service_ID (Table: Events) | Event_Details (Table: Events) | Event_ID (Table: Participants_in_Events) | Participant_ID (Table: Participants_in_Events)
How many trains have 'Express' in their names?,"SELECT count(*) FROM train WHERE name LIKE ""%Express%""",* (Table: weekly_weather) | id (Table: train) | train_number (Table: train) | name (Table: train) | origin (Table: train) | destination (Table: train) | time (Table: train) | interval (Table: train) | id (Table: station) | network_name (Table: station) | services (Table: station) | local_authority (Table: station) | train_id (Table: route) | station_id (Table: route) | station_id (Table: weekly_weather) | day_of_week (Table: weekly_weather) | high_temperature (Table: weekly_weather) | low_temperature (Table: weekly_weather) | precipitation (Table: weekly_weather) | wind_speed_mph (Table: weekly_weather)
How many drivers were in the Australian Grand Prix held in 2009?,"SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = ""Australian Grand Prix"" AND YEAR = 2009",* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
How many female people are older than 30 in our record?,SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30,* (Table: wedding) | People_ID (Table: people) | Name (Table: people) | Country (Table: people) | Is_Male (Table: people) | Age (Table: people) | Church_ID (Table: church) | Name (Table: church) | Organized_by (Table: church) | Open_Date (Table: church) | Continuation_of (Table: church) | Church_ID (Table: wedding) | Male_ID (Table: wedding) | Female_ID (Table: wedding) | Year (Table: wedding)
Show names of shops and the carriers of devices they have in stock.,"SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID",* (Table: stock) | Device_ID (Table: device) | Device (Table: device) | Carrier (Table: device) | Package_Version (Table: device) | Applications (Table: device) | Software_Platform (Table: device) | Shop_ID (Table: shop) | Shop_Name (Table: shop) | Location (Table: shop) | Open_Date (Table: shop) | Open_Year (Table: shop) | Shop_ID (Table: stock) | Device_ID (Table: stock) | Quantity (Table: stock)
How many professors have a Ph.D. in each department?,"SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code",* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
"Find the average age of members of the club ""Hopkins Student Enterprises"".","SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  ""Hopkins Student Enterprises""",* (Table: Member_of_club) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | ClubID (Table: Club) | ClubName (Table: Club) | ClubDesc (Table: Club) | ClubLocation (Table: Club) | StuID (Table: Member_of_club) | ClubID (Table: Member_of_club) | Position (Table: Member_of_club)
"What are the names of the workshop groups that have bookings with status code ""stop""?","SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  ""stop""",* (Table: Invoice_Items) | payment_method_code (Table: Ref_Payment_Methods) | payment_method_description (Table: Ref_Payment_Methods) | Service_Type_Code (Table: Ref_Service_Types) | Parent_Service_Type_Code (Table: Ref_Service_Types) | Service_Type_Description (Table: Ref_Service_Types) | Address_ID (Table: Addresses) | Line_1 (Table: Addresses) | Line_2 (Table: Addresses) | City_Town (Table: Addresses) | State_County (Table: Addresses) | Other_Details (Table: Addresses) | Product_ID (Table: Products) | Product_Name (Table: Products) | Product_Price (Table: Products) | Product_Description (Table: Products) | Other_Product_Service_Details (Table: Products) | Marketing_Region_Code (Table: Marketing_Regions) | Marketing_Region_Name (Table: Marketing_Regions) | Marketing_Region_Descriptrion (Table: Marketing_Regions) | Other_Details (Table: Marketing_Regions) | Client_ID (Table: Clients) | Address_ID (Table: Clients) | Customer_Email_Address (Table: Clients) | Customer_Name (Table: Clients) | Customer_Phone (Table: Clients) | Other_Details (Table: Clients) | Workshop_Group_ID (Table: Drama_Workshop_Groups) | Address_ID (Table: Drama_Workshop_Groups) | Currency_Code (Table: Drama_Workshop_Groups) | Marketing_Region_Code (Table: Drama_Workshop_Groups) | Store_Name (Table: Drama_Workshop_Groups) | Store_Phone (Table: Drama_Workshop_Groups) | Store_Email_Address (Table: Drama_Workshop_Groups) | Other_Details (Table: Drama_Workshop_Groups) | Performer_ID (Table: Performers) | Address_ID (Table: Performers) | Customer_Name (Table: Performers) | Customer_Phone (Table: Performers) | Customer_Email_Address (Table: Performers) | Other_Details (Table: Performers) | Customer_ID (Table: Customers) | Address_ID (Table: Customers) | Customer_Name (Table: Customers) | Customer_Phone (Table: Customers) | Customer_Email_Address (Table: Customers) | Other_Details (Table: Customers) | Store_ID (Table: Stores) | Address_ID (Table: Stores) | Marketing_Region_Code (Table: Stores) | Store_Name (Table: Stores) | Store_Phone (Table: Stores) | Store_Email_Address (Table: Stores) | Other_Details (Table: Stores) | Booking_ID (Table: Bookings) | Customer_ID (Table: Bookings) | Workshop_Group_ID (Table: Bookings) | Status_Code (Table: Bookings) | Store_ID (Table: Bookings) | Order_Date (Table: Bookings) | Planned_Delivery_Date (Table: Bookings) | Actual_Delivery_Date (Table: Bookings) | Other_Order_Details (Table: Bookings) | Order_ID (Table: Performers_in_Bookings) | Performer_ID (Table: Performers_in_Bookings) | Order_ID (Table: Customer_Orders) | Customer_ID (Table: Customer_Orders) | Store_ID (Table: Customer_Orders) | Order_Date (Table: Customer_Orders) | Planned_Delivery_Date (Table: Customer_Orders) | Actual_Delivery_Date (Table: Customer_Orders) | Other_Order_Details (Table: Customer_Orders) | Order_Item_ID (Table: Order_Items) | Order_ID (Table: Order_Items) | Product_ID (Table: Order_Items) | Order_Quantity (Table: Order_Items) | Other_Item_Details (Table: Order_Items) | Invoice_ID (Table: Invoices) | Order_ID (Table: Invoices) | payment_method_code (Table: Invoices) | Product_ID (Table: Invoices) | Order_Quantity (Table: Invoices) | Other_Item_Details (Table: Invoices) | Order_Item_ID (Table: Invoices) | Service_ID (Table: Services) | Service_Type_Code (Table: Services) | Workshop_Group_ID (Table: Services) | Product_Description (Table: Services) | Product_Name (Table: Services) | Product_Price (Table: Services) | Other_Product_Service_Details (Table: Services) | Order_ID (Table: Bookings_Services) | Product_ID (Table: Bookings_Services) | Invoice_Item_ID (Table: Invoice_Items) | Invoice_ID (Table: Invoice_Items) | Order_ID (Table: Invoice_Items) | Order_Item_ID (Table: Invoice_Items) | Product_ID (Table: Invoice_Items) | Order_Quantity (Table: Invoice_Items) | Other_Item_Details (Table: Invoice_Items)
Count the number of students the teacher LORIA ONDERSMA teaches.,"SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  ""LORIA"" AND T2.lastname  =  ""ONDERSMA""",* (Table: teachers) | LastName (Table: list) | FirstName (Table: list) | Grade (Table: list) | Classroom (Table: list) | LastName (Table: teachers) | FirstName (Table: teachers) | Classroom (Table: teachers)
Count the number of Annual Meeting events that took place in the region of the United Kingdom.,"SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  ""United Kingdom"" AND t3.Event_Name  =  ""Annaual Meeting""",* (Table: party_events) | Region_ID (Table: region) | Region_name (Table: region) | Date (Table: region) | Label (Table: region) | Format (Table: region) | Catalogue (Table: region) | Party_ID (Table: party) | Minister (Table: party) | Took_office (Table: party) | Left_office (Table: party) | Region_ID (Table: party) | Party_name (Table: party) | Member_ID (Table: member) | Member_Name (Table: member) | Party_ID (Table: member) | In_office (Table: member) | Event_ID (Table: party_events) | Event_Name (Table: party_events) | Party_ID (Table: party_events) | Member_in_charge_ID (Table: party_events)
Select the code of the product that is cheapest in each product category.,"SELECT code ,  name ,  min(price) FROM products GROUP BY name",* (Table: Products) | Code (Table: Manufacturers) | Name (Table: Manufacturers) | Headquarter (Table: Manufacturers) | Founder (Table: Manufacturers) | Revenue (Table: Manufacturers) | Code (Table: Products) | Name (Table: Products) | Price (Table: Products) | Manufacturer (Table: Products)
Show different nationalities along with the number of hosts of each nationality.,"SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality",* (Table: party_host) | Party_ID (Table: party) | Party_Theme (Table: party) | Location (Table: party) | First_year (Table: party) | Last_year (Table: party) | Number_of_hosts (Table: party) | Host_ID (Table: host) | Name (Table: host) | Nationality (Table: host) | Age (Table: host) | Party_ID (Table: party_host) | Host_ID (Table: party_host) | Is_Main_in_Charge (Table: party_host)
Show names of actors in descending order of the year their musical is awarded.,SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC,* (Table: actor) | Musical_ID (Table: musical) | Name (Table: musical) | Year (Table: musical) | Award (Table: musical) | Category (Table: musical) | Nominee (Table: musical) | Result (Table: musical) | Actor_ID (Table: actor) | Name (Table: actor) | Musical_ID (Table: actor) | Character (Table: actor) | Duration (Table: actor) | age (Table: actor)
Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.,"SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  ""Central Coast"" AND T2.year  <  2005",* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
List the publication dates of publications with 3 lowest prices.,SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3,* (Table: book) | Publication_ID (Table: publication) | Book_ID (Table: publication) | Publisher (Table: publication) | Publication_Date (Table: publication) | Price (Table: publication) | Book_ID (Table: book) | Title (Table: book) | Issues (Table: book) | Writer (Table: book)
How many camera lenses are not used in taking any photos?,SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos ),* (Table: photos) | id (Table: mountain) | name (Table: mountain) | Height (Table: mountain) | Prominence (Table: mountain) | Range (Table: mountain) | Country (Table: mountain) | id (Table: camera_lens) | brand (Table: camera_lens) | name (Table: camera_lens) | focal_length_mm (Table: camera_lens) | max_aperture (Table: camera_lens) | id (Table: photos) | camera_lens_id (Table: photos) | mountain_id (Table: photos) | color (Table: photos) | name (Table: photos)
Show the names and genders of players with a coach starting after 2011.,"SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011",* (Table: match_result) | Player_ID (Table: player) | Sponsor_name (Table: player) | Player_name (Table: player) | Gender (Table: player) | Residence (Table: player) | Occupation (Table: player) | Votes (Table: player) | Rank (Table: player) | Club_ID (Table: club) | Club_name (Table: club) | Region (Table: club) | Start_year (Table: club) | Coach_ID (Table: coach) | Coach_name (Table: coach) | Gender (Table: coach) | Club_ID (Table: coach) | Rank (Table: coach) | Player_ID (Table: player_coach) | Coach_ID (Table: player_coach) | Starting_year (Table: player_coach) | Rank (Table: match_result) | Club_ID (Table: match_result) | Gold (Table: match_result) | Big_Silver (Table: match_result) | Small_Silver (Table: match_result) | Bronze (Table: match_result) | Points (Table: match_result)
Return the poll resource associated with the most candidates.,SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1,* (Table: people) | Candidate_ID (Table: candidate) | People_ID (Table: candidate) | Poll_Source (Table: candidate) | Date (Table: candidate) | Support_rate (Table: candidate) | Consider_rate (Table: candidate) | Oppose_rate (Table: candidate) | Unsure_rate (Table: candidate) | People_ID (Table: people) | Sex (Table: people) | Name (Table: people) | Date_of_Birth (Table: people) | Height (Table: people) | Weight (Table: people)
What is the total enrollment number of all colleges?,SELECT sum(enr) FROM College,* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
What are the names of courses without prerequisites?,SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq),* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Show the denomination shared by more than one school.,SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1,* (Table: player) | School_ID (Table: school) | School (Table: school) | Location (Table: school) | Enrollment (Table: school) | Founded (Table: school) | Denomination (Table: school) | Boys_or_Girls (Table: school) | Day_or_Boarding (Table: school) | Year_Entered_Competition (Table: school) | School_Colors (Table: school) | School_ID (Table: school_details) | Nickname (Table: school_details) | Colors (Table: school_details) | League (Table: school_details) | Class (Table: school_details) | Division (Table: school_details) | School_Id (Table: school_performance) | School_Year (Table: school_performance) | Class_A (Table: school_performance) | Class_AA (Table: school_performance) | Player_ID (Table: player) | Player (Table: player) | Team (Table: player) | Age (Table: player) | Position (Table: player) | School_ID (Table: player)
List all player names who have an overall rating higher than the average.,SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes ),* (Table: Team_Attributes) | id (Table: Player_Attributes) | player_fifa_api_id (Table: Player_Attributes) | player_api_id (Table: Player_Attributes) | date (Table: Player_Attributes) | overall_rating (Table: Player_Attributes) | potential (Table: Player_Attributes) | preferred_foot (Table: Player_Attributes) | attacking_work_rate (Table: Player_Attributes) | defensive_work_rate (Table: Player_Attributes) | crossing (Table: Player_Attributes) | finishing (Table: Player_Attributes) | heading_accuracy (Table: Player_Attributes) | short_passing (Table: Player_Attributes) | volleys (Table: Player_Attributes) | dribbling (Table: Player_Attributes) | curve (Table: Player_Attributes) | free_kick_accuracy (Table: Player_Attributes) | long_passing (Table: Player_Attributes) | ball_control (Table: Player_Attributes) | acceleration (Table: Player_Attributes) | sprint_speed (Table: Player_Attributes) | agility (Table: Player_Attributes) | reactions (Table: Player_Attributes) | balance (Table: Player_Attributes) | shot_power (Table: Player_Attributes) | jumping (Table: Player_Attributes) | stamina (Table: Player_Attributes) | strength (Table: Player_Attributes) | long_shots (Table: Player_Attributes) | aggression (Table: Player_Attributes) | interceptions (Table: Player_Attributes) | positioning (Table: Player_Attributes) | vision (Table: Player_Attributes) | penalties (Table: Player_Attributes) | marking (Table: Player_Attributes) | standing_tackle (Table: Player_Attributes) | sliding_tackle (Table: Player_Attributes) | gk_diving (Table: Player_Attributes) | gk_handling (Table: Player_Attributes) | gk_kicking (Table: Player_Attributes) | gk_positioning (Table: Player_Attributes) | gk_reflexes (Table: Player_Attributes) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: Player) | player_api_id (Table: Player) | player_name (Table: Player) | player_fifa_api_id (Table: Player) | birthday (Table: Player) | height (Table: Player) | weight (Table: Player) | id (Table: League) | country_id (Table: League) | name (Table: League) | id (Table: Country) | name (Table: Country) | id (Table: Team) | team_api_id (Table: Team) | team_fifa_api_id (Table: Team) | team_long_name (Table: Team) | team_short_name (Table: Team) | id (Table: Team_Attributes) | team_fifa_api_id (Table: Team_Attributes) | team_api_id (Table: Team_Attributes) | date (Table: Team_Attributes) | buildUpPlaySpeed (Table: Team_Attributes) | buildUpPlaySpeedClass (Table: Team_Attributes) | buildUpPlayDribbling (Table: Team_Attributes) | buildUpPlayDribblingClass (Table: Team_Attributes) | buildUpPlayPassing (Table: Team_Attributes) | buildUpPlayPassingClass (Table: Team_Attributes) | buildUpPlayPositioningClass (Table: Team_Attributes) | chanceCreationPassing (Table: Team_Attributes) | chanceCreationPassingClass (Table: Team_Attributes) | chanceCreationCrossing (Table: Team_Attributes) | chanceCreationCrossingClass (Table: Team_Attributes) | chanceCreationShooting (Table: Team_Attributes) | chanceCreationShootingClass (Table: Team_Attributes) | chanceCreationPositioningClass (Table: Team_Attributes) | defencePressure (Table: Team_Attributes) | defencePressureClass (Table: Team_Attributes) | defenceAggression (Table: Team_Attributes) | defenceAggressionClass (Table: Team_Attributes) | defenceTeamWidth (Table: Team_Attributes) | defenceTeamWidthClass (Table: Team_Attributes) | defenceDefenderLineClass (Table: Team_Attributes)
How many different captain ranks are there?,SELECT count(DISTINCT rank) FROM captain,* (Table: Ship) | Captain_ID (Table: captain) | Name (Table: captain) | Ship_ID (Table: captain) | age (Table: captain) | Class (Table: captain) | Rank (Table: captain) | Ship_ID (Table: Ship) | Name (Table: Ship) | Type (Table: Ship) | Built_Year (Table: Ship) | Class (Table: Ship) | Flag (Table: Ship)
"Which player has the most all star game experiences? Give me the first name, last name and id of the player, as well as the number of times the player participated in all star game.","SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;",* (Table: team_half) | player_id (Table: all_star) | year (Table: all_star) | game_num (Table: all_star) | game_id (Table: all_star) | team_id (Table: all_star) | league_id (Table: all_star) | gp (Table: all_star) | starting_pos (Table: all_star) | year (Table: appearances) | team_id (Table: appearances) | league_id (Table: appearances) | player_id (Table: appearances) | g_all (Table: appearances) | gs (Table: appearances) | g_batting (Table: appearances) | g_defense (Table: appearances) | g_p (Table: appearances) | g_c (Table: appearances) | g_1b (Table: appearances) | g_2b (Table: appearances) | g_3b (Table: appearances) | g_ss (Table: appearances) | g_lf (Table: appearances) | g_cf (Table: appearances) | g_rf (Table: appearances) | g_of (Table: appearances) | g_dh (Table: appearances) | g_ph (Table: appearances) | g_pr (Table: appearances) | player_id (Table: manager_award) | award_id (Table: manager_award) | year (Table: manager_award) | league_id (Table: manager_award) | tie (Table: manager_award) | notes (Table: manager_award) | player_id (Table: player_award) | award_id (Table: player_award) | year (Table: player_award) | league_id (Table: player_award) | tie (Table: player_award) | notes (Table: player_award) | award_id (Table: manager_award_vote) | year (Table: manager_award_vote) | league_id (Table: manager_award_vote) | player_id (Table: manager_award_vote) | points_won (Table: manager_award_vote) | points_max (Table: manager_award_vote) | votes_first (Table: manager_award_vote) | award_id (Table: player_award_vote) | year (Table: player_award_vote) | league_id (Table: player_award_vote) | player_id (Table: player_award_vote) | points_won (Table: player_award_vote) | points_max (Table: player_award_vote) | votes_first (Table: player_award_vote) | player_id (Table: batting) | year (Table: batting) | stint (Table: batting) | team_id (Table: batting) | league_id (Table: batting) | g (Table: batting) | ab (Table: batting) | r (Table: batting) | h (Table: batting) | double (Table: batting) | triple (Table: batting) | hr (Table: batting) | rbi (Table: batting) | sb (Table: batting) | cs (Table: batting) | bb (Table: batting) | so (Table: batting) | ibb (Table: batting) | hbp (Table: batting) | sh (Table: batting) | sf (Table: batting) | g_idp (Table: batting) | year (Table: batting_postseason) | round (Table: batting_postseason) | player_id (Table: batting_postseason) | team_id (Table: batting_postseason) | league_id (Table: batting_postseason) | g (Table: batting_postseason) | ab (Table: batting_postseason) | r (Table: batting_postseason) | h (Table: batting_postseason) | double (Table: batting_postseason) | triple (Table: batting_postseason) | hr (Table: batting_postseason) | rbi (Table: batting_postseason) | sb (Table: batting_postseason) | cs (Table: batting_postseason) | bb (Table: batting_postseason) | so (Table: batting_postseason) | ibb (Table: batting_postseason) | hbp (Table: batting_postseason) | sh (Table: batting_postseason) | sf (Table: batting_postseason) | g_idp (Table: batting_postseason) | player_id (Table: player_college) | college_id (Table: player_college) | year (Table: player_college) | player_id (Table: fielding) | year (Table: fielding) | stint (Table: fielding) | team_id (Table: fielding) | league_id (Table: fielding) | pos (Table: fielding) | g (Table: fielding) | gs (Table: fielding) | inn_outs (Table: fielding) | po (Table: fielding) | a (Table: fielding) | e (Table: fielding) | dp (Table: fielding) | pb (Table: fielding) | wp (Table: fielding) | sb (Table: fielding) | cs (Table: fielding) | zr (Table: fielding) | player_id (Table: fielding_outfield) | year (Table: fielding_outfield) | stint (Table: fielding_outfield) | glf (Table: fielding_outfield) | gcf (Table: fielding_outfield) | grf (Table: fielding_outfield) | player_id (Table: fielding_postseason) | year (Table: fielding_postseason) | team_id (Table: fielding_postseason) | league_id (Table: fielding_postseason) | round (Table: fielding_postseason) | pos (Table: fielding_postseason) | g (Table: fielding_postseason) | gs (Table: fielding_postseason) | inn_outs (Table: fielding_postseason) | po (Table: fielding_postseason) | a (Table: fielding_postseason) | e (Table: fielding_postseason) | dp (Table: fielding_postseason) | tp (Table: fielding_postseason) | pb (Table: fielding_postseason) | sb (Table: fielding_postseason) | cs (Table: fielding_postseason) | player_id (Table: hall_of_fame) | yearid (Table: hall_of_fame) | votedby (Table: hall_of_fame) | ballots (Table: hall_of_fame) | needed (Table: hall_of_fame) | votes (Table: hall_of_fame) | inducted (Table: hall_of_fame) | category (Table: hall_of_fame) | needed_note (Table: hall_of_fame) | year (Table: home_game) | league_id (Table: home_game) | team_id (Table: home_game) | park_id (Table: home_game) | span_first (Table: home_game) | span_last (Table: home_game) | games (Table: home_game) | openings (Table: home_game) | attendance (Table: home_game) | player_id (Table: manager) | year (Table: manager) | team_id (Table: manager) | league_id (Table: manager) | inseason (Table: manager) | g (Table: manager) | w (Table: manager) | l (Table: manager) | rank (Table: manager) | plyr_mgr (Table: manager) | player_id (Table: manager_half) | year (Table: manager_half) | team_id (Table: manager_half) | league_id (Table: manager_half) | inseason (Table: manager_half) | half (Table: manager_half) | g (Table: manager_half) | w (Table: manager_half) | l (Table: manager_half) | rank (Table: manager_half) | player_id (Table: player) | birth_year (Table: player) | birth_month (Table: player) | birth_day (Table: player) | birth_country (Table: player) | birth_state (Table: player) | birth_city (Table: player) | death_year (Table: player) | death_month (Table: player) | death_day (Table: player) | death_country (Table: player) | death_state (Table: player) | death_city (Table: player) | name_first (Table: player) | name_last (Table: player) | name_given (Table: player) | weight (Table: player) | height (Table: player) | bats (Table: player) | throws (Table: player) | debut (Table: player) | final_game (Table: player) | retro_id (Table: player) | bbref_id (Table: player) | park_id (Table: park) | park_name (Table: park) | park_alias (Table: park) | city (Table: park) | state (Table: park) | country (Table: park) | player_id (Table: pitching) | year (Table: pitching) | stint (Table: pitching) | team_id (Table: pitching) | league_id (Table: pitching) | w (Table: pitching) | l (Table: pitching) | g (Table: pitching) | gs (Table: pitching) | cg (Table: pitching) | sho (Table: pitching) | sv (Table: pitching) | ipouts (Table: pitching) | h (Table: pitching) | er (Table: pitching) | hr (Table: pitching) | bb (Table: pitching) | so (Table: pitching) | baopp (Table: pitching) | era (Table: pitching) | ibb (Table: pitching) | wp (Table: pitching) | hbp (Table: pitching) | bk (Table: pitching) | bfp (Table: pitching) | gf (Table: pitching) | r (Table: pitching) | sh (Table: pitching) | sf (Table: pitching) | g_idp (Table: pitching) | player_id (Table: pitching_postseason) | year (Table: pitching_postseason) | round (Table: pitching_postseason) | team_id (Table: pitching_postseason) | league_id (Table: pitching_postseason) | w (Table: pitching_postseason) | l (Table: pitching_postseason) | g (Table: pitching_postseason) | gs (Table: pitching_postseason) | cg (Table: pitching_postseason) | sho (Table: pitching_postseason) | sv (Table: pitching_postseason) | ipouts (Table: pitching_postseason) | h (Table: pitching_postseason) | er (Table: pitching_postseason) | hr (Table: pitching_postseason) | bb (Table: pitching_postseason) | so (Table: pitching_postseason) | baopp (Table: pitching_postseason) | era (Table: pitching_postseason) | ibb (Table: pitching_postseason) | wp (Table: pitching_postseason) | hbp (Table: pitching_postseason) | bk (Table: pitching_postseason) | bfp (Table: pitching_postseason) | gf (Table: pitching_postseason) | r (Table: pitching_postseason) | sh (Table: pitching_postseason) | sf (Table: pitching_postseason) | g_idp (Table: pitching_postseason) | year (Table: salary) | team_id (Table: salary) | league_id (Table: salary) | player_id (Table: salary) | salary (Table: salary) | college_id (Table: college) | name_full (Table: college) | city (Table: college) | state (Table: college) | country (Table: college) | year (Table: postseason) | round (Table: postseason) | team_id_winner (Table: postseason) | league_id_winner (Table: postseason) | team_id_loser (Table: postseason) | league_id_loser (Table: postseason) | wins (Table: postseason) | losses (Table: postseason) | ties (Table: postseason) | year (Table: team) | league_id (Table: team) | team_id (Table: team) | franchise_id (Table: team) | div_id (Table: team) | rank (Table: team) | g (Table: team) | ghome (Table: team) | w (Table: team) | l (Table: team) | div_win (Table: team) | wc_win (Table: team) | lg_win (Table: team) | ws_win (Table: team) | r (Table: team) | ab (Table: team) | h (Table: team) | double (Table: team) | triple (Table: team) | hr (Table: team) | bb (Table: team) | so (Table: team) | sb (Table: team) | cs (Table: team) | hbp (Table: team) | sf (Table: team) | ra (Table: team) | er (Table: team) | era (Table: team) | cg (Table: team) | sho (Table: team) | sv (Table: team) | ipouts (Table: team) | ha (Table: team) | hra (Table: team) | bba (Table: team) | soa (Table: team) | e (Table: team) | dp (Table: team) | fp (Table: team) | name (Table: team) | park (Table: team) | attendance (Table: team) | bpf (Table: team) | ppf (Table: team) | team_id_br (Table: team) | team_id_lahman45 (Table: team) | team_id_retro (Table: team) | franchise_id (Table: team_franchise) | franchise_name (Table: team_franchise) | active (Table: team_franchise) | na_assoc (Table: team_franchise) | year (Table: team_half) | league_id (Table: team_half) | team_id (Table: team_half) | half (Table: team_half) | div_id (Table: team_half) | div_win (Table: team_half) | rank (Table: team_half) | g (Table: team_half) | w (Table: team_half) | l (Table: team_half)
Find the room number of the rooms which can sit 50 to 100 students and their buildings.,"SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Give me a list of all the distinct building descriptions.,SELECT DISTINCT building_description FROM Apartment_Buildings,* (Table: View_Unit_Status) | building_id (Table: Apartment_Buildings) | building_short_name (Table: Apartment_Buildings) | building_full_name (Table: Apartment_Buildings) | building_description (Table: Apartment_Buildings) | building_address (Table: Apartment_Buildings) | building_manager (Table: Apartment_Buildings) | building_phone (Table: Apartment_Buildings) | apt_id (Table: Apartments) | building_id (Table: Apartments) | apt_type_code (Table: Apartments) | apt_number (Table: Apartments) | bathroom_count (Table: Apartments) | bedroom_count (Table: Apartments) | room_count (Table: Apartments) | apt_id (Table: Apartment_Facilities) | facility_code (Table: Apartment_Facilities) | guest_id (Table: Guests) | gender_code (Table: Guests) | guest_first_name (Table: Guests) | guest_last_name (Table: Guests) | date_of_birth (Table: Guests) | apt_booking_id (Table: Apartment_Bookings) | apt_id (Table: Apartment_Bookings) | guest_id (Table: Apartment_Bookings) | booking_status_code (Table: Apartment_Bookings) | booking_start_date (Table: Apartment_Bookings) | booking_end_date (Table: Apartment_Bookings) | apt_id (Table: View_Unit_Status) | apt_booking_id (Table: View_Unit_Status) | status_date (Table: View_Unit_Status) | available_yn (Table: View_Unit_Status)
"List the duration, file size and format of songs whose genre is pop, ordered by title?","SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  ""pop"" ORDER BY T2.song_name",* (Table: song) | g_name (Table: genre) | rating (Table: genre) | most_popular_in (Table: genre) | artist_name (Table: artist) | country (Table: artist) | gender (Table: artist) | preferred_genre (Table: artist) | f_id (Table: files) | artist_name (Table: files) | file_size (Table: files) | duration (Table: files) | formats (Table: files) | song_name (Table: song) | artist_name (Table: song) | country (Table: song) | f_id (Table: song) | genre_is (Table: song) | rating (Table: song) | languages (Table: song) | releasedate (Table: song) | resolution (Table: song)
What is the name of the 3 employees who get paid the least?,SELECT name FROM Employee ORDER BY salary ASC LIMIT 3,* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
"What is the minimum, maximum, and average seating for all tracks.","SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track",* (Table: track) | Race_ID (Table: race) | Name (Table: race) | Class (Table: race) | Date (Table: race) | Track_ID (Table: race) | Track_ID (Table: track) | Name (Table: track) | Location (Table: track) | Seating (Table: track) | Year_Opened (Table: track)
Find the name and email of the user followed by the least number of people.,"SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",* (Table: user_profiles) | f1 (Table: follows) | f2 (Table: follows) | id (Table: tweets) | uid (Table: tweets) | text (Table: tweets) | createdate (Table: tweets) | uid (Table: user_profiles) | name (Table: user_profiles) | email (Table: user_profiles) | partitionid (Table: user_profiles) | followers (Table: user_profiles)
List the name of all different customers who have some loan sorted by their total loan amount.,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount),* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
Return the apartment number and the number of rooms for each apartment.,"SELECT apt_number ,  room_count FROM Apartments",* (Table: View_Unit_Status) | building_id (Table: Apartment_Buildings) | building_short_name (Table: Apartment_Buildings) | building_full_name (Table: Apartment_Buildings) | building_description (Table: Apartment_Buildings) | building_address (Table: Apartment_Buildings) | building_manager (Table: Apartment_Buildings) | building_phone (Table: Apartment_Buildings) | apt_id (Table: Apartments) | building_id (Table: Apartments) | apt_type_code (Table: Apartments) | apt_number (Table: Apartments) | bathroom_count (Table: Apartments) | bedroom_count (Table: Apartments) | room_count (Table: Apartments) | apt_id (Table: Apartment_Facilities) | facility_code (Table: Apartment_Facilities) | guest_id (Table: Guests) | gender_code (Table: Guests) | guest_first_name (Table: Guests) | guest_last_name (Table: Guests) | date_of_birth (Table: Guests) | apt_booking_id (Table: Apartment_Bookings) | apt_id (Table: Apartment_Bookings) | guest_id (Table: Apartment_Bookings) | booking_status_code (Table: Apartment_Bookings) | booking_start_date (Table: Apartment_Bookings) | booking_end_date (Table: Apartment_Bookings) | apt_id (Table: View_Unit_Status) | apt_booking_id (Table: View_Unit_Status) | status_date (Table: View_Unit_Status) | available_yn (Table: View_Unit_Status)
What are the ids of the trips that lasted the longest and how long did they last?,"SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",* (Table: weather) | id (Table: station) | name (Table: station) | lat (Table: station) | long (Table: station) | dock_count (Table: station) | city (Table: station) | installation_date (Table: station) | station_id (Table: status) | bikes_available (Table: status) | docks_available (Table: status) | time (Table: status) | id (Table: trip) | duration (Table: trip) | start_date (Table: trip) | start_station_name (Table: trip) | start_station_id (Table: trip) | end_date (Table: trip) | end_station_name (Table: trip) | end_station_id (Table: trip) | bike_id (Table: trip) | subscription_type (Table: trip) | zip_code (Table: trip) | date (Table: weather) | max_temperature_f (Table: weather) | mean_temperature_f (Table: weather) | min_temperature_f (Table: weather) | max_dew_point_f (Table: weather) | mean_dew_point_f (Table: weather) | min_dew_point_f (Table: weather) | max_humidity (Table: weather) | mean_humidity (Table: weather) | min_humidity (Table: weather) | max_sea_level_pressure_inches (Table: weather) | mean_sea_level_pressure_inches (Table: weather) | min_sea_level_pressure_inches (Table: weather) | max_visibility_miles (Table: weather) | mean_visibility_miles (Table: weather) | min_visibility_miles (Table: weather) | max_wind_Speed_mph (Table: weather) | mean_wind_speed_mph (Table: weather) | max_gust_speed_mph (Table: weather) | precipitation_inches (Table: weather) | cloud_cover (Table: weather) | events (Table: weather) | wind_dir_degrees (Table: weather) | zip_code (Table: weather)
"Find the texts of assessment notes for teachers with last name ""Schuster"".","SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  ""Schuster""",* (Table: Students_in_Detention) | address_type_code (Table: Ref_Address_Types) | address_type_description (Table: Ref_Address_Types) | detention_type_code (Table: Ref_Detention_Type) | detention_type_description (Table: Ref_Detention_Type) | incident_type_code (Table: Ref_Incident_Type) | incident_type_description (Table: Ref_Incident_Type) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | line_3 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | student_id (Table: Students) | address_id (Table: Students) | first_name (Table: Students) | middle_name (Table: Students) | last_name (Table: Students) | cell_mobile_number (Table: Students) | email_address (Table: Students) | date_first_rental (Table: Students) | date_left_university (Table: Students) | other_student_details (Table: Students) | teacher_id (Table: Teachers) | address_id (Table: Teachers) | first_name (Table: Teachers) | middle_name (Table: Teachers) | last_name (Table: Teachers) | gender (Table: Teachers) | cell_mobile_number (Table: Teachers) | email_address (Table: Teachers) | other_details (Table: Teachers) | notes_id (Table: Assessment_Notes) | student_id (Table: Assessment_Notes) | teacher_id (Table: Assessment_Notes) | date_of_notes (Table: Assessment_Notes) | text_of_notes (Table: Assessment_Notes) | other_details (Table: Assessment_Notes) | incident_id (Table: Behavior_Incident) | incident_type_code (Table: Behavior_Incident) | student_id (Table: Behavior_Incident) | date_incident_start (Table: Behavior_Incident) | date_incident_end (Table: Behavior_Incident) | incident_summary (Table: Behavior_Incident) | recommendations (Table: Behavior_Incident) | other_details (Table: Behavior_Incident) | detention_id (Table: Detention) | detention_type_code (Table: Detention) | teacher_id (Table: Detention) | datetime_detention_start (Table: Detention) | datetime_detention_end (Table: Detention) | detention_summary (Table: Detention) | other_details (Table: Detention) | student_id (Table: Student_Addresses) | address_id (Table: Student_Addresses) | date_address_from (Table: Student_Addresses) | date_address_to (Table: Student_Addresses) | monthly_rental (Table: Student_Addresses) | other_details (Table: Student_Addresses) | student_id (Table: Students_in_Detention) | detention_id (Table: Students_in_Detention) | incident_id (Table: Students_in_Detention)
How many airports are there per city in the United States? Order the cities by decreasing number of airports.,"SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",* (Table: airlines) | rid (Table: routes) | dst_apid (Table: routes) | dst_ap (Table: routes) | src_apid (Table: routes) | src_ap (Table: routes) | alid (Table: routes) | airline (Table: routes) | codeshare (Table: routes) | apid (Table: airports) | name (Table: airports) | city (Table: airports) | country (Table: airports) | x (Table: airports) | y (Table: airports) | elevation (Table: airports) | iata (Table: airports) | icao (Table: airports) | alid (Table: airlines) | name (Table: airlines) | iata (Table: airlines) | icao (Table: airlines) | callsign (Table: airlines) | country (Table: airlines) | active (Table: airlines)
What are the names of the all-female dorms?,SELECT dorm_name FROM dorm WHERE gender  =  'F',* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id.,"SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1",* (Table: Payments) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Policy_ID (Table: Customer_Policies) | Customer_ID (Table: Customer_Policies) | Policy_Type_Code (Table: Customer_Policies) | Start_Date (Table: Customer_Policies) | End_Date (Table: Customer_Policies) | Claim_ID (Table: Claims) | Policy_ID (Table: Claims) | Date_Claim_Made (Table: Claims) | Date_Claim_Settled (Table: Claims) | Amount_Claimed (Table: Claims) | Amount_Settled (Table: Claims) | Settlement_ID (Table: Settlements) | Claim_ID (Table: Settlements) | Date_Claim_Made (Table: Settlements) | Date_Claim_Settled (Table: Settlements) | Amount_Claimed (Table: Settlements) | Amount_Settled (Table: Settlements) | Customer_Policy_ID (Table: Settlements) | Payment_ID (Table: Payments) | Settlement_ID (Table: Payments) | Payment_Method_Code (Table: Payments) | Date_Payment_Made (Table: Payments) | Amount_Payment (Table: Payments)
Which advisor has most number of students?,SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1,* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
What are the names of mountains that have a height of over 5000 or a prominence of over 1000?,SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000,* (Table: climber) | Mountain_ID (Table: mountain) | Name (Table: mountain) | Height (Table: mountain) | Prominence (Table: mountain) | Range (Table: mountain) | Country (Table: mountain) | Climber_ID (Table: climber) | Name (Table: climber) | Country (Table: climber) | Time (Table: climber) | Points (Table: climber) | Mountain_ID (Table: climber)
How many faculty is there in total in the year of 2002?,SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002,* (Table: faculty) | Id (Table: Campuses) | Campus (Table: Campuses) | Location (Table: Campuses) | County (Table: Campuses) | Year (Table: Campuses) | Campus (Table: csu_fees) | Year (Table: csu_fees) | CampusFee (Table: csu_fees) | Year (Table: degrees) | Campus (Table: degrees) | Degrees (Table: degrees) | Campus (Table: discipline_enrollments) | Discipline (Table: discipline_enrollments) | Year (Table: discipline_enrollments) | Undergraduate (Table: discipline_enrollments) | Graduate (Table: discipline_enrollments) | Campus (Table: enrollments) | Year (Table: enrollments) | TotalEnrollment_AY (Table: enrollments) | FTE_AY (Table: enrollments) | Campus (Table: faculty) | Year (Table: faculty) | Faculty (Table: faculty)
What are the first names of all students in course ACCT-211?,SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211',* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
Find the branch names of banks in the New York state.,SELECT bname FROM bank WHERE state  =  'New York',* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
What is the name and age of every male? Order the results by age.,SELECT name FROM Person WHERE gender  =  'male' ORDER BY age,* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
Find the average hours of all projects.,SELECT avg(hours) FROM projects,* (Table: AssignedTo) | SSN (Table: Scientists) | Name (Table: Scientists) | Code (Table: Projects) | Name (Table: Projects) | Hours (Table: Projects) | Scientist (Table: AssignedTo) | Project (Table: AssignedTo)
What are the other account details for the account with the name 338?,"SELECT other_account_details FROM Accounts WHERE account_name  =  ""338""",* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
What are the names of the mills which are not located in 'Donceel'?,SELECT name FROM mill WHERE LOCATION != 'Donceel',* (Table: mill) | id (Table: architect) | name (Table: architect) | nationality (Table: architect) | gender (Table: architect) | architect_id (Table: bridge) | id (Table: bridge) | name (Table: bridge) | location (Table: bridge) | length_meters (Table: bridge) | length_feet (Table: bridge) | architect_id (Table: mill) | id (Table: mill) | location (Table: mill) | name (Table: mill) | type (Table: mill) | built_year (Table: mill) | notes (Table: mill)
What is the total revenue of each manufacturer?,"SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name",* (Table: Products) | Code (Table: Manufacturers) | Name (Table: Manufacturers) | Headquarter (Table: Manufacturers) | Founder (Table: Manufacturers) | Revenue (Table: Manufacturers) | Code (Table: Products) | Name (Table: Products) | Price (Table: Products) | Manufacturer (Table: Products)
Count the total number of apartment bookings.,SELECT count(*) FROM Apartment_Bookings,* (Table: View_Unit_Status) | building_id (Table: Apartment_Buildings) | building_short_name (Table: Apartment_Buildings) | building_full_name (Table: Apartment_Buildings) | building_description (Table: Apartment_Buildings) | building_address (Table: Apartment_Buildings) | building_manager (Table: Apartment_Buildings) | building_phone (Table: Apartment_Buildings) | apt_id (Table: Apartments) | building_id (Table: Apartments) | apt_type_code (Table: Apartments) | apt_number (Table: Apartments) | bathroom_count (Table: Apartments) | bedroom_count (Table: Apartments) | room_count (Table: Apartments) | apt_id (Table: Apartment_Facilities) | facility_code (Table: Apartment_Facilities) | guest_id (Table: Guests) | gender_code (Table: Guests) | guest_first_name (Table: Guests) | guest_last_name (Table: Guests) | date_of_birth (Table: Guests) | apt_booking_id (Table: Apartment_Bookings) | apt_id (Table: Apartment_Bookings) | guest_id (Table: Apartment_Bookings) | booking_status_code (Table: Apartment_Bookings) | booking_start_date (Table: Apartment_Bookings) | booking_end_date (Table: Apartment_Bookings) | apt_id (Table: View_Unit_Status) | apt_booking_id (Table: View_Unit_Status) | status_date (Table: View_Unit_Status) | available_yn (Table: View_Unit_Status)
Which city does has most number of customers?,SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;,* (Table: Lessons) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | staff_id (Table: Staff) | staff_address_id (Table: Staff) | nickname (Table: Staff) | first_name (Table: Staff) | middle_name (Table: Staff) | last_name (Table: Staff) | date_of_birth (Table: Staff) | date_joined_staff (Table: Staff) | date_left_staff (Table: Staff) | vehicle_id (Table: Vehicles) | vehicle_details (Table: Vehicles) | customer_id (Table: Customers) | customer_address_id (Table: Customers) | customer_status_code (Table: Customers) | date_became_customer (Table: Customers) | date_of_birth (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | amount_outstanding (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | cell_mobile_phone_number (Table: Customers) | customer_id (Table: Customer_Payments) | datetime_payment (Table: Customer_Payments) | payment_method_code (Table: Customer_Payments) | amount_payment (Table: Customer_Payments) | lesson_id (Table: Lessons) | customer_id (Table: Lessons) | lesson_status_code (Table: Lessons) | staff_id (Table: Lessons) | vehicle_id (Table: Lessons) | lesson_date (Table: Lessons) | lesson_time (Table: Lessons) | price (Table: Lessons)
Return the ids of all products that were ordered more than three times or supplied more than 80000.,SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000,* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
Who served as an advisor for students who have treasurer votes in the spring election cycle?,"SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  ""Spring""",* (Table: Voting_record) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | StuID (Table: Voting_record) | Registration_Date (Table: Voting_record) | Election_Cycle (Table: Voting_record) | President_Vote (Table: Voting_record) | Vice_President_Vote (Table: Voting_record) | Secretary_Vote (Table: Voting_record) | Treasurer_Vote (Table: Voting_record) | Class_President_Vote (Table: Voting_record) | Class_Senator_Vote (Table: Voting_record)
What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?,"SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'",* (Table: store) | actor_id (Table: actor) | first_name (Table: actor) | last_name (Table: actor) | last_update (Table: actor) | address_id (Table: address) | address (Table: address) | address2 (Table: address) | district (Table: address) | city_id (Table: address) | postal_code (Table: address) | phone (Table: address) | last_update (Table: address) | category_id (Table: category) | name (Table: category) | last_update (Table: category) | city_id (Table: city) | city (Table: city) | country_id (Table: city) | last_update (Table: city) | country_id (Table: country) | country (Table: country) | last_update (Table: country) | customer_id (Table: customer) | store_id (Table: customer) | first_name (Table: customer) | last_name (Table: customer) | email (Table: customer) | address_id (Table: customer) | active (Table: customer) | create_date (Table: customer) | last_update (Table: customer) | film_id (Table: film) | title (Table: film) | description (Table: film) | release_year (Table: film) | language_id (Table: film) | original_language_id (Table: film) | rental_duration (Table: film) | rental_rate (Table: film) | length (Table: film) | replacement_cost (Table: film) | rating (Table: film) | special_features (Table: film) | last_update (Table: film) | actor_id (Table: film_actor) | film_id (Table: film_actor) | last_update (Table: film_actor) | film_id (Table: film_category) | category_id (Table: film_category) | last_update (Table: film_category) | film_id (Table: film_text) | title (Table: film_text) | description (Table: film_text) | inventory_id (Table: inventory) | film_id (Table: inventory) | store_id (Table: inventory) | last_update (Table: inventory) | language_id (Table: language) | name (Table: language) | last_update (Table: language) | payment_id (Table: payment) | customer_id (Table: payment) | staff_id (Table: payment) | rental_id (Table: payment) | amount (Table: payment) | payment_date (Table: payment) | last_update (Table: payment) | rental_id (Table: rental) | rental_date (Table: rental) | inventory_id (Table: rental) | customer_id (Table: rental) | return_date (Table: rental) | staff_id (Table: rental) | last_update (Table: rental) | staff_id (Table: staff) | first_name (Table: staff) | last_name (Table: staff) | address_id (Table: staff) | picture (Table: staff) | email (Table: staff) | store_id (Table: staff) | active (Table: staff) | username (Table: staff) | password (Table: staff) | last_update (Table: staff) | store_id (Table: store) | manager_staff_id (Table: store) | address_id (Table: store) | last_update (Table: store)
"What are the titles of the books whose writer is not ""Elaine Lee""?","SELECT Title FROM book WHERE Writer != ""Elaine Lee""",* (Table: book) | Publication_ID (Table: publication) | Book_ID (Table: publication) | Publisher (Table: publication) | Publication_Date (Table: publication) | Price (Table: publication) | Book_ID (Table: book) | Title (Table: book) | Issues (Table: book) | Writer (Table: book)
Show ids for all employees who don't have a certificate.,SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate,* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.,SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL'),* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.,"SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'",* (Table: Order_Items) | premise_id (Table: Premises) | premises_type (Table: Premises) | premise_details (Table: Premises) | product_id (Table: Products) | product_category (Table: Products) | product_name (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | customer_address (Table: Customers) | customer_login (Table: Customers) | customer_password (Table: Customers) | mailshot_id (Table: Mailshot_Campaigns) | product_category (Table: Mailshot_Campaigns) | mailshot_name (Table: Mailshot_Campaigns) | mailshot_start_date (Table: Mailshot_Campaigns) | mailshot_end_date (Table: Mailshot_Campaigns) | customer_id (Table: Customer_Addresses) | premise_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type_code (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | shipping_method_code (Table: Customer_Orders) | order_placed_datetime (Table: Customer_Orders) | order_delivered_datetime (Table: Customer_Orders) | order_shipping_charges (Table: Customer_Orders) | mailshot_id (Table: Mailshot_Customers) | customer_id (Table: Mailshot_Customers) | outcome_code (Table: Mailshot_Customers) | mailshot_customer_date (Table: Mailshot_Customers) | item_id (Table: Order_Items) | order_item_status_code (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | item_status_code (Table: Order_Items) | item_delivered_datetime (Table: Order_Items) | item_order_quantity (Table: Order_Items)
What are the descriptions of the service types with product price above 100?,SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100,* (Table: Invoice_Items) | payment_method_code (Table: Ref_Payment_Methods) | payment_method_description (Table: Ref_Payment_Methods) | Service_Type_Code (Table: Ref_Service_Types) | Parent_Service_Type_Code (Table: Ref_Service_Types) | Service_Type_Description (Table: Ref_Service_Types) | Address_ID (Table: Addresses) | Line_1 (Table: Addresses) | Line_2 (Table: Addresses) | City_Town (Table: Addresses) | State_County (Table: Addresses) | Other_Details (Table: Addresses) | Product_ID (Table: Products) | Product_Name (Table: Products) | Product_Price (Table: Products) | Product_Description (Table: Products) | Other_Product_Service_Details (Table: Products) | Marketing_Region_Code (Table: Marketing_Regions) | Marketing_Region_Name (Table: Marketing_Regions) | Marketing_Region_Descriptrion (Table: Marketing_Regions) | Other_Details (Table: Marketing_Regions) | Client_ID (Table: Clients) | Address_ID (Table: Clients) | Customer_Email_Address (Table: Clients) | Customer_Name (Table: Clients) | Customer_Phone (Table: Clients) | Other_Details (Table: Clients) | Workshop_Group_ID (Table: Drama_Workshop_Groups) | Address_ID (Table: Drama_Workshop_Groups) | Currency_Code (Table: Drama_Workshop_Groups) | Marketing_Region_Code (Table: Drama_Workshop_Groups) | Store_Name (Table: Drama_Workshop_Groups) | Store_Phone (Table: Drama_Workshop_Groups) | Store_Email_Address (Table: Drama_Workshop_Groups) | Other_Details (Table: Drama_Workshop_Groups) | Performer_ID (Table: Performers) | Address_ID (Table: Performers) | Customer_Name (Table: Performers) | Customer_Phone (Table: Performers) | Customer_Email_Address (Table: Performers) | Other_Details (Table: Performers) | Customer_ID (Table: Customers) | Address_ID (Table: Customers) | Customer_Name (Table: Customers) | Customer_Phone (Table: Customers) | Customer_Email_Address (Table: Customers) | Other_Details (Table: Customers) | Store_ID (Table: Stores) | Address_ID (Table: Stores) | Marketing_Region_Code (Table: Stores) | Store_Name (Table: Stores) | Store_Phone (Table: Stores) | Store_Email_Address (Table: Stores) | Other_Details (Table: Stores) | Booking_ID (Table: Bookings) | Customer_ID (Table: Bookings) | Workshop_Group_ID (Table: Bookings) | Status_Code (Table: Bookings) | Store_ID (Table: Bookings) | Order_Date (Table: Bookings) | Planned_Delivery_Date (Table: Bookings) | Actual_Delivery_Date (Table: Bookings) | Other_Order_Details (Table: Bookings) | Order_ID (Table: Performers_in_Bookings) | Performer_ID (Table: Performers_in_Bookings) | Order_ID (Table: Customer_Orders) | Customer_ID (Table: Customer_Orders) | Store_ID (Table: Customer_Orders) | Order_Date (Table: Customer_Orders) | Planned_Delivery_Date (Table: Customer_Orders) | Actual_Delivery_Date (Table: Customer_Orders) | Other_Order_Details (Table: Customer_Orders) | Order_Item_ID (Table: Order_Items) | Order_ID (Table: Order_Items) | Product_ID (Table: Order_Items) | Order_Quantity (Table: Order_Items) | Other_Item_Details (Table: Order_Items) | Invoice_ID (Table: Invoices) | Order_ID (Table: Invoices) | payment_method_code (Table: Invoices) | Product_ID (Table: Invoices) | Order_Quantity (Table: Invoices) | Other_Item_Details (Table: Invoices) | Order_Item_ID (Table: Invoices) | Service_ID (Table: Services) | Service_Type_Code (Table: Services) | Workshop_Group_ID (Table: Services) | Product_Description (Table: Services) | Product_Name (Table: Services) | Product_Price (Table: Services) | Other_Product_Service_Details (Table: Services) | Order_ID (Table: Bookings_Services) | Product_ID (Table: Bookings_Services) | Invoice_Item_ID (Table: Invoice_Items) | Invoice_ID (Table: Invoice_Items) | Order_ID (Table: Invoice_Items) | Order_Item_ID (Table: Invoice_Items) | Product_ID (Table: Invoice_Items) | Order_Quantity (Table: Invoice_Items) | Other_Item_Details (Table: Invoice_Items)
What are the students ids of students who have more than one allergy?,SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2,* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
Show all video game types and the number of video games in each type.,"SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype",* (Table: SportsInfo) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | GameID (Table: Video_Games) | GName (Table: Video_Games) | GType (Table: Video_Games) | StuID (Table: Plays_Games) | GameID (Table: Plays_Games) | Hours_Played (Table: Plays_Games) | StuID (Table: SportsInfo) | SportName (Table: SportsInfo) | HoursPerWeek (Table: SportsInfo) | GamesPlayed (Table: SportsInfo) | OnScholarship (Table: SportsInfo)
Find the names of furnitures whose prices are lower than the highest price.,SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID WHERE t2.Price_in_Dollar  <  (SELECT max(Price_in_Dollar) FROM furniture_manufacte),* (Table: furniture_manufacte) | Manufacturer_ID (Table: manufacturer) | Open_Year (Table: manufacturer) | Name (Table: manufacturer) | Num_of_Factories (Table: manufacturer) | Num_of_Shops (Table: manufacturer) | Furniture_ID (Table: furniture) | Name (Table: furniture) | Num_of_Component (Table: furniture) | Market_Rate (Table: furniture) | Manufacturer_ID (Table: furniture_manufacte) | Furniture_ID (Table: furniture_manufacte) | Price_in_Dollar (Table: furniture_manufacte)
What is the party that has the largest number of representatives?,"SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",* (Table: representative) | Election_ID (Table: election) | Representative_ID (Table: election) | Date (Table: election) | Votes (Table: election) | Vote_Percent (Table: election) | Seats (Table: election) | Place (Table: election) | Representative_ID (Table: representative) | Name (Table: representative) | State (Table: representative) | Party (Table: representative) | Lifespan (Table: representative)
Find names of all students who took some course and got A or C.,"SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'",* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
Find the types of documents with more than 4 documents.,SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4,* (Table: Document_Sections_Images) | role_code (Table: Roles) | role_description (Table: Roles) | user_id (Table: Users) | role_code (Table: Users) | user_name (Table: Users) | user_login (Table: Users) | password (Table: Users) | document_structure_code (Table: Document_Structures) | parent_document_structure_code (Table: Document_Structures) | document_structure_description (Table: Document_Structures) | functional_area_code (Table: Functional_Areas) | parent_functional_area_code (Table: Functional_Areas) | functional_area_description (Table: Functional_Areas) | image_id (Table: Images) | image_alt_text (Table: Images) | image_name (Table: Images) | image_url (Table: Images) | document_code (Table: Documents) | document_structure_code (Table: Documents) | document_type_code (Table: Documents) | access_count (Table: Documents) | document_name (Table: Documents) | document_code (Table: Document_Functional_Areas) | functional_area_code (Table: Document_Functional_Areas) | section_id (Table: Document_Sections) | document_code (Table: Document_Sections) | section_sequence (Table: Document_Sections) | section_code (Table: Document_Sections) | section_title (Table: Document_Sections) | section_id (Table: Document_Sections_Images) | image_id (Table: Document_Sections_Images)
"What is the duration, file size, and song format for every pop song, ordered by title alphabetically?","SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  ""pop"" ORDER BY T2.song_name",* (Table: song) | g_name (Table: genre) | rating (Table: genre) | most_popular_in (Table: genre) | artist_name (Table: artist) | country (Table: artist) | gender (Table: artist) | preferred_genre (Table: artist) | f_id (Table: files) | artist_name (Table: files) | file_size (Table: files) | duration (Table: files) | formats (Table: files) | song_name (Table: song) | artist_name (Table: song) | country (Table: song) | f_id (Table: song) | genre_is (Table: song) | rating (Table: song) | languages (Table: song) | releasedate (Table: song) | resolution (Table: song)
List the locations of schools that do not have any player.,SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player),* (Table: player) | School_ID (Table: school) | School (Table: school) | Location (Table: school) | Enrollment (Table: school) | Founded (Table: school) | Denomination (Table: school) | Boys_or_Girls (Table: school) | Day_or_Boarding (Table: school) | Year_Entered_Competition (Table: school) | School_Colors (Table: school) | School_ID (Table: school_details) | Nickname (Table: school_details) | Colors (Table: school_details) | League (Table: school_details) | Class (Table: school_details) | Division (Table: school_details) | School_Id (Table: school_performance) | School_Year (Table: school_performance) | Class_A (Table: school_performance) | Class_AA (Table: school_performance) | Player_ID (Table: player) | Player (Table: player) | Team (Table: player) | Age (Table: player) | Position (Table: player) | School_ID (Table: player)
Which states have more than 2 parks?,SELECT state FROM park GROUP BY state HAVING count(*)  >  2;,* (Table: team_half) | player_id (Table: all_star) | year (Table: all_star) | game_num (Table: all_star) | game_id (Table: all_star) | team_id (Table: all_star) | league_id (Table: all_star) | gp (Table: all_star) | starting_pos (Table: all_star) | year (Table: appearances) | team_id (Table: appearances) | league_id (Table: appearances) | player_id (Table: appearances) | g_all (Table: appearances) | gs (Table: appearances) | g_batting (Table: appearances) | g_defense (Table: appearances) | g_p (Table: appearances) | g_c (Table: appearances) | g_1b (Table: appearances) | g_2b (Table: appearances) | g_3b (Table: appearances) | g_ss (Table: appearances) | g_lf (Table: appearances) | g_cf (Table: appearances) | g_rf (Table: appearances) | g_of (Table: appearances) | g_dh (Table: appearances) | g_ph (Table: appearances) | g_pr (Table: appearances) | player_id (Table: manager_award) | award_id (Table: manager_award) | year (Table: manager_award) | league_id (Table: manager_award) | tie (Table: manager_award) | notes (Table: manager_award) | player_id (Table: player_award) | award_id (Table: player_award) | year (Table: player_award) | league_id (Table: player_award) | tie (Table: player_award) | notes (Table: player_award) | award_id (Table: manager_award_vote) | year (Table: manager_award_vote) | league_id (Table: manager_award_vote) | player_id (Table: manager_award_vote) | points_won (Table: manager_award_vote) | points_max (Table: manager_award_vote) | votes_first (Table: manager_award_vote) | award_id (Table: player_award_vote) | year (Table: player_award_vote) | league_id (Table: player_award_vote) | player_id (Table: player_award_vote) | points_won (Table: player_award_vote) | points_max (Table: player_award_vote) | votes_first (Table: player_award_vote) | player_id (Table: batting) | year (Table: batting) | stint (Table: batting) | team_id (Table: batting) | league_id (Table: batting) | g (Table: batting) | ab (Table: batting) | r (Table: batting) | h (Table: batting) | double (Table: batting) | triple (Table: batting) | hr (Table: batting) | rbi (Table: batting) | sb (Table: batting) | cs (Table: batting) | bb (Table: batting) | so (Table: batting) | ibb (Table: batting) | hbp (Table: batting) | sh (Table: batting) | sf (Table: batting) | g_idp (Table: batting) | year (Table: batting_postseason) | round (Table: batting_postseason) | player_id (Table: batting_postseason) | team_id (Table: batting_postseason) | league_id (Table: batting_postseason) | g (Table: batting_postseason) | ab (Table: batting_postseason) | r (Table: batting_postseason) | h (Table: batting_postseason) | double (Table: batting_postseason) | triple (Table: batting_postseason) | hr (Table: batting_postseason) | rbi (Table: batting_postseason) | sb (Table: batting_postseason) | cs (Table: batting_postseason) | bb (Table: batting_postseason) | so (Table: batting_postseason) | ibb (Table: batting_postseason) | hbp (Table: batting_postseason) | sh (Table: batting_postseason) | sf (Table: batting_postseason) | g_idp (Table: batting_postseason) | player_id (Table: player_college) | college_id (Table: player_college) | year (Table: player_college) | player_id (Table: fielding) | year (Table: fielding) | stint (Table: fielding) | team_id (Table: fielding) | league_id (Table: fielding) | pos (Table: fielding) | g (Table: fielding) | gs (Table: fielding) | inn_outs (Table: fielding) | po (Table: fielding) | a (Table: fielding) | e (Table: fielding) | dp (Table: fielding) | pb (Table: fielding) | wp (Table: fielding) | sb (Table: fielding) | cs (Table: fielding) | zr (Table: fielding) | player_id (Table: fielding_outfield) | year (Table: fielding_outfield) | stint (Table: fielding_outfield) | glf (Table: fielding_outfield) | gcf (Table: fielding_outfield) | grf (Table: fielding_outfield) | player_id (Table: fielding_postseason) | year (Table: fielding_postseason) | team_id (Table: fielding_postseason) | league_id (Table: fielding_postseason) | round (Table: fielding_postseason) | pos (Table: fielding_postseason) | g (Table: fielding_postseason) | gs (Table: fielding_postseason) | inn_outs (Table: fielding_postseason) | po (Table: fielding_postseason) | a (Table: fielding_postseason) | e (Table: fielding_postseason) | dp (Table: fielding_postseason) | tp (Table: fielding_postseason) | pb (Table: fielding_postseason) | sb (Table: fielding_postseason) | cs (Table: fielding_postseason) | player_id (Table: hall_of_fame) | yearid (Table: hall_of_fame) | votedby (Table: hall_of_fame) | ballots (Table: hall_of_fame) | needed (Table: hall_of_fame) | votes (Table: hall_of_fame) | inducted (Table: hall_of_fame) | category (Table: hall_of_fame) | needed_note (Table: hall_of_fame) | year (Table: home_game) | league_id (Table: home_game) | team_id (Table: home_game) | park_id (Table: home_game) | span_first (Table: home_game) | span_last (Table: home_game) | games (Table: home_game) | openings (Table: home_game) | attendance (Table: home_game) | player_id (Table: manager) | year (Table: manager) | team_id (Table: manager) | league_id (Table: manager) | inseason (Table: manager) | g (Table: manager) | w (Table: manager) | l (Table: manager) | rank (Table: manager) | plyr_mgr (Table: manager) | player_id (Table: manager_half) | year (Table: manager_half) | team_id (Table: manager_half) | league_id (Table: manager_half) | inseason (Table: manager_half) | half (Table: manager_half) | g (Table: manager_half) | w (Table: manager_half) | l (Table: manager_half) | rank (Table: manager_half) | player_id (Table: player) | birth_year (Table: player) | birth_month (Table: player) | birth_day (Table: player) | birth_country (Table: player) | birth_state (Table: player) | birth_city (Table: player) | death_year (Table: player) | death_month (Table: player) | death_day (Table: player) | death_country (Table: player) | death_state (Table: player) | death_city (Table: player) | name_first (Table: player) | name_last (Table: player) | name_given (Table: player) | weight (Table: player) | height (Table: player) | bats (Table: player) | throws (Table: player) | debut (Table: player) | final_game (Table: player) | retro_id (Table: player) | bbref_id (Table: player) | park_id (Table: park) | park_name (Table: park) | park_alias (Table: park) | city (Table: park) | state (Table: park) | country (Table: park) | player_id (Table: pitching) | year (Table: pitching) | stint (Table: pitching) | team_id (Table: pitching) | league_id (Table: pitching) | w (Table: pitching) | l (Table: pitching) | g (Table: pitching) | gs (Table: pitching) | cg (Table: pitching) | sho (Table: pitching) | sv (Table: pitching) | ipouts (Table: pitching) | h (Table: pitching) | er (Table: pitching) | hr (Table: pitching) | bb (Table: pitching) | so (Table: pitching) | baopp (Table: pitching) | era (Table: pitching) | ibb (Table: pitching) | wp (Table: pitching) | hbp (Table: pitching) | bk (Table: pitching) | bfp (Table: pitching) | gf (Table: pitching) | r (Table: pitching) | sh (Table: pitching) | sf (Table: pitching) | g_idp (Table: pitching) | player_id (Table: pitching_postseason) | year (Table: pitching_postseason) | round (Table: pitching_postseason) | team_id (Table: pitching_postseason) | league_id (Table: pitching_postseason) | w (Table: pitching_postseason) | l (Table: pitching_postseason) | g (Table: pitching_postseason) | gs (Table: pitching_postseason) | cg (Table: pitching_postseason) | sho (Table: pitching_postseason) | sv (Table: pitching_postseason) | ipouts (Table: pitching_postseason) | h (Table: pitching_postseason) | er (Table: pitching_postseason) | hr (Table: pitching_postseason) | bb (Table: pitching_postseason) | so (Table: pitching_postseason) | baopp (Table: pitching_postseason) | era (Table: pitching_postseason) | ibb (Table: pitching_postseason) | wp (Table: pitching_postseason) | hbp (Table: pitching_postseason) | bk (Table: pitching_postseason) | bfp (Table: pitching_postseason) | gf (Table: pitching_postseason) | r (Table: pitching_postseason) | sh (Table: pitching_postseason) | sf (Table: pitching_postseason) | g_idp (Table: pitching_postseason) | year (Table: salary) | team_id (Table: salary) | league_id (Table: salary) | player_id (Table: salary) | salary (Table: salary) | college_id (Table: college) | name_full (Table: college) | city (Table: college) | state (Table: college) | country (Table: college) | year (Table: postseason) | round (Table: postseason) | team_id_winner (Table: postseason) | league_id_winner (Table: postseason) | team_id_loser (Table: postseason) | league_id_loser (Table: postseason) | wins (Table: postseason) | losses (Table: postseason) | ties (Table: postseason) | year (Table: team) | league_id (Table: team) | team_id (Table: team) | franchise_id (Table: team) | div_id (Table: team) | rank (Table: team) | g (Table: team) | ghome (Table: team) | w (Table: team) | l (Table: team) | div_win (Table: team) | wc_win (Table: team) | lg_win (Table: team) | ws_win (Table: team) | r (Table: team) | ab (Table: team) | h (Table: team) | double (Table: team) | triple (Table: team) | hr (Table: team) | bb (Table: team) | so (Table: team) | sb (Table: team) | cs (Table: team) | hbp (Table: team) | sf (Table: team) | ra (Table: team) | er (Table: team) | era (Table: team) | cg (Table: team) | sho (Table: team) | sv (Table: team) | ipouts (Table: team) | ha (Table: team) | hra (Table: team) | bba (Table: team) | soa (Table: team) | e (Table: team) | dp (Table: team) | fp (Table: team) | name (Table: team) | park (Table: team) | attendance (Table: team) | bpf (Table: team) | ppf (Table: team) | team_id_br (Table: team) | team_id_lahman45 (Table: team) | team_id_retro (Table: team) | franchise_id (Table: team_franchise) | franchise_name (Table: team_franchise) | active (Table: team_franchise) | na_assoc (Table: team_franchise) | year (Table: team_half) | league_id (Table: team_half) | team_id (Table: team_half) | half (Table: team_half) | div_id (Table: team_half) | div_win (Table: team_half) | rank (Table: team_half) | g (Table: team_half) | w (Table: team_half) | l (Table: team_half)
List the actual delivery date for all the orders with quantity 1,SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1,* (Table: Invoice_Items) | payment_method_code (Table: Ref_Payment_Methods) | payment_method_description (Table: Ref_Payment_Methods) | Service_Type_Code (Table: Ref_Service_Types) | Parent_Service_Type_Code (Table: Ref_Service_Types) | Service_Type_Description (Table: Ref_Service_Types) | Address_ID (Table: Addresses) | Line_1 (Table: Addresses) | Line_2 (Table: Addresses) | City_Town (Table: Addresses) | State_County (Table: Addresses) | Other_Details (Table: Addresses) | Product_ID (Table: Products) | Product_Name (Table: Products) | Product_Price (Table: Products) | Product_Description (Table: Products) | Other_Product_Service_Details (Table: Products) | Marketing_Region_Code (Table: Marketing_Regions) | Marketing_Region_Name (Table: Marketing_Regions) | Marketing_Region_Descriptrion (Table: Marketing_Regions) | Other_Details (Table: Marketing_Regions) | Client_ID (Table: Clients) | Address_ID (Table: Clients) | Customer_Email_Address (Table: Clients) | Customer_Name (Table: Clients) | Customer_Phone (Table: Clients) | Other_Details (Table: Clients) | Workshop_Group_ID (Table: Drama_Workshop_Groups) | Address_ID (Table: Drama_Workshop_Groups) | Currency_Code (Table: Drama_Workshop_Groups) | Marketing_Region_Code (Table: Drama_Workshop_Groups) | Store_Name (Table: Drama_Workshop_Groups) | Store_Phone (Table: Drama_Workshop_Groups) | Store_Email_Address (Table: Drama_Workshop_Groups) | Other_Details (Table: Drama_Workshop_Groups) | Performer_ID (Table: Performers) | Address_ID (Table: Performers) | Customer_Name (Table: Performers) | Customer_Phone (Table: Performers) | Customer_Email_Address (Table: Performers) | Other_Details (Table: Performers) | Customer_ID (Table: Customers) | Address_ID (Table: Customers) | Customer_Name (Table: Customers) | Customer_Phone (Table: Customers) | Customer_Email_Address (Table: Customers) | Other_Details (Table: Customers) | Store_ID (Table: Stores) | Address_ID (Table: Stores) | Marketing_Region_Code (Table: Stores) | Store_Name (Table: Stores) | Store_Phone (Table: Stores) | Store_Email_Address (Table: Stores) | Other_Details (Table: Stores) | Booking_ID (Table: Bookings) | Customer_ID (Table: Bookings) | Workshop_Group_ID (Table: Bookings) | Status_Code (Table: Bookings) | Store_ID (Table: Bookings) | Order_Date (Table: Bookings) | Planned_Delivery_Date (Table: Bookings) | Actual_Delivery_Date (Table: Bookings) | Other_Order_Details (Table: Bookings) | Order_ID (Table: Performers_in_Bookings) | Performer_ID (Table: Performers_in_Bookings) | Order_ID (Table: Customer_Orders) | Customer_ID (Table: Customer_Orders) | Store_ID (Table: Customer_Orders) | Order_Date (Table: Customer_Orders) | Planned_Delivery_Date (Table: Customer_Orders) | Actual_Delivery_Date (Table: Customer_Orders) | Other_Order_Details (Table: Customer_Orders) | Order_Item_ID (Table: Order_Items) | Order_ID (Table: Order_Items) | Product_ID (Table: Order_Items) | Order_Quantity (Table: Order_Items) | Other_Item_Details (Table: Order_Items) | Invoice_ID (Table: Invoices) | Order_ID (Table: Invoices) | payment_method_code (Table: Invoices) | Product_ID (Table: Invoices) | Order_Quantity (Table: Invoices) | Other_Item_Details (Table: Invoices) | Order_Item_ID (Table: Invoices) | Service_ID (Table: Services) | Service_Type_Code (Table: Services) | Workshop_Group_ID (Table: Services) | Product_Description (Table: Services) | Product_Name (Table: Services) | Product_Price (Table: Services) | Other_Product_Service_Details (Table: Services) | Order_ID (Table: Bookings_Services) | Product_ID (Table: Bookings_Services) | Invoice_Item_ID (Table: Invoice_Items) | Invoice_ID (Table: Invoice_Items) | Order_ID (Table: Invoice_Items) | Order_Item_ID (Table: Invoice_Items) | Product_ID (Table: Invoice_Items) | Order_Quantity (Table: Invoice_Items) | Other_Item_Details (Table: Invoice_Items)
"Show each school name, its budgeted amount, and invested amount in year 2002 or after.","SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",* (Table: endowment) | School_id (Table: School) | School_name (Table: School) | Location (Table: School) | Mascot (Table: School) | Enrollment (Table: School) | IHSAA_Class (Table: School) | IHSAA_Football_Class (Table: School) | County (Table: School) | School_id (Table: budget) | Year (Table: budget) | Budgeted (Table: budget) | total_budget_percent_budgeted (Table: budget) | Invested (Table: budget) | total_budget_percent_invested (Table: budget) | Budget_invested_percent (Table: budget) | endowment_id (Table: endowment) | School_id (Table: endowment) | donator_name (Table: endowment) | amount (Table: endowment)
Show ids for all aircrafts with more than 1000 distance.,SELECT aid FROM Aircraft WHERE distance  >  1000,* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
"What are the names of the artists who released a song that has the word love in its title, and where are the artists from?","SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE ""%love%""",* (Table: song) | g_name (Table: genre) | rating (Table: genre) | most_popular_in (Table: genre) | artist_name (Table: artist) | country (Table: artist) | gender (Table: artist) | preferred_genre (Table: artist) | f_id (Table: files) | artist_name (Table: files) | file_size (Table: files) | duration (Table: files) | formats (Table: files) | song_name (Table: song) | artist_name (Table: song) | country (Table: song) | f_id (Table: song) | genre_is (Table: song) | rating (Table: song) | languages (Table: song) | releasedate (Table: song) | resolution (Table: song)
Find the name and attribute ID of the attribute definitions with attribute value 0.,"SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",* (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Attribute_Definitions) | attribute_name (Table: Attribute_Definitions) | attribute_data_type (Table: Attribute_Definitions) | catalog_id (Table: Catalogs) | catalog_name (Table: Catalogs) | catalog_publisher (Table: Catalogs) | date_of_publication (Table: Catalogs) | date_of_latest_revision (Table: Catalogs) | catalog_level_number (Table: Catalog_Structure) | catalog_id (Table: Catalog_Structure) | catalog_level_name (Table: Catalog_Structure) | catalog_entry_id (Table: Catalog_Contents) | catalog_level_number (Table: Catalog_Contents) | parent_entry_id (Table: Catalog_Contents) | previous_entry_id (Table: Catalog_Contents) | next_entry_id (Table: Catalog_Contents) | catalog_entry_name (Table: Catalog_Contents) | product_stock_number (Table: Catalog_Contents) | price_in_dollars (Table: Catalog_Contents) | price_in_euros (Table: Catalog_Contents) | price_in_pounds (Table: Catalog_Contents) | capacity (Table: Catalog_Contents) | length (Table: Catalog_Contents) | height (Table: Catalog_Contents) | width (Table: Catalog_Contents) | catalog_entry_id (Table: Catalog_Contents_Additional_Attributes) | catalog_level_number (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Catalog_Contents_Additional_Attributes) | attribute_value (Table: Catalog_Contents_Additional_Attributes)
Find the name of captains whose rank are either Midshipman or Lieutenant.,SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant',* (Table: Ship) | Captain_ID (Table: captain) | Name (Table: captain) | Ship_ID (Table: captain) | age (Table: captain) | Class (Table: captain) | Rank (Table: captain) | Ship_ID (Table: Ship) | Name (Table: Ship) | Type (Table: Ship) | Built_Year (Table: Ship) | Class (Table: Ship) | Flag (Table: Ship)
"What are dates of birth of all the guests whose gender is ""Male""?","SELECT date_of_birth FROM Guests WHERE gender_code  =  ""Male""",* (Table: View_Unit_Status) | building_id (Table: Apartment_Buildings) | building_short_name (Table: Apartment_Buildings) | building_full_name (Table: Apartment_Buildings) | building_description (Table: Apartment_Buildings) | building_address (Table: Apartment_Buildings) | building_manager (Table: Apartment_Buildings) | building_phone (Table: Apartment_Buildings) | apt_id (Table: Apartments) | building_id (Table: Apartments) | apt_type_code (Table: Apartments) | apt_number (Table: Apartments) | bathroom_count (Table: Apartments) | bedroom_count (Table: Apartments) | room_count (Table: Apartments) | apt_id (Table: Apartment_Facilities) | facility_code (Table: Apartment_Facilities) | guest_id (Table: Guests) | gender_code (Table: Guests) | guest_first_name (Table: Guests) | guest_last_name (Table: Guests) | date_of_birth (Table: Guests) | apt_booking_id (Table: Apartment_Bookings) | apt_id (Table: Apartment_Bookings) | guest_id (Table: Apartment_Bookings) | booking_status_code (Table: Apartment_Bookings) | booking_start_date (Table: Apartment_Bookings) | booking_end_date (Table: Apartment_Bookings) | apt_id (Table: View_Unit_Status) | apt_booking_id (Table: View_Unit_Status) | status_date (Table: View_Unit_Status) | available_yn (Table: View_Unit_Status)
"Tell me the total quantity of products bought by the customer called ""Rodrick Heaney"".","SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  ""Rodrick Heaney""",* (Table: Order_Items) | address_id (Table: Addresses) | address_content (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | product_id (Table: Products) | product_details (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | date_became_customer (Table: Customers) | other_customer_details (Table: Customers) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | customer_id (Table: Customer_Contact_Channels) | channel_code (Table: Customer_Contact_Channels) | active_from_date (Table: Customer_Contact_Channels) | active_to_date (Table: Customer_Contact_Channels) | contact_number (Table: Customer_Contact_Channels) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status (Table: Customer_Orders) | order_date (Table: Customer_Orders) | order_details (Table: Customer_Orders) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | order_quantity (Table: Order_Items)
Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems.,"SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = ""Dameon"" AND T2.staff_last_name = ""Frami"" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = ""Jolie"" AND T2.staff_last_name = ""Weber""",* (Table: Problems) | problem_category_code (Table: Problem_Category_Codes) | problem_category_description (Table: Problem_Category_Codes) | problem_log_id (Table: Problem_Log) | assigned_to_staff_id (Table: Problem_Log) | problem_id (Table: Problem_Log) | problem_category_code (Table: Problem_Log) | problem_status_code (Table: Problem_Log) | log_entry_date (Table: Problem_Log) | log_entry_description (Table: Problem_Log) | log_entry_fix (Table: Problem_Log) | other_log_details (Table: Problem_Log) | problem_status_code (Table: Problem_Status_Codes) | problem_status_description (Table: Problem_Status_Codes) | product_id (Table: Product) | product_name (Table: Product) | product_details (Table: Product) | staff_id (Table: Staff) | staff_first_name (Table: Staff) | staff_last_name (Table: Staff) | other_staff_details (Table: Staff) | problem_id (Table: Problems) | product_id (Table: Problems) | closure_authorised_by_staff_id (Table: Problems) | reported_by_staff_id (Table: Problems) | date_problem_reported (Table: Problems) | date_problem_closed (Table: Problems) | problem_description (Table: Problems) | other_problem_details (Table: Problems)
Give the neames of wines with prices below 50 and with appelations in Monterey county.,"SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  ""Monterey"" AND T2.price  <  50",* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
show the lowest low temperature and highest wind speed in miles per hour.,"SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",* (Table: weekly_weather) | id (Table: train) | train_number (Table: train) | name (Table: train) | origin (Table: train) | destination (Table: train) | time (Table: train) | interval (Table: train) | id (Table: station) | network_name (Table: station) | services (Table: station) | local_authority (Table: station) | train_id (Table: route) | station_id (Table: route) | station_id (Table: weekly_weather) | day_of_week (Table: weekly_weather) | high_temperature (Table: weekly_weather) | low_temperature (Table: weekly_weather) | precipitation (Table: weekly_weather) | wind_speed_mph (Table: weekly_weather)
What is the average amount due for all the payments?,SELECT avg(amount_due) FROM payments,* (Table: View_Product_Availability) | coupon_id (Table: Discount_Coupons) | date_issued (Table: Discount_Coupons) | coupon_amount (Table: Discount_Coupons) | customer_id (Table: Customers) | coupon_id (Table: Customers) | good_or_bad_customer (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | gender_mf (Table: Customers) | date_became_customer (Table: Customers) | date_last_hire (Table: Customers) | booking_id (Table: Bookings) | customer_id (Table: Bookings) | booking_status_code (Table: Bookings) | returned_damaged_yn (Table: Bookings) | booking_start_date (Table: Bookings) | booking_end_date (Table: Bookings) | count_hired (Table: Bookings) | amount_payable (Table: Bookings) | amount_of_discount (Table: Bookings) | amount_outstanding (Table: Bookings) | amount_of_refund (Table: Bookings) | product_id (Table: Products_for_Hire) | product_type_code (Table: Products_for_Hire) | daily_hire_cost (Table: Products_for_Hire) | product_name (Table: Products_for_Hire) | product_description (Table: Products_for_Hire) | payment_id (Table: Payments) | booking_id (Table: Payments) | customer_id (Table: Payments) | payment_type_code (Table: Payments) | amount_paid_in_full_yn (Table: Payments) | payment_date (Table: Payments) | amount_due (Table: Payments) | amount_paid (Table: Payments) | booking_id (Table: Products_Booked) | product_id (Table: Products_Booked) | returned_yn (Table: Products_Booked) | returned_late_yn (Table: Products_Booked) | booked_count (Table: Products_Booked) | booked_amount (Table: Products_Booked) | product_id (Table: View_Product_Availability) | booking_id (Table: View_Product_Availability) | status_date (Table: View_Product_Availability) | available_yn (Table: View_Product_Availability)
"What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?","SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id",* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
What are the names of customers who have both savings and checking accounts?,SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking',* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
"Show the name, phone, and payment method code for all customers in descending order of customer number.","SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC",* (Table: Order_Items) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_number (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | contact_id (Table: Contacts) | customer_id (Table: Contacts) | gender (Table: Contacts) | first_name (Table: Contacts) | last_name (Table: Contacts) | contact_phone (Table: Contacts) | customer_id (Table: Customer_Address_History) | address_id (Table: Customer_Address_History) | date_from (Table: Customer_Address_History) | date_to (Table: Customer_Address_History) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_date (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | order_quantity (Table: Order_Items)
What is the first name of students who got grade C in any class?,SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C',* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
Give the ids for documents that have the budget description 'Government'.,"SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  ""Government""",* (Table: Accounts) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Budget_Type_Code (Table: Ref_Budget_Codes) | Budget_Type_Description (Table: Ref_Budget_Codes) | Project_ID (Table: Projects) | Project_Details (Table: Projects) | Document_ID (Table: Documents) | Document_Type_Code (Table: Documents) | Project_ID (Table: Documents) | Document_Date (Table: Documents) | Document_Name (Table: Documents) | Document_Description (Table: Documents) | Other_Details (Table: Documents) | Statement_ID (Table: Statements) | Statement_Details (Table: Statements) | Document_ID (Table: Documents_with_Expenses) | Budget_Type_Code (Table: Documents_with_Expenses) | Document_Details (Table: Documents_with_Expenses) | Account_ID (Table: Accounts) | Statement_ID (Table: Accounts) | Account_Details (Table: Accounts)
How many times did Boston Red Stockings lose in 2009 postseason?,SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;,* (Table: team_half) | player_id (Table: all_star) | year (Table: all_star) | game_num (Table: all_star) | game_id (Table: all_star) | team_id (Table: all_star) | league_id (Table: all_star) | gp (Table: all_star) | starting_pos (Table: all_star) | year (Table: appearances) | team_id (Table: appearances) | league_id (Table: appearances) | player_id (Table: appearances) | g_all (Table: appearances) | gs (Table: appearances) | g_batting (Table: appearances) | g_defense (Table: appearances) | g_p (Table: appearances) | g_c (Table: appearances) | g_1b (Table: appearances) | g_2b (Table: appearances) | g_3b (Table: appearances) | g_ss (Table: appearances) | g_lf (Table: appearances) | g_cf (Table: appearances) | g_rf (Table: appearances) | g_of (Table: appearances) | g_dh (Table: appearances) | g_ph (Table: appearances) | g_pr (Table: appearances) | player_id (Table: manager_award) | award_id (Table: manager_award) | year (Table: manager_award) | league_id (Table: manager_award) | tie (Table: manager_award) | notes (Table: manager_award) | player_id (Table: player_award) | award_id (Table: player_award) | year (Table: player_award) | league_id (Table: player_award) | tie (Table: player_award) | notes (Table: player_award) | award_id (Table: manager_award_vote) | year (Table: manager_award_vote) | league_id (Table: manager_award_vote) | player_id (Table: manager_award_vote) | points_won (Table: manager_award_vote) | points_max (Table: manager_award_vote) | votes_first (Table: manager_award_vote) | award_id (Table: player_award_vote) | year (Table: player_award_vote) | league_id (Table: player_award_vote) | player_id (Table: player_award_vote) | points_won (Table: player_award_vote) | points_max (Table: player_award_vote) | votes_first (Table: player_award_vote) | player_id (Table: batting) | year (Table: batting) | stint (Table: batting) | team_id (Table: batting) | league_id (Table: batting) | g (Table: batting) | ab (Table: batting) | r (Table: batting) | h (Table: batting) | double (Table: batting) | triple (Table: batting) | hr (Table: batting) | rbi (Table: batting) | sb (Table: batting) | cs (Table: batting) | bb (Table: batting) | so (Table: batting) | ibb (Table: batting) | hbp (Table: batting) | sh (Table: batting) | sf (Table: batting) | g_idp (Table: batting) | year (Table: batting_postseason) | round (Table: batting_postseason) | player_id (Table: batting_postseason) | team_id (Table: batting_postseason) | league_id (Table: batting_postseason) | g (Table: batting_postseason) | ab (Table: batting_postseason) | r (Table: batting_postseason) | h (Table: batting_postseason) | double (Table: batting_postseason) | triple (Table: batting_postseason) | hr (Table: batting_postseason) | rbi (Table: batting_postseason) | sb (Table: batting_postseason) | cs (Table: batting_postseason) | bb (Table: batting_postseason) | so (Table: batting_postseason) | ibb (Table: batting_postseason) | hbp (Table: batting_postseason) | sh (Table: batting_postseason) | sf (Table: batting_postseason) | g_idp (Table: batting_postseason) | player_id (Table: player_college) | college_id (Table: player_college) | year (Table: player_college) | player_id (Table: fielding) | year (Table: fielding) | stint (Table: fielding) | team_id (Table: fielding) | league_id (Table: fielding) | pos (Table: fielding) | g (Table: fielding) | gs (Table: fielding) | inn_outs (Table: fielding) | po (Table: fielding) | a (Table: fielding) | e (Table: fielding) | dp (Table: fielding) | pb (Table: fielding) | wp (Table: fielding) | sb (Table: fielding) | cs (Table: fielding) | zr (Table: fielding) | player_id (Table: fielding_outfield) | year (Table: fielding_outfield) | stint (Table: fielding_outfield) | glf (Table: fielding_outfield) | gcf (Table: fielding_outfield) | grf (Table: fielding_outfield) | player_id (Table: fielding_postseason) | year (Table: fielding_postseason) | team_id (Table: fielding_postseason) | league_id (Table: fielding_postseason) | round (Table: fielding_postseason) | pos (Table: fielding_postseason) | g (Table: fielding_postseason) | gs (Table: fielding_postseason) | inn_outs (Table: fielding_postseason) | po (Table: fielding_postseason) | a (Table: fielding_postseason) | e (Table: fielding_postseason) | dp (Table: fielding_postseason) | tp (Table: fielding_postseason) | pb (Table: fielding_postseason) | sb (Table: fielding_postseason) | cs (Table: fielding_postseason) | player_id (Table: hall_of_fame) | yearid (Table: hall_of_fame) | votedby (Table: hall_of_fame) | ballots (Table: hall_of_fame) | needed (Table: hall_of_fame) | votes (Table: hall_of_fame) | inducted (Table: hall_of_fame) | category (Table: hall_of_fame) | needed_note (Table: hall_of_fame) | year (Table: home_game) | league_id (Table: home_game) | team_id (Table: home_game) | park_id (Table: home_game) | span_first (Table: home_game) | span_last (Table: home_game) | games (Table: home_game) | openings (Table: home_game) | attendance (Table: home_game) | player_id (Table: manager) | year (Table: manager) | team_id (Table: manager) | league_id (Table: manager) | inseason (Table: manager) | g (Table: manager) | w (Table: manager) | l (Table: manager) | rank (Table: manager) | plyr_mgr (Table: manager) | player_id (Table: manager_half) | year (Table: manager_half) | team_id (Table: manager_half) | league_id (Table: manager_half) | inseason (Table: manager_half) | half (Table: manager_half) | g (Table: manager_half) | w (Table: manager_half) | l (Table: manager_half) | rank (Table: manager_half) | player_id (Table: player) | birth_year (Table: player) | birth_month (Table: player) | birth_day (Table: player) | birth_country (Table: player) | birth_state (Table: player) | birth_city (Table: player) | death_year (Table: player) | death_month (Table: player) | death_day (Table: player) | death_country (Table: player) | death_state (Table: player) | death_city (Table: player) | name_first (Table: player) | name_last (Table: player) | name_given (Table: player) | weight (Table: player) | height (Table: player) | bats (Table: player) | throws (Table: player) | debut (Table: player) | final_game (Table: player) | retro_id (Table: player) | bbref_id (Table: player) | park_id (Table: park) | park_name (Table: park) | park_alias (Table: park) | city (Table: park) | state (Table: park) | country (Table: park) | player_id (Table: pitching) | year (Table: pitching) | stint (Table: pitching) | team_id (Table: pitching) | league_id (Table: pitching) | w (Table: pitching) | l (Table: pitching) | g (Table: pitching) | gs (Table: pitching) | cg (Table: pitching) | sho (Table: pitching) | sv (Table: pitching) | ipouts (Table: pitching) | h (Table: pitching) | er (Table: pitching) | hr (Table: pitching) | bb (Table: pitching) | so (Table: pitching) | baopp (Table: pitching) | era (Table: pitching) | ibb (Table: pitching) | wp (Table: pitching) | hbp (Table: pitching) | bk (Table: pitching) | bfp (Table: pitching) | gf (Table: pitching) | r (Table: pitching) | sh (Table: pitching) | sf (Table: pitching) | g_idp (Table: pitching) | player_id (Table: pitching_postseason) | year (Table: pitching_postseason) | round (Table: pitching_postseason) | team_id (Table: pitching_postseason) | league_id (Table: pitching_postseason) | w (Table: pitching_postseason) | l (Table: pitching_postseason) | g (Table: pitching_postseason) | gs (Table: pitching_postseason) | cg (Table: pitching_postseason) | sho (Table: pitching_postseason) | sv (Table: pitching_postseason) | ipouts (Table: pitching_postseason) | h (Table: pitching_postseason) | er (Table: pitching_postseason) | hr (Table: pitching_postseason) | bb (Table: pitching_postseason) | so (Table: pitching_postseason) | baopp (Table: pitching_postseason) | era (Table: pitching_postseason) | ibb (Table: pitching_postseason) | wp (Table: pitching_postseason) | hbp (Table: pitching_postseason) | bk (Table: pitching_postseason) | bfp (Table: pitching_postseason) | gf (Table: pitching_postseason) | r (Table: pitching_postseason) | sh (Table: pitching_postseason) | sf (Table: pitching_postseason) | g_idp (Table: pitching_postseason) | year (Table: salary) | team_id (Table: salary) | league_id (Table: salary) | player_id (Table: salary) | salary (Table: salary) | college_id (Table: college) | name_full (Table: college) | city (Table: college) | state (Table: college) | country (Table: college) | year (Table: postseason) | round (Table: postseason) | team_id_winner (Table: postseason) | league_id_winner (Table: postseason) | team_id_loser (Table: postseason) | league_id_loser (Table: postseason) | wins (Table: postseason) | losses (Table: postseason) | ties (Table: postseason) | year (Table: team) | league_id (Table: team) | team_id (Table: team) | franchise_id (Table: team) | div_id (Table: team) | rank (Table: team) | g (Table: team) | ghome (Table: team) | w (Table: team) | l (Table: team) | div_win (Table: team) | wc_win (Table: team) | lg_win (Table: team) | ws_win (Table: team) | r (Table: team) | ab (Table: team) | h (Table: team) | double (Table: team) | triple (Table: team) | hr (Table: team) | bb (Table: team) | so (Table: team) | sb (Table: team) | cs (Table: team) | hbp (Table: team) | sf (Table: team) | ra (Table: team) | er (Table: team) | era (Table: team) | cg (Table: team) | sho (Table: team) | sv (Table: team) | ipouts (Table: team) | ha (Table: team) | hra (Table: team) | bba (Table: team) | soa (Table: team) | e (Table: team) | dp (Table: team) | fp (Table: team) | name (Table: team) | park (Table: team) | attendance (Table: team) | bpf (Table: team) | ppf (Table: team) | team_id_br (Table: team) | team_id_lahman45 (Table: team) | team_id_retro (Table: team) | franchise_id (Table: team_franchise) | franchise_name (Table: team_franchise) | active (Table: team_franchise) | na_assoc (Table: team_franchise) | year (Table: team_half) | league_id (Table: team_half) | team_id (Table: team_half) | half (Table: team_half) | div_id (Table: team_half) | div_win (Table: team_half) | rank (Table: team_half) | g (Table: team_half) | w (Table: team_half) | l (Table: team_half)
What is the sum of total pounds of purchase in year 2018 for all branches in London?,SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018,* (Table: purchase) | Member_ID (Table: member) | Card_Number (Table: member) | Name (Table: member) | Hometown (Table: member) | Level (Table: member) | Branch_ID (Table: branch) | Name (Table: branch) | Open_year (Table: branch) | Address_road (Table: branch) | City (Table: branch) | membership_amount (Table: branch) | Member_ID (Table: membership_register_branch) | Branch_ID (Table: membership_register_branch) | Register_Year (Table: membership_register_branch) | Member_ID (Table: purchase) | Branch_ID (Table: purchase) | Year (Table: purchase) | Total_pounds (Table: purchase)
How many professors who has a either Ph.D. or MA degree?,SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA',* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
What are the names of musicals who have at 3 or more actors?,SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3,* (Table: actor) | Musical_ID (Table: musical) | Name (Table: musical) | Year (Table: musical) | Award (Table: musical) | Category (Table: musical) | Nominee (Table: musical) | Result (Table: musical) | Actor_ID (Table: actor) | Name (Table: actor) | Musical_ID (Table: actor) | Character (Table: actor) | Duration (Table: actor) | age (Table: actor)
Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.,SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology'),* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
What is the name of the hardware product with the greatest price?,SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1,* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
What is the average age of students who are living in the dorm with the largest capacity?,SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm),* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
Return the address of store 1.,SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1,* (Table: store) | actor_id (Table: actor) | first_name (Table: actor) | last_name (Table: actor) | last_update (Table: actor) | address_id (Table: address) | address (Table: address) | address2 (Table: address) | district (Table: address) | city_id (Table: address) | postal_code (Table: address) | phone (Table: address) | last_update (Table: address) | category_id (Table: category) | name (Table: category) | last_update (Table: category) | city_id (Table: city) | city (Table: city) | country_id (Table: city) | last_update (Table: city) | country_id (Table: country) | country (Table: country) | last_update (Table: country) | customer_id (Table: customer) | store_id (Table: customer) | first_name (Table: customer) | last_name (Table: customer) | email (Table: customer) | address_id (Table: customer) | active (Table: customer) | create_date (Table: customer) | last_update (Table: customer) | film_id (Table: film) | title (Table: film) | description (Table: film) | release_year (Table: film) | language_id (Table: film) | original_language_id (Table: film) | rental_duration (Table: film) | rental_rate (Table: film) | length (Table: film) | replacement_cost (Table: film) | rating (Table: film) | special_features (Table: film) | last_update (Table: film) | actor_id (Table: film_actor) | film_id (Table: film_actor) | last_update (Table: film_actor) | film_id (Table: film_category) | category_id (Table: film_category) | last_update (Table: film_category) | film_id (Table: film_text) | title (Table: film_text) | description (Table: film_text) | inventory_id (Table: inventory) | film_id (Table: inventory) | store_id (Table: inventory) | last_update (Table: inventory) | language_id (Table: language) | name (Table: language) | last_update (Table: language) | payment_id (Table: payment) | customer_id (Table: payment) | staff_id (Table: payment) | rental_id (Table: payment) | amount (Table: payment) | payment_date (Table: payment) | last_update (Table: payment) | rental_id (Table: rental) | rental_date (Table: rental) | inventory_id (Table: rental) | customer_id (Table: rental) | return_date (Table: rental) | staff_id (Table: rental) | last_update (Table: rental) | staff_id (Table: staff) | first_name (Table: staff) | last_name (Table: staff) | address_id (Table: staff) | picture (Table: staff) | email (Table: staff) | store_id (Table: staff) | active (Table: staff) | username (Table: staff) | password (Table: staff) | last_update (Table: staff) | store_id (Table: store) | manager_staff_id (Table: store) | address_id (Table: store) | last_update (Table: store)
"For each distinct test result, find the number of students who got the result.","SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
Who is the youngest employee in the company? List employee's first and last name.,"SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
"Return the different statuses of cities, ascending by frequency.",SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC,* (Table: competition_record) | City_ID (Table: city) | Official_Name (Table: city) | Status (Table: city) | Area_km_2 (Table: city) | Population (Table: city) | Census_Ranking (Table: city) | Farm_ID (Table: farm) | Year (Table: farm) | Total_Horses (Table: farm) | Working_Horses (Table: farm) | Total_Cattle (Table: farm) | Oxen (Table: farm) | Bulls (Table: farm) | Cows (Table: farm) | Pigs (Table: farm) | Sheep_and_Goats (Table: farm) | Competition_ID (Table: farm_competition) | Year (Table: farm_competition) | Theme (Table: farm_competition) | Host_city_ID (Table: farm_competition) | Hosts (Table: farm_competition) | Competition_ID (Table: competition_record) | Farm_ID (Table: competition_record) | Rank (Table: competition_record)
What is the number of aircraft?,SELECT count(*) FROM aircraft,* (Table: airport_aircraft) | Pilot_Id (Table: pilot) | Name (Table: pilot) | Age (Table: pilot) | Aircraft_ID (Table: aircraft) | Aircraft (Table: aircraft) | Description (Table: aircraft) | Max_Gross_Weight (Table: aircraft) | Total_disk_area (Table: aircraft) | Max_disk_Loading (Table: aircraft) | Round (Table: match) | Location (Table: match) | Country (Table: match) | Date (Table: match) | Fastest_Qualifying (Table: match) | Winning_Pilot (Table: match) | Winning_Aircraft (Table: match) | Airport_ID (Table: airport) | Airport_Name (Table: airport) | Total_Passengers (Table: airport) | %_Change_2007 (Table: airport) | International_Passengers (Table: airport) | Domestic_Passengers (Table: airport) | Transit_Passengers (Table: airport) | Aircraft_Movements (Table: airport) | Freight_Metric_Tonnes (Table: airport) | ID (Table: airport_aircraft) | Airport_ID (Table: airport_aircraft) | Aircraft_ID (Table: airport_aircraft)
What are the three countries that the least players are from?,SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;,* (Table: team_half) | player_id (Table: all_star) | year (Table: all_star) | game_num (Table: all_star) | game_id (Table: all_star) | team_id (Table: all_star) | league_id (Table: all_star) | gp (Table: all_star) | starting_pos (Table: all_star) | year (Table: appearances) | team_id (Table: appearances) | league_id (Table: appearances) | player_id (Table: appearances) | g_all (Table: appearances) | gs (Table: appearances) | g_batting (Table: appearances) | g_defense (Table: appearances) | g_p (Table: appearances) | g_c (Table: appearances) | g_1b (Table: appearances) | g_2b (Table: appearances) | g_3b (Table: appearances) | g_ss (Table: appearances) | g_lf (Table: appearances) | g_cf (Table: appearances) | g_rf (Table: appearances) | g_of (Table: appearances) | g_dh (Table: appearances) | g_ph (Table: appearances) | g_pr (Table: appearances) | player_id (Table: manager_award) | award_id (Table: manager_award) | year (Table: manager_award) | league_id (Table: manager_award) | tie (Table: manager_award) | notes (Table: manager_award) | player_id (Table: player_award) | award_id (Table: player_award) | year (Table: player_award) | league_id (Table: player_award) | tie (Table: player_award) | notes (Table: player_award) | award_id (Table: manager_award_vote) | year (Table: manager_award_vote) | league_id (Table: manager_award_vote) | player_id (Table: manager_award_vote) | points_won (Table: manager_award_vote) | points_max (Table: manager_award_vote) | votes_first (Table: manager_award_vote) | award_id (Table: player_award_vote) | year (Table: player_award_vote) | league_id (Table: player_award_vote) | player_id (Table: player_award_vote) | points_won (Table: player_award_vote) | points_max (Table: player_award_vote) | votes_first (Table: player_award_vote) | player_id (Table: batting) | year (Table: batting) | stint (Table: batting) | team_id (Table: batting) | league_id (Table: batting) | g (Table: batting) | ab (Table: batting) | r (Table: batting) | h (Table: batting) | double (Table: batting) | triple (Table: batting) | hr (Table: batting) | rbi (Table: batting) | sb (Table: batting) | cs (Table: batting) | bb (Table: batting) | so (Table: batting) | ibb (Table: batting) | hbp (Table: batting) | sh (Table: batting) | sf (Table: batting) | g_idp (Table: batting) | year (Table: batting_postseason) | round (Table: batting_postseason) | player_id (Table: batting_postseason) | team_id (Table: batting_postseason) | league_id (Table: batting_postseason) | g (Table: batting_postseason) | ab (Table: batting_postseason) | r (Table: batting_postseason) | h (Table: batting_postseason) | double (Table: batting_postseason) | triple (Table: batting_postseason) | hr (Table: batting_postseason) | rbi (Table: batting_postseason) | sb (Table: batting_postseason) | cs (Table: batting_postseason) | bb (Table: batting_postseason) | so (Table: batting_postseason) | ibb (Table: batting_postseason) | hbp (Table: batting_postseason) | sh (Table: batting_postseason) | sf (Table: batting_postseason) | g_idp (Table: batting_postseason) | player_id (Table: player_college) | college_id (Table: player_college) | year (Table: player_college) | player_id (Table: fielding) | year (Table: fielding) | stint (Table: fielding) | team_id (Table: fielding) | league_id (Table: fielding) | pos (Table: fielding) | g (Table: fielding) | gs (Table: fielding) | inn_outs (Table: fielding) | po (Table: fielding) | a (Table: fielding) | e (Table: fielding) | dp (Table: fielding) | pb (Table: fielding) | wp (Table: fielding) | sb (Table: fielding) | cs (Table: fielding) | zr (Table: fielding) | player_id (Table: fielding_outfield) | year (Table: fielding_outfield) | stint (Table: fielding_outfield) | glf (Table: fielding_outfield) | gcf (Table: fielding_outfield) | grf (Table: fielding_outfield) | player_id (Table: fielding_postseason) | year (Table: fielding_postseason) | team_id (Table: fielding_postseason) | league_id (Table: fielding_postseason) | round (Table: fielding_postseason) | pos (Table: fielding_postseason) | g (Table: fielding_postseason) | gs (Table: fielding_postseason) | inn_outs (Table: fielding_postseason) | po (Table: fielding_postseason) | a (Table: fielding_postseason) | e (Table: fielding_postseason) | dp (Table: fielding_postseason) | tp (Table: fielding_postseason) | pb (Table: fielding_postseason) | sb (Table: fielding_postseason) | cs (Table: fielding_postseason) | player_id (Table: hall_of_fame) | yearid (Table: hall_of_fame) | votedby (Table: hall_of_fame) | ballots (Table: hall_of_fame) | needed (Table: hall_of_fame) | votes (Table: hall_of_fame) | inducted (Table: hall_of_fame) | category (Table: hall_of_fame) | needed_note (Table: hall_of_fame) | year (Table: home_game) | league_id (Table: home_game) | team_id (Table: home_game) | park_id (Table: home_game) | span_first (Table: home_game) | span_last (Table: home_game) | games (Table: home_game) | openings (Table: home_game) | attendance (Table: home_game) | player_id (Table: manager) | year (Table: manager) | team_id (Table: manager) | league_id (Table: manager) | inseason (Table: manager) | g (Table: manager) | w (Table: manager) | l (Table: manager) | rank (Table: manager) | plyr_mgr (Table: manager) | player_id (Table: manager_half) | year (Table: manager_half) | team_id (Table: manager_half) | league_id (Table: manager_half) | inseason (Table: manager_half) | half (Table: manager_half) | g (Table: manager_half) | w (Table: manager_half) | l (Table: manager_half) | rank (Table: manager_half) | player_id (Table: player) | birth_year (Table: player) | birth_month (Table: player) | birth_day (Table: player) | birth_country (Table: player) | birth_state (Table: player) | birth_city (Table: player) | death_year (Table: player) | death_month (Table: player) | death_day (Table: player) | death_country (Table: player) | death_state (Table: player) | death_city (Table: player) | name_first (Table: player) | name_last (Table: player) | name_given (Table: player) | weight (Table: player) | height (Table: player) | bats (Table: player) | throws (Table: player) | debut (Table: player) | final_game (Table: player) | retro_id (Table: player) | bbref_id (Table: player) | park_id (Table: park) | park_name (Table: park) | park_alias (Table: park) | city (Table: park) | state (Table: park) | country (Table: park) | player_id (Table: pitching) | year (Table: pitching) | stint (Table: pitching) | team_id (Table: pitching) | league_id (Table: pitching) | w (Table: pitching) | l (Table: pitching) | g (Table: pitching) | gs (Table: pitching) | cg (Table: pitching) | sho (Table: pitching) | sv (Table: pitching) | ipouts (Table: pitching) | h (Table: pitching) | er (Table: pitching) | hr (Table: pitching) | bb (Table: pitching) | so (Table: pitching) | baopp (Table: pitching) | era (Table: pitching) | ibb (Table: pitching) | wp (Table: pitching) | hbp (Table: pitching) | bk (Table: pitching) | bfp (Table: pitching) | gf (Table: pitching) | r (Table: pitching) | sh (Table: pitching) | sf (Table: pitching) | g_idp (Table: pitching) | player_id (Table: pitching_postseason) | year (Table: pitching_postseason) | round (Table: pitching_postseason) | team_id (Table: pitching_postseason) | league_id (Table: pitching_postseason) | w (Table: pitching_postseason) | l (Table: pitching_postseason) | g (Table: pitching_postseason) | gs (Table: pitching_postseason) | cg (Table: pitching_postseason) | sho (Table: pitching_postseason) | sv (Table: pitching_postseason) | ipouts (Table: pitching_postseason) | h (Table: pitching_postseason) | er (Table: pitching_postseason) | hr (Table: pitching_postseason) | bb (Table: pitching_postseason) | so (Table: pitching_postseason) | baopp (Table: pitching_postseason) | era (Table: pitching_postseason) | ibb (Table: pitching_postseason) | wp (Table: pitching_postseason) | hbp (Table: pitching_postseason) | bk (Table: pitching_postseason) | bfp (Table: pitching_postseason) | gf (Table: pitching_postseason) | r (Table: pitching_postseason) | sh (Table: pitching_postseason) | sf (Table: pitching_postseason) | g_idp (Table: pitching_postseason) | year (Table: salary) | team_id (Table: salary) | league_id (Table: salary) | player_id (Table: salary) | salary (Table: salary) | college_id (Table: college) | name_full (Table: college) | city (Table: college) | state (Table: college) | country (Table: college) | year (Table: postseason) | round (Table: postseason) | team_id_winner (Table: postseason) | league_id_winner (Table: postseason) | team_id_loser (Table: postseason) | league_id_loser (Table: postseason) | wins (Table: postseason) | losses (Table: postseason) | ties (Table: postseason) | year (Table: team) | league_id (Table: team) | team_id (Table: team) | franchise_id (Table: team) | div_id (Table: team) | rank (Table: team) | g (Table: team) | ghome (Table: team) | w (Table: team) | l (Table: team) | div_win (Table: team) | wc_win (Table: team) | lg_win (Table: team) | ws_win (Table: team) | r (Table: team) | ab (Table: team) | h (Table: team) | double (Table: team) | triple (Table: team) | hr (Table: team) | bb (Table: team) | so (Table: team) | sb (Table: team) | cs (Table: team) | hbp (Table: team) | sf (Table: team) | ra (Table: team) | er (Table: team) | era (Table: team) | cg (Table: team) | sho (Table: team) | sv (Table: team) | ipouts (Table: team) | ha (Table: team) | hra (Table: team) | bba (Table: team) | soa (Table: team) | e (Table: team) | dp (Table: team) | fp (Table: team) | name (Table: team) | park (Table: team) | attendance (Table: team) | bpf (Table: team) | ppf (Table: team) | team_id_br (Table: team) | team_id_lahman45 (Table: team) | team_id_retro (Table: team) | franchise_id (Table: team_franchise) | franchise_name (Table: team_franchise) | active (Table: team_franchise) | na_assoc (Table: team_franchise) | year (Table: team_half) | league_id (Table: team_half) | team_id (Table: team_half) | half (Table: team_half) | div_id (Table: team_half) | div_win (Table: team_half) | rank (Table: team_half) | g (Table: team_half) | w (Table: team_half) | l (Table: team_half)
How many faculty members do we have for each rank and gender?,"SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
"For each payment method, how many payments were made?","SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;",* (Table: Lessons) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | staff_id (Table: Staff) | staff_address_id (Table: Staff) | nickname (Table: Staff) | first_name (Table: Staff) | middle_name (Table: Staff) | last_name (Table: Staff) | date_of_birth (Table: Staff) | date_joined_staff (Table: Staff) | date_left_staff (Table: Staff) | vehicle_id (Table: Vehicles) | vehicle_details (Table: Vehicles) | customer_id (Table: Customers) | customer_address_id (Table: Customers) | customer_status_code (Table: Customers) | date_became_customer (Table: Customers) | date_of_birth (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | amount_outstanding (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | cell_mobile_phone_number (Table: Customers) | customer_id (Table: Customer_Payments) | datetime_payment (Table: Customer_Payments) | payment_method_code (Table: Customer_Payments) | amount_payment (Table: Customer_Payments) | lesson_id (Table: Lessons) | customer_id (Table: Lessons) | lesson_status_code (Table: Lessons) | staff_id (Table: Lessons) | vehicle_id (Table: Lessons) | lesson_date (Table: Lessons) | lesson_time (Table: Lessons) | price (Table: Lessons)
What is the name and opening year for the branch that registered the most members in 2016?,"SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",* (Table: purchase) | Member_ID (Table: member) | Card_Number (Table: member) | Name (Table: member) | Hometown (Table: member) | Level (Table: member) | Branch_ID (Table: branch) | Name (Table: branch) | Open_year (Table: branch) | Address_road (Table: branch) | City (Table: branch) | membership_amount (Table: branch) | Member_ID (Table: membership_register_branch) | Branch_ID (Table: membership_register_branch) | Register_Year (Table: membership_register_branch) | Member_ID (Table: purchase) | Branch_ID (Table: purchase) | Year (Table: purchase) | Total_pounds (Table: purchase)
What are the first names of all teachers who have taught a course and the corresponding descriptions?,"SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code",* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
How many schools are there in the department?,SELECT count(DISTINCT school_code) FROM department,* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
How many international and domestic passengers are there in the airport London Heathrow?,"SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  ""London Heathrow""",* (Table: airport_aircraft) | Pilot_Id (Table: pilot) | Name (Table: pilot) | Age (Table: pilot) | Aircraft_ID (Table: aircraft) | Aircraft (Table: aircraft) | Description (Table: aircraft) | Max_Gross_Weight (Table: aircraft) | Total_disk_area (Table: aircraft) | Max_disk_Loading (Table: aircraft) | Round (Table: match) | Location (Table: match) | Country (Table: match) | Date (Table: match) | Fastest_Qualifying (Table: match) | Winning_Pilot (Table: match) | Winning_Aircraft (Table: match) | Airport_ID (Table: airport) | Airport_Name (Table: airport) | Total_Passengers (Table: airport) | %_Change_2007 (Table: airport) | International_Passengers (Table: airport) | Domestic_Passengers (Table: airport) | Transit_Passengers (Table: airport) | Aircraft_Movements (Table: airport) | Freight_Metric_Tonnes (Table: airport) | ID (Table: airport_aircraft) | Airport_ID (Table: airport_aircraft) | Aircraft_ID (Table: airport_aircraft)
List the names of technicians who have not been assigned to repair machines.,SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment),* (Table: repair_assignment) | repair_ID (Table: repair) | name (Table: repair) | Launch_Date (Table: repair) | Notes (Table: repair) | Machine_ID (Table: machine) | Making_Year (Table: machine) | Class (Table: machine) | Team (Table: machine) | Machine_series (Table: machine) | value_points (Table: machine) | quality_rank (Table: machine) | technician_id (Table: technician) | Name (Table: technician) | Team (Table: technician) | Starting_Year (Table: technician) | Age (Table: technician) | technician_id (Table: repair_assignment) | repair_ID (Table: repair_assignment) | Machine_ID (Table: repair_assignment)
Show the name of each party and the corresponding number of delegates from that party.,"SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party",* (Table: election) | County_Id (Table: county) | County_name (Table: county) | Population (Table: county) | Zip_code (Table: county) | Party_ID (Table: party) | Year (Table: party) | Party (Table: party) | Governor (Table: party) | Lieutenant_Governor (Table: party) | Comptroller (Table: party) | Attorney_General (Table: party) | US_Senate (Table: party) | Election_ID (Table: election) | Counties_Represented (Table: election) | District (Table: election) | Delegate (Table: election) | Party (Table: election) | First_Elected (Table: election) | Committee (Table: election)
What are the names of all employees who have a certificate to fly Boeing 737-800?,"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  ""Boeing 737-800""",* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
Show the names of customers who have at least 2 mailshots with outcome code 'Order'.,SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2,* (Table: Order_Items) | premise_id (Table: Premises) | premises_type (Table: Premises) | premise_details (Table: Premises) | product_id (Table: Products) | product_category (Table: Products) | product_name (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | customer_address (Table: Customers) | customer_login (Table: Customers) | customer_password (Table: Customers) | mailshot_id (Table: Mailshot_Campaigns) | product_category (Table: Mailshot_Campaigns) | mailshot_name (Table: Mailshot_Campaigns) | mailshot_start_date (Table: Mailshot_Campaigns) | mailshot_end_date (Table: Mailshot_Campaigns) | customer_id (Table: Customer_Addresses) | premise_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type_code (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | shipping_method_code (Table: Customer_Orders) | order_placed_datetime (Table: Customer_Orders) | order_delivered_datetime (Table: Customer_Orders) | order_shipping_charges (Table: Customer_Orders) | mailshot_id (Table: Mailshot_Customers) | customer_id (Table: Mailshot_Customers) | outcome_code (Table: Mailshot_Customers) | mailshot_customer_date (Table: Mailshot_Customers) | item_id (Table: Order_Items) | order_item_status_code (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | item_status_code (Table: Order_Items) | item_delivered_datetime (Table: Order_Items) | item_order_quantity (Table: Order_Items)
Which month has the most happy hours?,SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1,* (Table: happy_hour_member) | Shop_ID (Table: shop) | Address (Table: shop) | Num_of_staff (Table: shop) | Score (Table: shop) | Open_Year (Table: shop) | Member_ID (Table: member) | Name (Table: member) | Membership_card (Table: member) | Age (Table: member) | Time_of_purchase (Table: member) | Level_of_membership (Table: member) | Address (Table: member) | HH_ID (Table: happy_hour) | Shop_ID (Table: happy_hour) | Month (Table: happy_hour) | Num_of_shaff_in_charge (Table: happy_hour) | HH_ID (Table: happy_hour_member) | Member_ID (Table: happy_hour_member) | Total_amount (Table: happy_hour_member)
What destination has the fewest number of flights?,SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1,* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
Return the investor who have invested in the greatest number of entrepreneurs.,SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1,* (Table: people) | Entrepreneur_ID (Table: entrepreneur) | People_ID (Table: entrepreneur) | Company (Table: entrepreneur) | Money_Requested (Table: entrepreneur) | Investor (Table: entrepreneur) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Date_of_Birth (Table: people)
Find names of the document without any images.,SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id,* (Table: Document_Sections_Images) | role_code (Table: Roles) | role_description (Table: Roles) | user_id (Table: Users) | role_code (Table: Users) | user_name (Table: Users) | user_login (Table: Users) | password (Table: Users) | document_structure_code (Table: Document_Structures) | parent_document_structure_code (Table: Document_Structures) | document_structure_description (Table: Document_Structures) | functional_area_code (Table: Functional_Areas) | parent_functional_area_code (Table: Functional_Areas) | functional_area_description (Table: Functional_Areas) | image_id (Table: Images) | image_alt_text (Table: Images) | image_name (Table: Images) | image_url (Table: Images) | document_code (Table: Documents) | document_structure_code (Table: Documents) | document_type_code (Table: Documents) | access_count (Table: Documents) | document_name (Table: Documents) | document_code (Table: Document_Functional_Areas) | functional_area_code (Table: Document_Functional_Areas) | section_id (Table: Document_Sections) | document_code (Table: Document_Sections) | section_sequence (Table: Document_Sections) | section_code (Table: Document_Sections) | section_title (Table: Document_Sections) | section_id (Table: Document_Sections_Images) | image_id (Table: Document_Sections_Images)
What is the salaray and name of the employee with the most certificates to fly planes more than 5000?,SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1,* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
"List all every engineer's first name, last name, details and coresponding skill description.","SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",* (Table: Skills_Required_To_Fix) | company_id (Table: Third_Party_Companies) | company_type (Table: Third_Party_Companies) | company_name (Table: Third_Party_Companies) | company_address (Table: Third_Party_Companies) | other_company_details (Table: Third_Party_Companies) | maintenance_contract_id (Table: Maintenance_Contracts) | maintenance_contract_company_id (Table: Maintenance_Contracts) | contract_start_date (Table: Maintenance_Contracts) | contract_end_date (Table: Maintenance_Contracts) | other_contract_details (Table: Maintenance_Contracts) | part_id (Table: Parts) | part_name (Table: Parts) | chargeable_yn (Table: Parts) | chargeable_amount (Table: Parts) | other_part_details (Table: Parts) | skill_id (Table: Skills) | skill_code (Table: Skills) | skill_description (Table: Skills) | staff_id (Table: Staff) | staff_name (Table: Staff) | gender (Table: Staff) | other_staff_details (Table: Staff) | asset_id (Table: Assets) | maintenance_contract_id (Table: Assets) | supplier_company_id (Table: Assets) | asset_details (Table: Assets) | asset_make (Table: Assets) | asset_model (Table: Assets) | asset_acquired_date (Table: Assets) | asset_disposed_date (Table: Assets) | other_asset_details (Table: Assets) | asset_id (Table: Asset_Parts) | part_id (Table: Asset_Parts) | engineer_id (Table: Maintenance_Engineers) | company_id (Table: Maintenance_Engineers) | first_name (Table: Maintenance_Engineers) | last_name (Table: Maintenance_Engineers) | other_details (Table: Maintenance_Engineers) | engineer_id (Table: Engineer_Skills) | skill_id (Table: Engineer_Skills) | fault_log_entry_id (Table: Fault_Log) | asset_id (Table: Fault_Log) | recorded_by_staff_id (Table: Fault_Log) | fault_log_entry_datetime (Table: Fault_Log) | fault_description (Table: Fault_Log) | other_fault_details (Table: Fault_Log) | engineer_visit_id (Table: Engineer_Visits) | contact_staff_id (Table: Engineer_Visits) | engineer_id (Table: Engineer_Visits) | fault_log_entry_id (Table: Engineer_Visits) | fault_status (Table: Engineer_Visits) | visit_start_datetime (Table: Engineer_Visits) | visit_end_datetime (Table: Engineer_Visits) | other_visit_details (Table: Engineer_Visits) | part_fault_id (Table: Part_Faults) | part_id (Table: Part_Faults) | fault_short_name (Table: Part_Faults) | fault_description (Table: Part_Faults) | other_fault_details (Table: Part_Faults) | fault_log_entry_id (Table: Fault_Log_Parts) | part_fault_id (Table: Fault_Log_Parts) | fault_status (Table: Fault_Log_Parts) | part_fault_id (Table: Skills_Required_To_Fix) | skill_id (Table: Skills_Required_To_Fix)
What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?,SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5,* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
Count the number of female Professors we have.,"SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  ""Professor""",* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
how many programs are broadcast in each time section of the day?,"SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day",* (Table: broadcast_share) | Program_ID (Table: program) | Name (Table: program) | Origin (Table: program) | Launch (Table: program) | Owner (Table: program) | Channel_ID (Table: channel) | Name (Table: channel) | Owner (Table: channel) | Share_in_percent (Table: channel) | Rating_in_percent (Table: channel) | Channel_ID (Table: broadcast) | Program_ID (Table: broadcast) | Time_of_day (Table: broadcast) | Channel_ID (Table: broadcast_share) | Program_ID (Table: broadcast_share) | Date (Table: broadcast_share) | Share_in_percent (Table: broadcast_share)
Find the name of bank branches that provided some loans.,SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id,* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
Which organizations are not a parent organization of others? List the organization id.,SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations,* (Table: Timed_Locations_of_Things) | customer_id (Table: Customers) | customer_details (Table: Customers) | property_id (Table: Properties) | property_type_code (Table: Properties) | property_address (Table: Properties) | other_details (Table: Properties) | resident_id (Table: Residents) | property_id (Table: Residents) | date_moved_in (Table: Residents) | date_moved_out (Table: Residents) | other_details (Table: Residents) | organization_id (Table: Organizations) | parent_organization_id (Table: Organizations) | organization_details (Table: Organizations) | service_id (Table: Services) | organization_id (Table: Services) | service_type_code (Table: Services) | service_details (Table: Services) | resident_id (Table: Residents_Services) | service_id (Table: Residents_Services) | date_moved_in (Table: Residents_Services) | property_id (Table: Residents_Services) | date_requested (Table: Residents_Services) | date_provided (Table: Residents_Services) | other_details (Table: Residents_Services) | thing_id (Table: Things) | organization_id (Table: Things) | Type_of_Thing_Code (Table: Things) | service_type_code (Table: Things) | service_details (Table: Things) | Customer_Event_ID (Table: Customer_Events) | customer_id (Table: Customer_Events) | date_moved_in (Table: Customer_Events) | property_id (Table: Customer_Events) | resident_id (Table: Customer_Events) | thing_id (Table: Customer_Events) | Customer_Event_Note_ID (Table: Customer_Event_Notes) | Customer_Event_ID (Table: Customer_Event_Notes) | service_type_code (Table: Customer_Event_Notes) | resident_id (Table: Customer_Event_Notes) | property_id (Table: Customer_Event_Notes) | date_moved_in (Table: Customer_Event_Notes) | thing_id (Table: Timed_Status_of_Things) | Date_and_Date (Table: Timed_Status_of_Things) | Status_of_Thing_Code (Table: Timed_Status_of_Things) | thing_id (Table: Timed_Locations_of_Things) | Date_and_Time (Table: Timed_Locations_of_Things) | Location_Code (Table: Timed_Locations_of_Things)
Count the number of total papers.,SELECT count(*) FROM papers,* (Table: Authorship) | instID (Table: Inst) | name (Table: Inst) | country (Table: Inst) | authID (Table: Authors) | lname (Table: Authors) | fname (Table: Authors) | paperID (Table: Papers) | title (Table: Papers) | authID (Table: Authorship) | instID (Table: Authorship) | paperID (Table: Authorship) | authOrder (Table: Authorship)
Find the names of customers who have bought by at least three distinct products.,SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3,* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
Count the number of stores the chain South has.,"SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  ""South""",* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
"List the names, color descriptions and product descriptions of products with category ""Herbs"".","SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  ""Herbs""",* (Table: Product_Characteristics) | characteristic_type_code (Table: Ref_Characteristic_Types) | characteristic_type_description (Table: Ref_Characteristic_Types) | color_code (Table: Ref_Colors) | color_description (Table: Ref_Colors) | product_category_code (Table: Ref_Product_Categories) | product_category_description (Table: Ref_Product_Categories) | unit_of_measure (Table: Ref_Product_Categories) | characteristic_id (Table: Characteristics) | characteristic_type_code (Table: Characteristics) | characteristic_data_type (Table: Characteristics) | characteristic_name (Table: Characteristics) | other_characteristic_details (Table: Characteristics) | product_id (Table: Products) | color_code (Table: Products) | product_category_code (Table: Products) | product_name (Table: Products) | typical_buying_price (Table: Products) | typical_selling_price (Table: Products) | product_description (Table: Products) | other_product_details (Table: Products) | product_id (Table: Product_Characteristics) | characteristic_id (Table: Product_Characteristics) | product_characteristic_value (Table: Product_Characteristics)
Find the average ram mib size of the chip models that are never used by any phone.,SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone),* (Table: phone) | Model_name (Table: chip_model) | Launch_year (Table: chip_model) | RAM_MiB (Table: chip_model) | ROM_MiB (Table: chip_model) | Slots (Table: chip_model) | WiFi (Table: chip_model) | Bluetooth (Table: chip_model) | Graphics_mode (Table: screen_mode) | Char_cells (Table: screen_mode) | Pixels (Table: screen_mode) | Hardware_colours (Table: screen_mode) | used_kb (Table: screen_mode) | map (Table: screen_mode) | Type (Table: screen_mode) | Company_name (Table: phone) | Hardware_Model_name (Table: phone) | Accreditation_type (Table: phone) | Accreditation_level (Table: phone) | Date (Table: phone) | chip_model (Table: phone) | screen_mode (Table: phone)
What is the name of all tracks in the album named Balls to the Wall?,"SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = ""Balls to the Wall"";",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
"Select the average price of each manufacturer's products, showing the manufacturer's name.","SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",* (Table: Products) | Code (Table: Manufacturers) | Name (Table: Manufacturers) | Headquarter (Table: Manufacturers) | Founder (Table: Manufacturers) | Revenue (Table: Manufacturers) | Code (Table: Products) | Name (Table: Products) | Price (Table: Products) | Manufacturer (Table: Products)
How many trips stated from  a station in Mountain View and ended at one in Palo Alto?,"SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  ""Mountain View"" AND T3.city  =  ""Palo Alto""",* (Table: weather) | id (Table: station) | name (Table: station) | lat (Table: station) | long (Table: station) | dock_count (Table: station) | city (Table: station) | installation_date (Table: station) | station_id (Table: status) | bikes_available (Table: status) | docks_available (Table: status) | time (Table: status) | id (Table: trip) | duration (Table: trip) | start_date (Table: trip) | start_station_name (Table: trip) | start_station_id (Table: trip) | end_date (Table: trip) | end_station_name (Table: trip) | end_station_id (Table: trip) | bike_id (Table: trip) | subscription_type (Table: trip) | zip_code (Table: trip) | date (Table: weather) | max_temperature_f (Table: weather) | mean_temperature_f (Table: weather) | min_temperature_f (Table: weather) | max_dew_point_f (Table: weather) | mean_dew_point_f (Table: weather) | min_dew_point_f (Table: weather) | max_humidity (Table: weather) | mean_humidity (Table: weather) | min_humidity (Table: weather) | max_sea_level_pressure_inches (Table: weather) | mean_sea_level_pressure_inches (Table: weather) | min_sea_level_pressure_inches (Table: weather) | max_visibility_miles (Table: weather) | mean_visibility_miles (Table: weather) | min_visibility_miles (Table: weather) | max_wind_Speed_mph (Table: weather) | mean_wind_speed_mph (Table: weather) | max_gust_speed_mph (Table: weather) | precipitation_inches (Table: weather) | cloud_cover (Table: weather) | events (Table: weather) | wind_dir_degrees (Table: weather) | zip_code (Table: weather)
What are the names of circuits that belong to UK or Malaysia?,"SELECT name FROM circuits WHERE country = ""UK"" OR country = ""Malaysia""",* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?,"SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  ""254 Ottilie Junction"" OR T2.How_to_Get_There  =  ""bus""",* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
What are the names of all songs that are in mp3 format and have a resolution lower than 1000?,"SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  ""mp3"" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",* (Table: song) | g_name (Table: genre) | rating (Table: genre) | most_popular_in (Table: genre) | artist_name (Table: artist) | country (Table: artist) | gender (Table: artist) | preferred_genre (Table: artist) | f_id (Table: files) | artist_name (Table: files) | file_size (Table: files) | duration (Table: files) | formats (Table: files) | song_name (Table: song) | artist_name (Table: song) | country (Table: song) | f_id (Table: song) | genre_is (Table: song) | rating (Table: song) | languages (Table: song) | releasedate (Table: song) | resolution (Table: song)
Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?,SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500,* (Table: competition_record) | City_ID (Table: city) | Official_Name (Table: city) | Status (Table: city) | Area_km_2 (Table: city) | Population (Table: city) | Census_Ranking (Table: city) | Farm_ID (Table: farm) | Year (Table: farm) | Total_Horses (Table: farm) | Working_Horses (Table: farm) | Total_Cattle (Table: farm) | Oxen (Table: farm) | Bulls (Table: farm) | Cows (Table: farm) | Pigs (Table: farm) | Sheep_and_Goats (Table: farm) | Competition_ID (Table: farm_competition) | Year (Table: farm_competition) | Theme (Table: farm_competition) | Host_city_ID (Table: farm_competition) | Hosts (Table: farm_competition) | Competition_ID (Table: competition_record) | Farm_ID (Table: competition_record) | Rank (Table: competition_record)
"Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.","SELECT College FROM match_season WHERE POSITION  =  ""Midfielder"" INTERSECT SELECT College FROM match_season WHERE POSITION  =  ""Defender""",* (Table: player) | Country_id (Table: country) | Country_name (Table: country) | Capital (Table: country) | Official_native_language (Table: country) | Team_id (Table: team) | Name (Table: team) | Season (Table: match_season) | Player (Table: match_season) | Position (Table: match_season) | Country (Table: match_season) | Team (Table: match_season) | Draft_Pick_Number (Table: match_season) | Draft_Class (Table: match_season) | College (Table: match_season) | Player_ID (Table: player) | Player (Table: player) | Years_Played (Table: player) | Total_WL (Table: player) | Singles_WL (Table: player) | Doubles_WL (Table: player) | Team (Table: player)
Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.,"SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",* (Table: CHECKING) | custid (Table: ACCOUNTS) | name (Table: ACCOUNTS) | custid (Table: SAVINGS) | balance (Table: SAVINGS) | custid (Table: CHECKING) | balance (Table: CHECKING)
"What is the first name of the author with last name ""Ueno""?","SELECT fname FROM authors WHERE lname  =  ""Ueno""",* (Table: Authorship) | instID (Table: Inst) | name (Table: Inst) | country (Table: Inst) | authID (Table: Authors) | lname (Table: Authors) | fname (Table: Authors) | paperID (Table: Papers) | title (Table: Papers) | authID (Table: Authorship) | instID (Table: Authorship) | paperID (Table: Authorship) | authOrder (Table: Authorship)
"What is the name, city, and country of the airport with the lowest altitude?","SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1",* (Table: airlines) | rid (Table: routes) | dst_apid (Table: routes) | dst_ap (Table: routes) | src_apid (Table: routes) | src_ap (Table: routes) | alid (Table: routes) | airline (Table: routes) | codeshare (Table: routes) | apid (Table: airports) | name (Table: airports) | city (Table: airports) | country (Table: airports) | x (Table: airports) | y (Table: airports) | elevation (Table: airports) | iata (Table: airports) | icao (Table: airports) | alid (Table: airlines) | name (Table: airlines) | iata (Table: airlines) | icao (Table: airlines) | callsign (Table: airlines) | country (Table: airlines) | active (Table: airlines)
How many employees are there all together?,SELECT count(*) FROM employee,* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
Which team has the oldest player?,SELECT Team FROM player ORDER BY Age DESC LIMIT 1,* (Table: player) | School_ID (Table: school) | School (Table: school) | Location (Table: school) | Enrollment (Table: school) | Founded (Table: school) | Denomination (Table: school) | Boys_or_Girls (Table: school) | Day_or_Boarding (Table: school) | Year_Entered_Competition (Table: school) | School_Colors (Table: school) | School_ID (Table: school_details) | Nickname (Table: school_details) | Colors (Table: school_details) | League (Table: school_details) | Class (Table: school_details) | Division (Table: school_details) | School_Id (Table: school_performance) | School_Year (Table: school_performance) | Class_A (Table: school_performance) | Class_AA (Table: school_performance) | Player_ID (Table: player) | Player (Table: player) | Team (Table: player) | Age (Table: player) | Position (Table: player) | School_ID (Table: player)
List the names of studios that have at least two films.,SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2,* (Table: film_market_estimation) | Film_ID (Table: film) | Title (Table: film) | Studio (Table: film) | Director (Table: film) | Gross_in_dollar (Table: film) | Market_ID (Table: market) | Country (Table: market) | Number_cities (Table: market) | Estimation_ID (Table: film_market_estimation) | Low_Estimate (Table: film_market_estimation) | High_Estimate (Table: film_market_estimation) | Film_ID (Table: film_market_estimation) | Type (Table: film_market_estimation) | Market_ID (Table: film_market_estimation) | Year (Table: film_market_estimation)
What are the details of the three most expensive hotels?,SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3,* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
Which department has the highest average instructor salary?,SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1,* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
How many regions do we have?,SELECT count(*) FROM region,* (Table: party_events) | Region_ID (Table: region) | Region_name (Table: region) | Date (Table: region) | Label (Table: region) | Format (Table: region) | Catalogue (Table: region) | Party_ID (Table: party) | Minister (Table: party) | Took_office (Table: party) | Left_office (Table: party) | Region_ID (Table: party) | Party_name (Table: party) | Member_ID (Table: member) | Member_Name (Table: member) | Party_ID (Table: member) | In_office (Table: member) | Event_ID (Table: party_events) | Event_Name (Table: party_events) | Party_ID (Table: party_events) | Member_in_charge_ID (Table: party_events)
"Which authors belong to the institution ""Google""? Show the first names and last names.","SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  ""Google""",* (Table: Authorship) | instID (Table: Inst) | name (Table: Inst) | country (Table: Inst) | authID (Table: Authors) | lname (Table: Authors) | fname (Table: Authors) | paperID (Table: Papers) | title (Table: Papers) | authID (Table: Authorship) | instID (Table: Authorship) | paperID (Table: Authorship) | authOrder (Table: Authorship)
What is the average rating stars and title for the oldest movie?,"SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)",* (Table: Rating) | mID (Table: Movie) | title (Table: Movie) | year (Table: Movie) | director (Table: Movie) | rID (Table: Reviewer) | name (Table: Reviewer) | rID (Table: Rating) | mID (Table: Rating) | stars (Table: Rating) | ratingDate (Table: Rating)
"Find the name, headquarter and founder of the manufacturer that has the highest revenue.","SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1",* (Table: Products) | Code (Table: Manufacturers) | Name (Table: Manufacturers) | Headquarter (Table: Manufacturers) | Founder (Table: Manufacturers) | Revenue (Table: Manufacturers) | Code (Table: Products) | Name (Table: Products) | Price (Table: Products) | Manufacturer (Table: Products)
What is the description of the color for most products?,SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1,* (Table: Product_Characteristics) | characteristic_type_code (Table: Ref_Characteristic_Types) | characteristic_type_description (Table: Ref_Characteristic_Types) | color_code (Table: Ref_Colors) | color_description (Table: Ref_Colors) | product_category_code (Table: Ref_Product_Categories) | product_category_description (Table: Ref_Product_Categories) | unit_of_measure (Table: Ref_Product_Categories) | characteristic_id (Table: Characteristics) | characteristic_type_code (Table: Characteristics) | characteristic_data_type (Table: Characteristics) | characteristic_name (Table: Characteristics) | other_characteristic_details (Table: Characteristics) | product_id (Table: Products) | color_code (Table: Products) | product_category_code (Table: Products) | product_name (Table: Products) | typical_buying_price (Table: Products) | typical_selling_price (Table: Products) | product_description (Table: Products) | other_product_details (Table: Products) | product_id (Table: Product_Characteristics) | characteristic_id (Table: Product_Characteristics) | product_characteristic_value (Table: Product_Characteristics)
Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.,"SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",* (Table: store) | actor_id (Table: actor) | first_name (Table: actor) | last_name (Table: actor) | last_update (Table: actor) | address_id (Table: address) | address (Table: address) | address2 (Table: address) | district (Table: address) | city_id (Table: address) | postal_code (Table: address) | phone (Table: address) | last_update (Table: address) | category_id (Table: category) | name (Table: category) | last_update (Table: category) | city_id (Table: city) | city (Table: city) | country_id (Table: city) | last_update (Table: city) | country_id (Table: country) | country (Table: country) | last_update (Table: country) | customer_id (Table: customer) | store_id (Table: customer) | first_name (Table: customer) | last_name (Table: customer) | email (Table: customer) | address_id (Table: customer) | active (Table: customer) | create_date (Table: customer) | last_update (Table: customer) | film_id (Table: film) | title (Table: film) | description (Table: film) | release_year (Table: film) | language_id (Table: film) | original_language_id (Table: film) | rental_duration (Table: film) | rental_rate (Table: film) | length (Table: film) | replacement_cost (Table: film) | rating (Table: film) | special_features (Table: film) | last_update (Table: film) | actor_id (Table: film_actor) | film_id (Table: film_actor) | last_update (Table: film_actor) | film_id (Table: film_category) | category_id (Table: film_category) | last_update (Table: film_category) | film_id (Table: film_text) | title (Table: film_text) | description (Table: film_text) | inventory_id (Table: inventory) | film_id (Table: inventory) | store_id (Table: inventory) | last_update (Table: inventory) | language_id (Table: language) | name (Table: language) | last_update (Table: language) | payment_id (Table: payment) | customer_id (Table: payment) | staff_id (Table: payment) | rental_id (Table: payment) | amount (Table: payment) | payment_date (Table: payment) | last_update (Table: payment) | rental_id (Table: rental) | rental_date (Table: rental) | inventory_id (Table: rental) | customer_id (Table: rental) | return_date (Table: rental) | staff_id (Table: rental) | last_update (Table: rental) | staff_id (Table: staff) | first_name (Table: staff) | last_name (Table: staff) | address_id (Table: staff) | picture (Table: staff) | email (Table: staff) | store_id (Table: staff) | active (Table: staff) | username (Table: staff) | password (Table: staff) | last_update (Table: staff) | store_id (Table: store) | manager_staff_id (Table: store) | address_id (Table: store) | last_update (Table: store)
How many distinct hometowns did these people have?,SELECT count(DISTINCT Hometown) FROM people,* (Table: people) | Gymnast_ID (Table: gymnast) | Floor_Exercise_Points (Table: gymnast) | Pommel_Horse_Points (Table: gymnast) | Rings_Points (Table: gymnast) | Vault_Points (Table: gymnast) | Parallel_Bars_Points (Table: gymnast) | Horizontal_Bar_Points (Table: gymnast) | Total_Points (Table: gymnast) | People_ID (Table: people) | Name (Table: people) | Age (Table: people) | Height (Table: people) | Hometown (Table: people)
"What are the names of the songs whose title has the word ""the""?",SELECT title FROM songs WHERE title LIKE '% the %',* (Table: Vocals) | SongId (Table: Songs) | Title (Table: Songs) | AId (Table: Albums) | Title (Table: Albums) | Year (Table: Albums) | Label (Table: Albums) | Type (Table: Albums) | Id (Table: Band) | Firstname (Table: Band) | Lastname (Table: Band) | SongId (Table: Instruments) | BandmateId (Table: Instruments) | Instrument (Table: Instruments) | SongId (Table: Performance) | Bandmate (Table: Performance) | StagePosition (Table: Performance) | AlbumId (Table: Tracklists) | Position (Table: Tracklists) | SongId (Table: Tracklists) | SongId (Table: Vocals) | Bandmate (Table: Vocals) | Type (Table: Vocals)
What is the most common hometown of gymnasts?,SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1,* (Table: people) | Gymnast_ID (Table: gymnast) | Floor_Exercise_Points (Table: gymnast) | Pommel_Horse_Points (Table: gymnast) | Rings_Points (Table: gymnast) | Vault_Points (Table: gymnast) | Parallel_Bars_Points (Table: gymnast) | Horizontal_Bar_Points (Table: gymnast) | Total_Points (Table: gymnast) | People_ID (Table: people) | Name (Table: people) | Age (Table: people) | Height (Table: people) | Hometown (Table: people)
Find the first names of the faculty members who participate in Canoeing and Kayaking.,SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking',* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
How many cards does customer Art Turcotte have?,"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  ""Art"" AND T2.customer_last_name  =  ""Turcotte""",* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
"list the card number of all members whose hometown address includes word ""Kentucky"".","SELECT card_number FROM member WHERE Hometown LIKE ""%Kentucky%""",* (Table: purchase) | Member_ID (Table: member) | Card_Number (Table: member) | Name (Table: member) | Hometown (Table: member) | Level (Table: member) | Branch_ID (Table: branch) | Name (Table: branch) | Open_year (Table: branch) | Address_road (Table: branch) | City (Table: branch) | membership_amount (Table: branch) | Member_ID (Table: membership_register_branch) | Branch_ID (Table: membership_register_branch) | Register_Year (Table: membership_register_branch) | Member_ID (Table: purchase) | Branch_ID (Table: purchase) | Year (Table: purchase) | Total_pounds (Table: purchase)
What is the last name of the author that has published the most papers?,"SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1",* (Table: Authorship) | instID (Table: Inst) | name (Table: Inst) | country (Table: Inst) | authID (Table: Authors) | lname (Table: Authors) | fname (Table: Authors) | paperID (Table: Papers) | title (Table: Papers) | authID (Table: Authorship) | instID (Table: Authorship) | paperID (Table: Authorship) | authOrder (Table: Authorship)
"What is the name of the tourist attraction that is associated with the photo ""game1""?","SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  ""game1""",* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
Give the names of people who did not participate in the candidate election.,SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate),* (Table: people) | Candidate_ID (Table: candidate) | People_ID (Table: candidate) | Poll_Source (Table: candidate) | Date (Table: candidate) | Support_rate (Table: candidate) | Consider_rate (Table: candidate) | Oppose_rate (Table: candidate) | Unsure_rate (Table: candidate) | People_ID (Table: people) | Sex (Table: people) | Name (Table: people) | Date_of_Birth (Table: people) | Height (Table: people) | Weight (Table: people)
Find the average rating star for each movie that are not reviewed by Brittany Harris.,"SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  ""Brittany Harris"") GROUP BY mID",* (Table: Rating) | mID (Table: Movie) | title (Table: Movie) | year (Table: Movie) | director (Table: Movie) | rID (Table: Reviewer) | name (Table: Reviewer) | rID (Table: Rating) | mID (Table: Rating) | stars (Table: Rating) | ratingDate (Table: Rating)
List the first and last name of the students who do not have any food type allergy.,"SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  ""food"")",* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
Find the name of the department that offers the largest number of credits of all classes.,SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1,* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
List the state in the US with the most invoices.,"SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  ""USA"" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
"What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name ""Meaghan""?","SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
"For each id of a driver who participated in at most 30 races, how many races did they participate in?","SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30",* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
What are the tracks that Dean Peeters bought?,"SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = ""Daan"" AND T4.last_name = ""Peeters"";",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.,"SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  ""Meaghan"" AND T2.customer_last_name  =  ""Keeling""",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
What are the different card type codes?,SELECT DISTINCT card_type_code FROM Customers_Cards,* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
What are the names of people in ascending order of weight?,SELECT Name FROM People ORDER BY Weight ASC,* (Table: people) | Entrepreneur_ID (Table: entrepreneur) | People_ID (Table: entrepreneur) | Company (Table: entrepreneur) | Money_Requested (Table: entrepreneur) | Investor (Table: entrepreneur) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Date_of_Birth (Table: people)
Find the names of stadiums which have never had any event.,SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event),* (Table: record) | ID (Table: swimmer) | name (Table: swimmer) | Nationality (Table: swimmer) | meter_100 (Table: swimmer) | meter_200 (Table: swimmer) | meter_300 (Table: swimmer) | meter_400 (Table: swimmer) | meter_500 (Table: swimmer) | meter_600 (Table: swimmer) | meter_700 (Table: swimmer) | Time (Table: swimmer) | ID (Table: stadium) | name (Table: stadium) | Capacity (Table: stadium) | City (Table: stadium) | Country (Table: stadium) | Opening_year (Table: stadium) | ID (Table: event) | Name (Table: event) | Stadium_ID (Table: event) | Year (Table: event) | ID (Table: record) | Result (Table: record) | Swimmer_ID (Table: record) | Event_ID (Table: record)
Find the name of the product that has the smallest capacity.,SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1,* (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Attribute_Definitions) | attribute_name (Table: Attribute_Definitions) | attribute_data_type (Table: Attribute_Definitions) | catalog_id (Table: Catalogs) | catalog_name (Table: Catalogs) | catalog_publisher (Table: Catalogs) | date_of_publication (Table: Catalogs) | date_of_latest_revision (Table: Catalogs) | catalog_level_number (Table: Catalog_Structure) | catalog_id (Table: Catalog_Structure) | catalog_level_name (Table: Catalog_Structure) | catalog_entry_id (Table: Catalog_Contents) | catalog_level_number (Table: Catalog_Contents) | parent_entry_id (Table: Catalog_Contents) | previous_entry_id (Table: Catalog_Contents) | next_entry_id (Table: Catalog_Contents) | catalog_entry_name (Table: Catalog_Contents) | product_stock_number (Table: Catalog_Contents) | price_in_dollars (Table: Catalog_Contents) | price_in_euros (Table: Catalog_Contents) | price_in_pounds (Table: Catalog_Contents) | capacity (Table: Catalog_Contents) | length (Table: Catalog_Contents) | height (Table: Catalog_Contents) | width (Table: Catalog_Contents) | catalog_entry_id (Table: Catalog_Contents_Additional_Attributes) | catalog_level_number (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Catalog_Contents_Additional_Attributes) | attribute_value (Table: Catalog_Contents_Additional_Attributes)
Find the name of the user who has the largest number of followers.,SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1,* (Table: user_profiles) | f1 (Table: follows) | f2 (Table: follows) | id (Table: tweets) | uid (Table: tweets) | text (Table: tweets) | createdate (Table: tweets) | uid (Table: user_profiles) | name (Table: user_profiles) | email (Table: user_profiles) | partitionid (Table: user_profiles) | followers (Table: user_profiles)
Which document has the most draft copies? List its document id and number of draft copies.,"SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",* (Table: Documents_Mailed) | document_type_code (Table: Ref_Document_Types) | document_type_description (Table: Ref_Document_Types) | role_code (Table: Roles) | role_description (Table: Roles) | address_id (Table: Addresses) | address_details (Table: Addresses) | document_status_code (Table: Ref_Document_Status) | document_status_description (Table: Ref_Document_Status) | shipping_agent_code (Table: Ref_Shipping_Agents) | shipping_agent_name (Table: Ref_Shipping_Agents) | shipping_agent_description (Table: Ref_Shipping_Agents) | document_id (Table: Documents) | document_status_code (Table: Documents) | document_type_code (Table: Documents) | shipping_agent_code (Table: Documents) | receipt_date (Table: Documents) | receipt_number (Table: Documents) | other_details (Table: Documents) | employee_id (Table: Employees) | role_code (Table: Employees) | employee_name (Table: Employees) | other_details (Table: Employees) | document_id (Table: Document_Drafts) | draft_number (Table: Document_Drafts) | draft_details (Table: Document_Drafts) | document_id (Table: Draft_Copies) | draft_number (Table: Draft_Copies) | copy_number (Table: Draft_Copies) | document_id (Table: Circulation_History) | draft_number (Table: Circulation_History) | copy_number (Table: Circulation_History) | employee_id (Table: Circulation_History) | document_id (Table: Documents_Mailed) | mailed_to_address_id (Table: Documents_Mailed) | mailing_date (Table: Documents_Mailed)
Find the distinct majors of students who have treasurer votes.,SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote,* (Table: Voting_record) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | StuID (Table: Voting_record) | Registration_Date (Table: Voting_record) | Election_Cycle (Table: Voting_record) | President_Vote (Table: Voting_record) | Vice_President_Vote (Table: Voting_record) | Secretary_Vote (Table: Voting_record) | Treasurer_Vote (Table: Voting_record) | Class_President_Vote (Table: Voting_record) | Class_Senator_Vote (Table: Voting_record)
Show the order ids and the number of items in each order.,"SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
What are the different film Directors?,SELECT DISTINCT Director FROM film,* (Table: film_market_estimation) | Film_ID (Table: film) | Title (Table: film) | Studio (Table: film) | Director (Table: film) | Gross_in_dollar (Table: film) | Market_ID (Table: market) | Country (Table: market) | Number_cities (Table: market) | Estimation_ID (Table: film_market_estimation) | Low_Estimate (Table: film_market_estimation) | High_Estimate (Table: film_market_estimation) | Film_ID (Table: film_market_estimation) | Type (Table: film_market_estimation) | Market_ID (Table: film_market_estimation) | Year (Table: film_market_estimation)
"For each nomination, show the name of the artwork and name of the festival where it is nominated.","SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID",* (Table: nomination) | Festival_ID (Table: festival_detail) | Festival_Name (Table: festival_detail) | Chair_Name (Table: festival_detail) | Location (Table: festival_detail) | Year (Table: festival_detail) | Num_of_Audience (Table: festival_detail) | Artwork_ID (Table: artwork) | Type (Table: artwork) | Name (Table: artwork) | Artwork_ID (Table: nomination) | Festival_ID (Table: nomination) | Result (Table: nomination)
Which locations are shared by more than two wrestlers?,SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2,* (Table: Elimination) | Wrestler_ID (Table: wrestler) | Name (Table: wrestler) | Reign (Table: wrestler) | Days_held (Table: wrestler) | Location (Table: wrestler) | Event (Table: wrestler) | Elimination_ID (Table: Elimination) | Wrestler_ID (Table: Elimination) | Team (Table: Elimination) | Eliminated_By (Table: Elimination) | Elimination_Move (Table: Elimination) | Time (Table: Elimination)
What are the names and addressed of customers who have both New and Pending orders?,"SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  ""New"" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  ""Pending""",* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
List the name and count of each product in all orders.,"SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",* (Table: Shipment_Items) | customer_id (Table: Customers) | customer_name (Table: Customers) | customer_details (Table: Customers) | invoice_number (Table: Invoices) | invoice_date (Table: Invoices) | invoice_details (Table: Invoices) | order_id (Table: Orders) | customer_id (Table: Orders) | order_status (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | product_id (Table: Products) | product_name (Table: Products) | product_details (Table: Products) | order_item_id (Table: Order_Items) | product_id (Table: Order_Items) | order_id (Table: Order_Items) | order_item_status (Table: Order_Items) | order_item_details (Table: Order_Items) | shipment_id (Table: Shipments) | order_id (Table: Shipments) | invoice_number (Table: Shipments) | shipment_tracking_number (Table: Shipments) | shipment_date (Table: Shipments) | other_shipment_details (Table: Shipments) | shipment_id (Table: Shipment_Items) | order_item_id (Table: Shipment_Items)
What are the phone numbers for each employee?,SELECT Phone FROM EMPLOYEE,* (Table: Track) | AlbumId (Table: Album) | Title (Table: Album) | ArtistId (Table: Album) | ArtistId (Table: Artist) | Name (Table: Artist) | CustomerId (Table: Customer) | FirstName (Table: Customer) | LastName (Table: Customer) | Company (Table: Customer) | Address (Table: Customer) | City (Table: Customer) | State (Table: Customer) | Country (Table: Customer) | PostalCode (Table: Customer) | Phone (Table: Customer) | Fax (Table: Customer) | Email (Table: Customer) | SupportRepId (Table: Customer) | EmployeeId (Table: Employee) | LastName (Table: Employee) | FirstName (Table: Employee) | Title (Table: Employee) | ReportsTo (Table: Employee) | BirthDate (Table: Employee) | HireDate (Table: Employee) | Address (Table: Employee) | City (Table: Employee) | State (Table: Employee) | Country (Table: Employee) | PostalCode (Table: Employee) | Phone (Table: Employee) | Fax (Table: Employee) | Email (Table: Employee) | GenreId (Table: Genre) | Name (Table: Genre) | InvoiceId (Table: Invoice) | CustomerId (Table: Invoice) | InvoiceDate (Table: Invoice) | BillingAddress (Table: Invoice) | BillingCity (Table: Invoice) | BillingState (Table: Invoice) | BillingCountry (Table: Invoice) | BillingPostalCode (Table: Invoice) | Total (Table: Invoice) | InvoiceLineId (Table: InvoiceLine) | InvoiceId (Table: InvoiceLine) | TrackId (Table: InvoiceLine) | UnitPrice (Table: InvoiceLine) | Quantity (Table: InvoiceLine) | MediaTypeId (Table: MediaType) | Name (Table: MediaType) | PlaylistId (Table: Playlist) | Name (Table: Playlist) | PlaylistId (Table: PlaylistTrack) | TrackId (Table: PlaylistTrack) | TrackId (Table: Track) | Name (Table: Track) | AlbumId (Table: Track) | MediaTypeId (Table: Track) | GenreId (Table: Track) | Composer (Table: Track) | Milliseconds (Table: Track) | Bytes (Table: Track) | UnitPrice (Table: Track)
Find all students taught by OTHA MOYER. Output the first and last names of the students.,"SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  ""OTHA"" AND T2.lastname  =  ""MOYER""",* (Table: teachers) | LastName (Table: list) | FirstName (Table: list) | Grade (Table: list) | Classroom (Table: list) | LastName (Table: teachers) | FirstName (Table: teachers) | Classroom (Table: teachers)
Which tourist attractions are related to royal family? Tell me their details and how we can get there.,"SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID",* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
What are the different cities listed?,SELECT DISTINCT headquarter FROM manufacturers,* (Table: Products) | Code (Table: Manufacturers) | Name (Table: Manufacturers) | Headquarter (Table: Manufacturers) | Founder (Table: Manufacturers) | Revenue (Table: Manufacturers) | Code (Table: Products) | Name (Table: Products) | Price (Table: Products) | Manufacturer (Table: Products)
How many different industries are the companies in?,SELECT count(DISTINCT Industry) FROM Companies,* (Table: Office_locations) | id (Table: buildings) | name (Table: buildings) | City (Table: buildings) | Height (Table: buildings) | Stories (Table: buildings) | Status (Table: buildings) | id (Table: Companies) | name (Table: Companies) | Headquarters (Table: Companies) | Industry (Table: Companies) | Sales_billion (Table: Companies) | Profits_billion (Table: Companies) | Assets_billion (Table: Companies) | Market_Value_billion (Table: Companies) | building_id (Table: Office_locations) | company_id (Table: Office_locations) | move_in_year (Table: Office_locations)
"What is the match id of the competition called ""1994 FIFA World Cup qualification""?","SELECT match_id FROM MATCH WHERE competition = ""1994 FIFA World Cup qualification""",* (Table: hosting_city) | City_ID (Table: city) | City (Table: city) | Hanzi (Table: city) | Hanyu_Pinyin (Table: city) | Regional_Population (Table: city) | GDP (Table: city) | Match_ID (Table: match) | Date (Table: match) | Venue (Table: match) | Score (Table: match) | Result (Table: match) | Competition (Table: match) | City_ID (Table: temperature) | Jan (Table: temperature) | Feb (Table: temperature) | Mar (Table: temperature) | Apr (Table: temperature) | Jun (Table: temperature) | Jul (Table: temperature) | Aug (Table: temperature) | Sep (Table: temperature) | Oct (Table: temperature) | Nov (Table: temperature) | Dec (Table: temperature) | Year (Table: hosting_city) | Match_ID (Table: hosting_city) | Host_City (Table: hosting_city)
How many teachers does the student named CHRISSY NABOZNY have?,"SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  ""CHRISSY"" AND T1.lastname  =  ""NABOZNY""",* (Table: teachers) | LastName (Table: list) | FirstName (Table: list) | Grade (Table: list) | Classroom (Table: list) | LastName (Table: teachers) | FirstName (Table: teachers) | Classroom (Table: teachers)
What is average and maximum salary of all employees.,"SELECT avg(salary) ,  max(salary) FROM Employee",* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
Show the headquarters that have at least two companies.,SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2,* (Table: employment) | People_ID (Table: people) | Age (Table: people) | Name (Table: people) | Nationality (Table: people) | Graduation_College (Table: people) | Company_ID (Table: company) | Name (Table: company) | Headquarters (Table: company) | Industry (Table: company) | Sales_in_Billion (Table: company) | Profits_in_Billion (Table: company) | Assets_in_Billion (Table: company) | Market_Value_in_Billion (Table: company) | Company_ID (Table: employment) | People_ID (Table: employment) | Year_working (Table: employment)
"How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n","SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id",* (Table: Electoral_Register) | master_customer_id (Table: Customer_Master_Index) | cmi_details (Table: Customer_Master_Index) | cmi_cross_ref_id (Table: CMI_Cross_References) | master_customer_id (Table: CMI_Cross_References) | source_system_code (Table: CMI_Cross_References) | council_tax_id (Table: Council_Tax) | cmi_cross_ref_id (Table: Council_Tax) | business_rates_id (Table: Business_Rates) | cmi_cross_ref_id (Table: Business_Rates) | council_tax_id (Table: Benefits_Overpayments) | cmi_cross_ref_id (Table: Benefits_Overpayments) | council_tax_id (Table: Parking_Fines) | cmi_cross_ref_id (Table: Parking_Fines) | council_tax_id (Table: Rent_Arrears) | cmi_cross_ref_id (Table: Rent_Arrears) | electoral_register_id (Table: Electoral_Register) | cmi_cross_ref_id (Table: Electoral_Register)
What is the average number of customers across banks in the state of Utah?,SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah',* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
Show the party that has the most people.,SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1,* (Table: debate_people) | People_ID (Table: people) | District (Table: people) | Name (Table: people) | Party (Table: people) | Age (Table: people) | Debate_ID (Table: debate) | Date (Table: debate) | Venue (Table: debate) | Num_of_Audience (Table: debate) | Debate_ID (Table: debate_people) | Affirmative (Table: debate_people) | Negative (Table: debate_people) | If_Affirmative_Win (Table: debate_people)
What is the average and maximum damage in millions for storms that had a max speed over 1000?,"SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",* (Table: affected_region) | Storm_ID (Table: storm) | Name (Table: storm) | Dates_active (Table: storm) | Max_speed (Table: storm) | Damage_millions_USD (Table: storm) | Number_Deaths (Table: storm) | Region_id (Table: region) | Region_code (Table: region) | Region_name (Table: region) | Region_id (Table: affected_region) | Storm_ID (Table: affected_region) | Number_city_affected (Table: affected_region)
What is the software platform that is most common amongst all devices?,SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1,* (Table: stock) | Device_ID (Table: device) | Device (Table: device) | Carrier (Table: device) | Package_Version (Table: device) | Applications (Table: device) | Software_Platform (Table: device) | Shop_ID (Table: shop) | Shop_Name (Table: shop) | Location (Table: shop) | Open_Date (Table: shop) | Open_Year (Table: shop) | Shop_ID (Table: stock) | Device_ID (Table: stock) | Quantity (Table: stock)
"For each product with some problems, list the count of problems and the product id.","SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",* (Table: Problems) | problem_category_code (Table: Problem_Category_Codes) | problem_category_description (Table: Problem_Category_Codes) | problem_log_id (Table: Problem_Log) | assigned_to_staff_id (Table: Problem_Log) | problem_id (Table: Problem_Log) | problem_category_code (Table: Problem_Log) | problem_status_code (Table: Problem_Log) | log_entry_date (Table: Problem_Log) | log_entry_description (Table: Problem_Log) | log_entry_fix (Table: Problem_Log) | other_log_details (Table: Problem_Log) | problem_status_code (Table: Problem_Status_Codes) | problem_status_description (Table: Problem_Status_Codes) | product_id (Table: Product) | product_name (Table: Product) | product_details (Table: Product) | staff_id (Table: Staff) | staff_first_name (Table: Staff) | staff_last_name (Table: Staff) | other_staff_details (Table: Staff) | problem_id (Table: Problems) | product_id (Table: Problems) | closure_authorised_by_staff_id (Table: Problems) | reported_by_staff_id (Table: Problems) | date_problem_reported (Table: Problems) | date_problem_closed (Table: Problems) | problem_description (Table: Problems) | other_problem_details (Table: Problems)
What are the names of all colleges with a larger enrollment than the largest college in Florida?,SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL'),* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
find the names of people who are taller than 200 or lower than 190.,SELECT name FROM people WHERE height  >  200 OR height  <  190,* (Table: people) | Candidate_ID (Table: candidate) | People_ID (Table: candidate) | Poll_Source (Table: candidate) | Date (Table: candidate) | Support_rate (Table: candidate) | Consider_rate (Table: candidate) | Oppose_rate (Table: candidate) | Unsure_rate (Table: candidate) | People_ID (Table: people) | Sex (Table: people) | Name (Table: people) | Date_of_Birth (Table: people) | Height (Table: people) | Weight (Table: people)
How many documents are there of each type?,"SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code",* (Table: Accounts) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Budget_Type_Code (Table: Ref_Budget_Codes) | Budget_Type_Description (Table: Ref_Budget_Codes) | Project_ID (Table: Projects) | Project_Details (Table: Projects) | Document_ID (Table: Documents) | Document_Type_Code (Table: Documents) | Project_ID (Table: Documents) | Document_Date (Table: Documents) | Document_Name (Table: Documents) | Document_Description (Table: Documents) | Other_Details (Table: Documents) | Statement_ID (Table: Statements) | Statement_Details (Table: Statements) | Document_ID (Table: Documents_with_Expenses) | Budget_Type_Code (Table: Documents_with_Expenses) | Document_Details (Table: Documents_with_Expenses) | Account_ID (Table: Accounts) | Statement_ID (Table: Accounts) | Account_Details (Table: Accounts)
"What are the names, ages, and countries of artists, sorted by the year they joined?","SELECT name ,  age ,  country FROM artist ORDER BY Year_Join",* (Table: exhibition_record) | Artist_ID (Table: artist) | Name (Table: artist) | Country (Table: artist) | Year_Join (Table: artist) | Age (Table: artist) | Exhibition_ID (Table: exhibition) | Year (Table: exhibition) | Theme (Table: exhibition) | Artist_ID (Table: exhibition) | Ticket_Price (Table: exhibition) | Exhibition_ID (Table: exhibition_record) | Date (Table: exhibition_record) | Attendance (Table: exhibition_record)
"Show the average share count of transactions each each investor, ordered by average share count.","SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)",* (Table: Transactions_Lots) | investor_id (Table: Investors) | Investor_details (Table: Investors) | lot_id (Table: Lots) | investor_id (Table: Lots) | lot_details (Table: Lots) | transaction_type_code (Table: Ref_Transaction_Types) | transaction_type_description (Table: Ref_Transaction_Types) | transaction_id (Table: Transactions) | investor_id (Table: Transactions) | transaction_type_code (Table: Transactions) | date_of_transaction (Table: Transactions) | amount_of_transaction (Table: Transactions) | share_count (Table: Transactions) | other_details (Table: Transactions) | sales_transaction_id (Table: Sales) | sales_details (Table: Sales) | purchase_transaction_id (Table: Purchases) | purchase_details (Table: Purchases) | transaction_id (Table: Transactions_Lots) | lot_id (Table: Transactions_Lots)
Find the city with the most number of stores.,SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1,* (Table: store_district) | product_id (Table: product) | product (Table: product) | dimensions (Table: product) | dpi (Table: product) | pages_per_minute_color (Table: product) | max_page_size (Table: product) | interface (Table: product) | Store_ID (Table: store) | Store_Name (Table: store) | Type (Table: store) | Area_size (Table: store) | Number_of_product_category (Table: store) | Ranking (Table: store) | District_ID (Table: district) | District_name (Table: district) | Headquartered_City (Table: district) | City_Population (Table: district) | City_Area (Table: district) | Store_ID (Table: store_product) | Product_ID (Table: store_product) | Store_ID (Table: store_district) | District_ID (Table: store_district)
What are the titles of courses that are offered in more than one department?,SELECT title FROM course GROUP BY title HAVING count(*)  >  1,* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Find the name and college of students whose decisions are yes in the tryout.,"SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
What is the total and maximum duration for all trips with the bike id 636?,"SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636",* (Table: weather) | id (Table: station) | name (Table: station) | lat (Table: station) | long (Table: station) | dock_count (Table: station) | city (Table: station) | installation_date (Table: station) | station_id (Table: status) | bikes_available (Table: status) | docks_available (Table: status) | time (Table: status) | id (Table: trip) | duration (Table: trip) | start_date (Table: trip) | start_station_name (Table: trip) | start_station_id (Table: trip) | end_date (Table: trip) | end_station_name (Table: trip) | end_station_id (Table: trip) | bike_id (Table: trip) | subscription_type (Table: trip) | zip_code (Table: trip) | date (Table: weather) | max_temperature_f (Table: weather) | mean_temperature_f (Table: weather) | min_temperature_f (Table: weather) | max_dew_point_f (Table: weather) | mean_dew_point_f (Table: weather) | min_dew_point_f (Table: weather) | max_humidity (Table: weather) | mean_humidity (Table: weather) | min_humidity (Table: weather) | max_sea_level_pressure_inches (Table: weather) | mean_sea_level_pressure_inches (Table: weather) | min_sea_level_pressure_inches (Table: weather) | max_visibility_miles (Table: weather) | mean_visibility_miles (Table: weather) | min_visibility_miles (Table: weather) | max_wind_Speed_mph (Table: weather) | mean_wind_speed_mph (Table: weather) | max_gust_speed_mph (Table: weather) | precipitation_inches (Table: weather) | cloud_cover (Table: weather) | events (Table: weather) | wind_dir_degrees (Table: weather) | zip_code (Table: weather)
Who is the advisor of student with ID 1004?,SELECT Advisor FROM Student WHERE StuID  =  1004,* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
How many customers use each payment method?,"SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code",* (Table: Staff_Department_Assignments) | address_id (Table: Addresses) | address_details (Table: Addresses) | staff_id (Table: Staff) | staff_gender (Table: Staff) | staff_name (Table: Staff) | supplier_id (Table: Suppliers) | supplier_name (Table: Suppliers) | supplier_phone (Table: Suppliers) | dept_store_chain_id (Table: Department_Store_Chain) | dept_store_chain_name (Table: Department_Store_Chain) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_code (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | supplier_id (Table: Supplier_Addresses) | address_id (Table: Supplier_Addresses) | date_from (Table: Supplier_Addresses) | date_to (Table: Supplier_Addresses) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_date (Table: Customer_Orders) | dept_store_id (Table: Department_Stores) | dept_store_chain_id (Table: Department_Stores) | store_name (Table: Department_Stores) | store_address (Table: Department_Stores) | store_phone (Table: Department_Stores) | store_email (Table: Department_Stores) | department_id (Table: Departments) | dept_store_id (Table: Departments) | department_name (Table: Departments) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_id (Table: Product_Suppliers) | supplier_id (Table: Product_Suppliers) | date_supplied_from (Table: Product_Suppliers) | date_supplied_to (Table: Product_Suppliers) | total_amount_purchased (Table: Product_Suppliers) | total_value_purchased (Table: Product_Suppliers) | staff_id (Table: Staff_Department_Assignments) | department_id (Table: Staff_Department_Assignments) | date_assigned_from (Table: Staff_Department_Assignments) | job_title_code (Table: Staff_Department_Assignments) | date_assigned_to (Table: Staff_Department_Assignments)
Show the locations that have at least two performances.,SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2,* (Table: member_attendance) | Member_ID (Table: member) | Name (Table: member) | Nationality (Table: member) | Role (Table: member) | Performance_ID (Table: performance) | Date (Table: performance) | Host (Table: performance) | Location (Table: performance) | Attendance (Table: performance) | Member_ID (Table: member_attendance) | Performance_ID (Table: member_attendance) | Num_of_Pieces (Table: member_attendance)
What is the checking balance of the account whose owner’s name contains the substring ‘ee’?,SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%',* (Table: CHECKING) | custid (Table: ACCOUNTS) | name (Table: ACCOUNTS) | custid (Table: SAVINGS) | balance (Table: SAVINGS) | custid (Table: CHECKING) | balance (Table: CHECKING)
What are the names of instructors who earn more than at least one instructor from the Biology department?,SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology'),* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
List all the image name and URLs in the order of their names.,"SELECT image_name ,  image_url FROM images ORDER BY image_name",* (Table: Document_Sections_Images) | role_code (Table: Roles) | role_description (Table: Roles) | user_id (Table: Users) | role_code (Table: Users) | user_name (Table: Users) | user_login (Table: Users) | password (Table: Users) | document_structure_code (Table: Document_Structures) | parent_document_structure_code (Table: Document_Structures) | document_structure_description (Table: Document_Structures) | functional_area_code (Table: Functional_Areas) | parent_functional_area_code (Table: Functional_Areas) | functional_area_description (Table: Functional_Areas) | image_id (Table: Images) | image_alt_text (Table: Images) | image_name (Table: Images) | image_url (Table: Images) | document_code (Table: Documents) | document_structure_code (Table: Documents) | document_type_code (Table: Documents) | access_count (Table: Documents) | document_name (Table: Documents) | document_code (Table: Document_Functional_Areas) | functional_area_code (Table: Document_Functional_Areas) | section_id (Table: Document_Sections) | document_code (Table: Document_Sections) | section_sequence (Table: Document_Sections) | section_code (Table: Document_Sections) | section_title (Table: Document_Sections) | section_id (Table: Document_Sections_Images) | image_id (Table: Document_Sections_Images)
What is the maximum OMIM value in the database?,SELECT max(OMIM) FROM enzyme,* (Table: medicine_enzyme_interaction) | id (Table: medicine) | name (Table: medicine) | Trade_Name (Table: medicine) | FDA_approved (Table: medicine) | id (Table: enzyme) | name (Table: enzyme) | Location (Table: enzyme) | Product (Table: enzyme) | Chromosome (Table: enzyme) | OMIM (Table: enzyme) | Porphyria (Table: enzyme) | enzyme_id (Table: medicine_enzyme_interaction) | medicine_id (Table: medicine_enzyme_interaction) | interaction_type (Table: medicine_enzyme_interaction)
Return the types of film market estimations in 1995.,SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995,* (Table: film_market_estimation) | Film_ID (Table: film) | Title (Table: film) | Studio (Table: film) | Director (Table: film) | Gross_in_dollar (Table: film) | Market_ID (Table: market) | Country (Table: market) | Number_cities (Table: market) | Estimation_ID (Table: film_market_estimation) | Low_Estimate (Table: film_market_estimation) | High_Estimate (Table: film_market_estimation) | Film_ID (Table: film_market_estimation) | Type (Table: film_market_estimation) | Market_ID (Table: film_market_estimation) | Year (Table: film_market_estimation)
Find the names of stadiums that the most swimmers have been to.,SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1,* (Table: record) | ID (Table: swimmer) | name (Table: swimmer) | Nationality (Table: swimmer) | meter_100 (Table: swimmer) | meter_200 (Table: swimmer) | meter_300 (Table: swimmer) | meter_400 (Table: swimmer) | meter_500 (Table: swimmer) | meter_600 (Table: swimmer) | meter_700 (Table: swimmer) | Time (Table: swimmer) | ID (Table: stadium) | name (Table: stadium) | Capacity (Table: stadium) | City (Table: stadium) | Country (Table: stadium) | Opening_year (Table: stadium) | ID (Table: event) | Name (Table: event) | Stadium_ID (Table: event) | Year (Table: event) | ID (Table: record) | Result (Table: record) | Swimmer_ID (Table: record) | Event_ID (Table: record)
How many allergies are there?,SELECT count(DISTINCT allergy) FROM Allergy_type,* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
"How many customers have email that contains ""gmail.com""?","SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE ""%gmail.com%""",* (Table: Track) | AlbumId (Table: Album) | Title (Table: Album) | ArtistId (Table: Album) | ArtistId (Table: Artist) | Name (Table: Artist) | CustomerId (Table: Customer) | FirstName (Table: Customer) | LastName (Table: Customer) | Company (Table: Customer) | Address (Table: Customer) | City (Table: Customer) | State (Table: Customer) | Country (Table: Customer) | PostalCode (Table: Customer) | Phone (Table: Customer) | Fax (Table: Customer) | Email (Table: Customer) | SupportRepId (Table: Customer) | EmployeeId (Table: Employee) | LastName (Table: Employee) | FirstName (Table: Employee) | Title (Table: Employee) | ReportsTo (Table: Employee) | BirthDate (Table: Employee) | HireDate (Table: Employee) | Address (Table: Employee) | City (Table: Employee) | State (Table: Employee) | Country (Table: Employee) | PostalCode (Table: Employee) | Phone (Table: Employee) | Fax (Table: Employee) | Email (Table: Employee) | GenreId (Table: Genre) | Name (Table: Genre) | InvoiceId (Table: Invoice) | CustomerId (Table: Invoice) | InvoiceDate (Table: Invoice) | BillingAddress (Table: Invoice) | BillingCity (Table: Invoice) | BillingState (Table: Invoice) | BillingCountry (Table: Invoice) | BillingPostalCode (Table: Invoice) | Total (Table: Invoice) | InvoiceLineId (Table: InvoiceLine) | InvoiceId (Table: InvoiceLine) | TrackId (Table: InvoiceLine) | UnitPrice (Table: InvoiceLine) | Quantity (Table: InvoiceLine) | MediaTypeId (Table: MediaType) | Name (Table: MediaType) | PlaylistId (Table: Playlist) | Name (Table: Playlist) | PlaylistId (Table: PlaylistTrack) | TrackId (Table: PlaylistTrack) | TrackId (Table: Track) | Name (Table: Track) | AlbumId (Table: Track) | MediaTypeId (Table: Track) | GenreId (Table: Track) | Composer (Table: Track) | Milliseconds (Table: Track) | Bytes (Table: Track) | UnitPrice (Table: Track)
"What are the names, dates active, and number of deaths for storms that had 1 or more death?","SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1",* (Table: affected_region) | Storm_ID (Table: storm) | Name (Table: storm) | Dates_active (Table: storm) | Max_speed (Table: storm) | Damage_millions_USD (Table: storm) | Number_Deaths (Table: storm) | Region_id (Table: region) | Region_code (Table: region) | Region_name (Table: region) | Region_id (Table: affected_region) | Storm_ID (Table: affected_region) | Number_city_affected (Table: affected_region)
Show all locations with only 1 station.,SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1,* (Table: train_station) | Station_ID (Table: station) | Name (Table: station) | Annual_entry_exit (Table: station) | Annual_interchanges (Table: station) | Total_Passengers (Table: station) | Location (Table: station) | Main_Services (Table: station) | Number_of_Platforms (Table: station) | Train_ID (Table: train) | Name (Table: train) | Time (Table: train) | Service (Table: train) | Train_ID (Table: train_station) | Station_ID (Table: train_station)
"List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.","SELECT customer_name ,  customer_phone ,  customer_email FROM Customers ORDER BY date_became_customer",* (Table: Order_Deliveries) | product_id (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | product_description (Table: Products) | address_id (Table: Addresses) | address_details (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | date_became_customer (Table: Customers) | regular_order_id (Table: Regular_Orders) | distributer_id (Table: Regular_Orders) | regular_order_id (Table: Regular_Order_Products) | product_id (Table: Regular_Order_Products) | actual_order_id (Table: Actual_Orders) | order_status_code (Table: Actual_Orders) | regular_order_id (Table: Actual_Orders) | actual_order_date (Table: Actual_Orders) | actual_order_id (Table: Actual_Order_Products) | product_id (Table: Actual_Order_Products) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_from (Table: Customer_Addresses) | address_type (Table: Customer_Addresses) | date_to (Table: Customer_Addresses) | route_id (Table: Delivery_Routes) | route_name (Table: Delivery_Routes) | other_route_details (Table: Delivery_Routes) | location_code (Table: Delivery_Route_Locations) | route_id (Table: Delivery_Route_Locations) | location_address_id (Table: Delivery_Route_Locations) | location_name (Table: Delivery_Route_Locations) | truck_id (Table: Trucks) | truck_licence_number (Table: Trucks) | truck_details (Table: Trucks) | employee_id (Table: Employees) | employee_address_id (Table: Employees) | employee_name (Table: Employees) | employee_phone (Table: Employees) | location_code (Table: Order_Deliveries) | actual_order_id (Table: Order_Deliveries) | delivery_status_code (Table: Order_Deliveries) | driver_employee_id (Table: Order_Deliveries) | truck_id (Table: Order_Deliveries) | delivery_date (Table: Order_Deliveries)
what are the event details of the services that have the type code 'Marriage'?,SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage',* (Table: Participants_in_Events) | Service_ID (Table: Services) | Service_Type_Code (Table: Services) | Participant_ID (Table: Participants) | Participant_Type_Code (Table: Participants) | Participant_Details (Table: Participants) | Event_ID (Table: Events) | Service_ID (Table: Events) | Event_Details (Table: Events) | Event_ID (Table: Participants_in_Events) | Participant_ID (Table: Participants_in_Events)
What is the minimum snatch score?,SELECT min(snatch) FROM body_builder,* (Table: people) | Body_Builder_ID (Table: body_builder) | People_ID (Table: body_builder) | Snatch (Table: body_builder) | Clean_Jerk (Table: body_builder) | Total (Table: body_builder) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Birth_Date (Table: people) | Birth_Place (Table: people)
Show the names of customers who have both an order in completed status and an order in part status.,SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Part',* (Table: Order_Items) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | product_id (Table: Products) | product_type_code (Table: Products) | product_name (Table: Products) | product_price (Table: Products) | customer_id (Table: Customers) | payment_method_code (Table: Customers) | customer_number (Table: Customers) | customer_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | contact_id (Table: Contacts) | customer_id (Table: Contacts) | gender (Table: Contacts) | first_name (Table: Contacts) | last_name (Table: Contacts) | contact_phone (Table: Contacts) | customer_id (Table: Customer_Address_History) | address_id (Table: Customer_Address_History) | date_from (Table: Customer_Address_History) | date_to (Table: Customer_Address_History) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_date (Table: Customer_Orders) | order_status_code (Table: Customer_Orders) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | order_quantity (Table: Order_Items)
"What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name.","SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name",* (Table: AssignedTo) | SSN (Table: Scientists) | Name (Table: Scientists) | Code (Table: Projects) | Name (Table: Projects) | Hours (Table: Projects) | Scientist (Table: AssignedTo) | Project (Table: AssignedTo)
"List all the characteristic names and data types of product ""cumin"".","SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  ""cumin""",* (Table: Product_Characteristics) | characteristic_type_code (Table: Ref_Characteristic_Types) | characteristic_type_description (Table: Ref_Characteristic_Types) | color_code (Table: Ref_Colors) | color_description (Table: Ref_Colors) | product_category_code (Table: Ref_Product_Categories) | product_category_description (Table: Ref_Product_Categories) | unit_of_measure (Table: Ref_Product_Categories) | characteristic_id (Table: Characteristics) | characteristic_type_code (Table: Characteristics) | characteristic_data_type (Table: Characteristics) | characteristic_name (Table: Characteristics) | other_characteristic_details (Table: Characteristics) | product_id (Table: Products) | color_code (Table: Products) | product_category_code (Table: Products) | product_name (Table: Products) | typical_buying_price (Table: Products) | typical_selling_price (Table: Products) | product_description (Table: Products) | other_product_details (Table: Products) | product_id (Table: Product_Characteristics) | characteristic_id (Table: Product_Characteristics) | product_characteristic_value (Table: Product_Characteristics)
What is the total time for all lessons taught by Janessa Sawayn?,"SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = ""Janessa"" AND T2.last_name = ""Sawayn"";",* (Table: Lessons) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | staff_id (Table: Staff) | staff_address_id (Table: Staff) | nickname (Table: Staff) | first_name (Table: Staff) | middle_name (Table: Staff) | last_name (Table: Staff) | date_of_birth (Table: Staff) | date_joined_staff (Table: Staff) | date_left_staff (Table: Staff) | vehicle_id (Table: Vehicles) | vehicle_details (Table: Vehicles) | customer_id (Table: Customers) | customer_address_id (Table: Customers) | customer_status_code (Table: Customers) | date_became_customer (Table: Customers) | date_of_birth (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | amount_outstanding (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | cell_mobile_phone_number (Table: Customers) | customer_id (Table: Customer_Payments) | datetime_payment (Table: Customer_Payments) | payment_method_code (Table: Customer_Payments) | amount_payment (Table: Customer_Payments) | lesson_id (Table: Lessons) | customer_id (Table: Lessons) | lesson_status_code (Table: Lessons) | staff_id (Table: Lessons) | vehicle_id (Table: Lessons) | lesson_date (Table: Lessons) | lesson_time (Table: Lessons) | price (Table: Lessons)
"What are the famous titles of the artist ""Triumfall""?","SELECT Famous_Title FROM artist WHERE Artist  =  ""Triumfall""",* (Table: music_festival) | Artist_ID (Table: artist) | Artist (Table: artist) | Age (Table: artist) | Famous_Title (Table: artist) | Famous_Release_date (Table: artist) | Volume_ID (Table: volume) | Volume_Issue (Table: volume) | Issue_Date (Table: volume) | Weeks_on_Top (Table: volume) | Song (Table: volume) | Artist_ID (Table: volume) | ID (Table: music_festival) | Music_Festival (Table: music_festival) | Date_of_ceremony (Table: music_festival) | Category (Table: music_festival) | Volume (Table: music_festival) | Result (Table: music_festival)
Show different type codes of products and the number of products with each type code.,"SELECT Product_Type_Code ,  COUNT(*) FROM Products GROUP BY Product_Type_Code",* (Table: Assets_in_Events) | Address_ID (Table: Addresses) | address_details (Table: Addresses) | Location_ID (Table: Locations) | Other_Details (Table: Locations) | Product_ID (Table: Products) | Product_Type_Code (Table: Products) | Product_Name (Table: Products) | Product_Price (Table: Products) | Party_ID (Table: Parties) | Party_Details (Table: Parties) | Asset_ID (Table: Assets) | Other_Details (Table: Assets) | Channel_ID (Table: Channels) | Other_Details (Table: Channels) | Finance_ID (Table: Finances) | Other_Details (Table: Finances) | Event_ID (Table: Events) | Address_ID (Table: Events) | Channel_ID (Table: Events) | Event_Type_Code (Table: Events) | Finance_ID (Table: Events) | Location_ID (Table: Events) | Product_in_Event_ID (Table: Products_in_Events) | Event_ID (Table: Products_in_Events) | Product_ID (Table: Products_in_Events) | Party_ID (Table: Parties_in_Events) | Event_ID (Table: Parties_in_Events) | Role_Code (Table: Parties_in_Events) | Document_ID (Table: Agreements) | Event_ID (Table: Agreements) | Asset_ID (Table: Assets_in_Events) | Event_ID (Table: Assets_in_Events)
"How many songs have used the instrument ""drums""?","SELECT count(*) FROM instruments WHERE instrument  =  ""drums""",* (Table: Vocals) | SongId (Table: Songs) | Title (Table: Songs) | AId (Table: Albums) | Title (Table: Albums) | Year (Table: Albums) | Label (Table: Albums) | Type (Table: Albums) | Id (Table: Band) | Firstname (Table: Band) | Lastname (Table: Band) | SongId (Table: Instruments) | BandmateId (Table: Instruments) | Instrument (Table: Instruments) | SongId (Table: Performance) | Bandmate (Table: Performance) | StagePosition (Table: Performance) | AlbumId (Table: Tracklists) | Position (Table: Tracklists) | SongId (Table: Tracklists) | SongId (Table: Vocals) | Bandmate (Table: Vocals) | Type (Table: Vocals)
Find the number of tweets in record.,SELECT count(*) FROM tweets,* (Table: user_profiles) | f1 (Table: follows) | f2 (Table: follows) | id (Table: tweets) | uid (Table: tweets) | text (Table: tweets) | createdate (Table: tweets) | uid (Table: user_profiles) | name (Table: user_profiles) | email (Table: user_profiles) | partitionid (Table: user_profiles) | followers (Table: user_profiles)
"Which customer's name contains ""Alex""? Find the full name.","SELECT customer_name FROM customers WHERE customer_name LIKE ""%Alex%""",* (Table: Order_Items) | address_id (Table: Addresses) | address_content (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | product_id (Table: Products) | product_details (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | date_became_customer (Table: Customers) | other_customer_details (Table: Customers) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | customer_id (Table: Customer_Contact_Channels) | channel_code (Table: Customer_Contact_Channels) | active_from_date (Table: Customer_Contact_Channels) | active_to_date (Table: Customer_Contact_Channels) | contact_number (Table: Customer_Contact_Channels) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status (Table: Customer_Orders) | order_date (Table: Customer_Orders) | order_details (Table: Customer_Orders) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | order_quantity (Table: Order_Items)
How many books are there for each publisher?,"SELECT publisher ,  count(*) FROM book_club GROUP BY publisher",* (Table: culture_company) | book_club_id (Table: book_club) | Year (Table: book_club) | Author_or_Editor (Table: book_club) | Book_Title (Table: book_club) | Publisher (Table: book_club) | Category (Table: book_club) | Result (Table: book_club) | movie_id (Table: movie) | Title (Table: movie) | Year (Table: movie) | Director (Table: movie) | Budget_million (Table: movie) | Gross_worldwide (Table: movie) | Company_name (Table: culture_company) | Type (Table: culture_company) | Incorporated_in (Table: culture_company) | Group_Equity_Shareholding (Table: culture_company) | book_club_id (Table: culture_company) | movie_id (Table: culture_company)
What are the names of all females who are friends with Zach?,SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female',* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
Return the title of the film with the highest high estimate?,SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1,* (Table: film_market_estimation) | Film_ID (Table: film) | Title (Table: film) | Studio (Table: film) | Director (Table: film) | Gross_in_dollar (Table: film) | Market_ID (Table: market) | Country (Table: market) | Number_cities (Table: market) | Estimation_ID (Table: film_market_estimation) | Low_Estimate (Table: film_market_estimation) | High_Estimate (Table: film_market_estimation) | Film_ID (Table: film_market_estimation) | Type (Table: film_market_estimation) | Market_ID (Table: film_market_estimation) | Year (Table: film_market_estimation)
What are the ids of all students and number of hours played?,"SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid",* (Table: SportsInfo) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | GameID (Table: Video_Games) | GName (Table: Video_Games) | GType (Table: Video_Games) | StuID (Table: Plays_Games) | GameID (Table: Plays_Games) | Hours_Played (Table: Plays_Games) | StuID (Table: SportsInfo) | SportName (Table: SportsInfo) | HoursPerWeek (Table: SportsInfo) | GamesPlayed (Table: SportsInfo) | OnScholarship (Table: SportsInfo)
What are the distinct ages of students who have secretary votes in the fall election cycle?,"SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  ""Fall""",* (Table: Voting_record) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | StuID (Table: Voting_record) | Registration_Date (Table: Voting_record) | Election_Cycle (Table: Voting_record) | President_Vote (Table: Voting_record) | Vice_President_Vote (Table: Voting_record) | Secretary_Vote (Table: Voting_record) | Treasurer_Vote (Table: Voting_record) | Class_President_Vote (Table: Voting_record) | Class_Senator_Vote (Table: Voting_record)
Which language does the film AIRPORT POLLOCK use? List the language name.,SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK',* (Table: store) | actor_id (Table: actor) | first_name (Table: actor) | last_name (Table: actor) | last_update (Table: actor) | address_id (Table: address) | address (Table: address) | address2 (Table: address) | district (Table: address) | city_id (Table: address) | postal_code (Table: address) | phone (Table: address) | last_update (Table: address) | category_id (Table: category) | name (Table: category) | last_update (Table: category) | city_id (Table: city) | city (Table: city) | country_id (Table: city) | last_update (Table: city) | country_id (Table: country) | country (Table: country) | last_update (Table: country) | customer_id (Table: customer) | store_id (Table: customer) | first_name (Table: customer) | last_name (Table: customer) | email (Table: customer) | address_id (Table: customer) | active (Table: customer) | create_date (Table: customer) | last_update (Table: customer) | film_id (Table: film) | title (Table: film) | description (Table: film) | release_year (Table: film) | language_id (Table: film) | original_language_id (Table: film) | rental_duration (Table: film) | rental_rate (Table: film) | length (Table: film) | replacement_cost (Table: film) | rating (Table: film) | special_features (Table: film) | last_update (Table: film) | actor_id (Table: film_actor) | film_id (Table: film_actor) | last_update (Table: film_actor) | film_id (Table: film_category) | category_id (Table: film_category) | last_update (Table: film_category) | film_id (Table: film_text) | title (Table: film_text) | description (Table: film_text) | inventory_id (Table: inventory) | film_id (Table: inventory) | store_id (Table: inventory) | last_update (Table: inventory) | language_id (Table: language) | name (Table: language) | last_update (Table: language) | payment_id (Table: payment) | customer_id (Table: payment) | staff_id (Table: payment) | rental_id (Table: payment) | amount (Table: payment) | payment_date (Table: payment) | last_update (Table: payment) | rental_id (Table: rental) | rental_date (Table: rental) | inventory_id (Table: rental) | customer_id (Table: rental) | return_date (Table: rental) | staff_id (Table: rental) | last_update (Table: rental) | staff_id (Table: staff) | first_name (Table: staff) | last_name (Table: staff) | address_id (Table: staff) | picture (Table: staff) | email (Table: staff) | store_id (Table: staff) | active (Table: staff) | username (Table: staff) | password (Table: staff) | last_update (Table: staff) | store_id (Table: store) | manager_staff_id (Table: store) | address_id (Table: store) | last_update (Table: store)
What are the names of all colleges that have two or more players?,SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2,* (Table: player) | Country_id (Table: country) | Country_name (Table: country) | Capital (Table: country) | Official_native_language (Table: country) | Team_id (Table: team) | Name (Table: team) | Season (Table: match_season) | Player (Table: match_season) | Position (Table: match_season) | Country (Table: match_season) | Team (Table: match_season) | Draft_Pick_Number (Table: match_season) | Draft_Class (Table: match_season) | College (Table: match_season) | Player_ID (Table: player) | Player (Table: player) | Years_Played (Table: player) | Total_WL (Table: player) | Singles_WL (Table: player) | Doubles_WL (Table: player) | Team (Table: player)
Show the names of roller coasters and names of country they are in.,"SELECT T2.Name ,  T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID",* (Table: country) | Roller_Coaster_ID (Table: roller_coaster) | Name (Table: roller_coaster) | Park (Table: roller_coaster) | Country_ID (Table: roller_coaster) | Length (Table: roller_coaster) | Height (Table: roller_coaster) | Speed (Table: roller_coaster) | Opened (Table: roller_coaster) | Status (Table: roller_coaster) | Country_ID (Table: country) | Name (Table: country) | Population (Table: country) | Area (Table: country) | Languages (Table: country)
Which course is enrolled in by the most students? Give me the course name.,SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1,* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
"What is the ""active to date"" of the latest contact channel used by ""Tillman Ernser""?","SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  ""Tillman Ernser""",* (Table: Order_Items) | address_id (Table: Addresses) | address_content (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | other_address_details (Table: Addresses) | product_id (Table: Products) | product_details (Table: Products) | customer_id (Table: Customers) | payment_method (Table: Customers) | customer_name (Table: Customers) | date_became_customer (Table: Customers) | other_customer_details (Table: Customers) | customer_id (Table: Customer_Addresses) | address_id (Table: Customer_Addresses) | date_address_from (Table: Customer_Addresses) | address_type (Table: Customer_Addresses) | date_address_to (Table: Customer_Addresses) | customer_id (Table: Customer_Contact_Channels) | channel_code (Table: Customer_Contact_Channels) | active_from_date (Table: Customer_Contact_Channels) | active_to_date (Table: Customer_Contact_Channels) | contact_number (Table: Customer_Contact_Channels) | order_id (Table: Customer_Orders) | customer_id (Table: Customer_Orders) | order_status (Table: Customer_Orders) | order_date (Table: Customer_Orders) | order_details (Table: Customer_Orders) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | order_quantity (Table: Order_Items)
How many customers live in Prague city?,"SELECT count(*) FROM customers WHERE city = ""Prague"";",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
What are the ids of the students who registered for some courses but had the least number of courses for all students?,SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1,* (Table: Candidate_Assessments) | address_id (Table: Addresses) | line_1 (Table: Addresses) | line_2 (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | person_id (Table: People) | first_name (Table: People) | middle_name (Table: People) | last_name (Table: People) | cell_mobile_number (Table: People) | email_address (Table: People) | login_name (Table: People) | password (Table: People) | student_id (Table: Students) | student_details (Table: Students) | course_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | other_details (Table: Courses) | person_address_id (Table: People_Addresses) | person_id (Table: People_Addresses) | address_id (Table: People_Addresses) | date_from (Table: People_Addresses) | date_to (Table: People_Addresses) | student_id (Table: Student_Course_Registrations) | course_id (Table: Student_Course_Registrations) | registration_date (Table: Student_Course_Registrations) | student_id (Table: Student_Course_Attendance) | course_id (Table: Student_Course_Attendance) | date_of_attendance (Table: Student_Course_Attendance) | candidate_id (Table: Candidates) | candidate_details (Table: Candidates) | candidate_id (Table: Candidate_Assessments) | qualification (Table: Candidate_Assessments) | assessment_date (Table: Candidate_Assessments) | asessment_outcome_code (Table: Candidate_Assessments)
How many customers are there?,SELECT sum(no_of_customers) FROM bank,* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.,SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000,* (Table: track) | Race_ID (Table: race) | Name (Table: race) | Class (Table: race) | Date (Table: race) | Track_ID (Table: race) | Track_ID (Table: track) | Name (Table: track) | Location (Table: track) | Seating (Table: track) | Year_Opened (Table: track)
How many customers have an active value of 1?,SELECT count(*) FROM customer WHERE active = '1',* (Table: store) | actor_id (Table: actor) | first_name (Table: actor) | last_name (Table: actor) | last_update (Table: actor) | address_id (Table: address) | address (Table: address) | address2 (Table: address) | district (Table: address) | city_id (Table: address) | postal_code (Table: address) | phone (Table: address) | last_update (Table: address) | category_id (Table: category) | name (Table: category) | last_update (Table: category) | city_id (Table: city) | city (Table: city) | country_id (Table: city) | last_update (Table: city) | country_id (Table: country) | country (Table: country) | last_update (Table: country) | customer_id (Table: customer) | store_id (Table: customer) | first_name (Table: customer) | last_name (Table: customer) | email (Table: customer) | address_id (Table: customer) | active (Table: customer) | create_date (Table: customer) | last_update (Table: customer) | film_id (Table: film) | title (Table: film) | description (Table: film) | release_year (Table: film) | language_id (Table: film) | original_language_id (Table: film) | rental_duration (Table: film) | rental_rate (Table: film) | length (Table: film) | replacement_cost (Table: film) | rating (Table: film) | special_features (Table: film) | last_update (Table: film) | actor_id (Table: film_actor) | film_id (Table: film_actor) | last_update (Table: film_actor) | film_id (Table: film_category) | category_id (Table: film_category) | last_update (Table: film_category) | film_id (Table: film_text) | title (Table: film_text) | description (Table: film_text) | inventory_id (Table: inventory) | film_id (Table: inventory) | store_id (Table: inventory) | last_update (Table: inventory) | language_id (Table: language) | name (Table: language) | last_update (Table: language) | payment_id (Table: payment) | customer_id (Table: payment) | staff_id (Table: payment) | rental_id (Table: payment) | amount (Table: payment) | payment_date (Table: payment) | last_update (Table: payment) | rental_id (Table: rental) | rental_date (Table: rental) | inventory_id (Table: rental) | customer_id (Table: rental) | return_date (Table: rental) | staff_id (Table: rental) | last_update (Table: rental) | staff_id (Table: staff) | first_name (Table: staff) | last_name (Table: staff) | address_id (Table: staff) | picture (Table: staff) | email (Table: staff) | store_id (Table: staff) | active (Table: staff) | username (Table: staff) | password (Table: staff) | last_update (Table: staff) | store_id (Table: store) | manager_staff_id (Table: store) | address_id (Table: store) | last_update (Table: store)
Find the total capacity of all dorms.,SELECT sum(student_capacity) FROM dorm,* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
What is the first and last name of the student participating in the most activities?,"SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
What are the maximum and minimum number of cities in all markets.,"SELECT max(Number_cities) ,  min(Number_cities) FROM market",* (Table: film_market_estimation) | Film_ID (Table: film) | Title (Table: film) | Studio (Table: film) | Director (Table: film) | Gross_in_dollar (Table: film) | Market_ID (Table: market) | Country (Table: market) | Number_cities (Table: market) | Estimation_ID (Table: film_market_estimation) | Low_Estimate (Table: film_market_estimation) | High_Estimate (Table: film_market_estimation) | Film_ID (Table: film_market_estimation) | Type (Table: film_market_estimation) | Market_ID (Table: film_market_estimation) | Year (Table: film_market_estimation)
Show names of pilots that have more than one record.,"SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1",* (Table: pilot_record) | Aircraft_ID (Table: aircraft) | Order_Year (Table: aircraft) | Manufacturer (Table: aircraft) | Model (Table: aircraft) | Fleet_Series (Table: aircraft) | Powertrain (Table: aircraft) | Fuel_Propulsion (Table: aircraft) | Pilot_ID (Table: pilot) | Pilot_name (Table: pilot) | Rank (Table: pilot) | Age (Table: pilot) | Nationality (Table: pilot) | Position (Table: pilot) | Join_Year (Table: pilot) | Team (Table: pilot) | Record_ID (Table: pilot_record) | Pilot_ID (Table: pilot_record) | Aircraft_ID (Table: pilot_record) | Date (Table: pilot_record)
What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?,SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room',* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
What are the names of representatives in descending order of votes?,SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC,* (Table: representative) | Election_ID (Table: election) | Representative_ID (Table: election) | Date (Table: election) | Votes (Table: election) | Vote_Percent (Table: election) | Seats (Table: election) | Place (Table: election) | Representative_ID (Table: representative) | Name (Table: representative) | State (Table: representative) | Party (Table: representative) | Lifespan (Table: representative)
What are the purchase details of transactions with amount bigger than 10000?,SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  >  10000,* (Table: Transactions_Lots) | investor_id (Table: Investors) | Investor_details (Table: Investors) | lot_id (Table: Lots) | investor_id (Table: Lots) | lot_details (Table: Lots) | transaction_type_code (Table: Ref_Transaction_Types) | transaction_type_description (Table: Ref_Transaction_Types) | transaction_id (Table: Transactions) | investor_id (Table: Transactions) | transaction_type_code (Table: Transactions) | date_of_transaction (Table: Transactions) | amount_of_transaction (Table: Transactions) | share_count (Table: Transactions) | other_details (Table: Transactions) | sales_transaction_id (Table: Sales) | sales_details (Table: Sales) | purchase_transaction_id (Table: Purchases) | purchase_details (Table: Purchases) | transaction_id (Table: Transactions_Lots) | lot_id (Table: Transactions_Lots)
What are the codes corresponding to document types for which there are less than 3 documents?,SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3,* (Table: Accounts) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Budget_Type_Code (Table: Ref_Budget_Codes) | Budget_Type_Description (Table: Ref_Budget_Codes) | Project_ID (Table: Projects) | Project_Details (Table: Projects) | Document_ID (Table: Documents) | Document_Type_Code (Table: Documents) | Project_ID (Table: Documents) | Document_Date (Table: Documents) | Document_Name (Table: Documents) | Document_Description (Table: Documents) | Other_Details (Table: Documents) | Statement_ID (Table: Statements) | Statement_Details (Table: Statements) | Document_ID (Table: Documents_with_Expenses) | Budget_Type_Code (Table: Documents_with_Expenses) | Document_Details (Table: Documents_with_Expenses) | Account_ID (Table: Accounts) | Statement_ID (Table: Accounts) | Account_Details (Table: Accounts)
Which ministers are not a part of the Progress Party?,SELECT minister FROM party WHERE party_name != 'Progress Party',* (Table: party_events) | Region_ID (Table: region) | Region_name (Table: region) | Date (Table: region) | Label (Table: region) | Format (Table: region) | Catalogue (Table: region) | Party_ID (Table: party) | Minister (Table: party) | Took_office (Table: party) | Left_office (Table: party) | Region_ID (Table: party) | Party_name (Table: party) | Member_ID (Table: member) | Member_Name (Table: member) | Party_ID (Table: member) | In_office (Table: member) | Event_ID (Table: party_events) | Event_Name (Table: party_events) | Party_ID (Table: party_events) | Member_in_charge_ID (Table: party_events)
Find the average number of factories for the manufacturers that have more than 20 shops.,SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20,* (Table: furniture_manufacte) | Manufacturer_ID (Table: manufacturer) | Open_Year (Table: manufacturer) | Name (Table: manufacturer) | Num_of_Factories (Table: manufacturer) | Num_of_Shops (Table: manufacturer) | Furniture_ID (Table: furniture) | Name (Table: furniture) | Num_of_Component (Table: furniture) | Market_Rate (Table: furniture) | Manufacturer_ID (Table: furniture_manufacte) | Furniture_ID (Table: furniture_manufacte) | Price_in_Dollar (Table: furniture_manufacte)
"For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there.","SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  ""Vincent"" OR T2.Tourist_Details  =  ""Vivian""",* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
"For each city, list their names in decreasing order by their highest station latitude.",SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC,* (Table: weather) | id (Table: station) | name (Table: station) | lat (Table: station) | long (Table: station) | dock_count (Table: station) | city (Table: station) | installation_date (Table: station) | station_id (Table: status) | bikes_available (Table: status) | docks_available (Table: status) | time (Table: status) | id (Table: trip) | duration (Table: trip) | start_date (Table: trip) | start_station_name (Table: trip) | start_station_id (Table: trip) | end_date (Table: trip) | end_station_name (Table: trip) | end_station_id (Table: trip) | bike_id (Table: trip) | subscription_type (Table: trip) | zip_code (Table: trip) | date (Table: weather) | max_temperature_f (Table: weather) | mean_temperature_f (Table: weather) | min_temperature_f (Table: weather) | max_dew_point_f (Table: weather) | mean_dew_point_f (Table: weather) | min_dew_point_f (Table: weather) | max_humidity (Table: weather) | mean_humidity (Table: weather) | min_humidity (Table: weather) | max_sea_level_pressure_inches (Table: weather) | mean_sea_level_pressure_inches (Table: weather) | min_sea_level_pressure_inches (Table: weather) | max_visibility_miles (Table: weather) | mean_visibility_miles (Table: weather) | min_visibility_miles (Table: weather) | max_wind_Speed_mph (Table: weather) | mean_wind_speed_mph (Table: weather) | max_gust_speed_mph (Table: weather) | precipitation_inches (Table: weather) | cloud_cover (Table: weather) | events (Table: weather) | wind_dir_degrees (Table: weather) | zip_code (Table: weather)
"Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.","SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC",* (Table: debate_people) | People_ID (Table: people) | District (Table: people) | Name (Table: people) | Party (Table: people) | Age (Table: people) | Debate_ID (Table: debate) | Date (Table: debate) | Venue (Table: debate) | Num_of_Audience (Table: debate) | Debate_ID (Table: debate_people) | Affirmative (Table: debate_people) | Negative (Table: debate_people) | If_Affirmative_Win (Table: debate_people)
Show the ids for all the students who participate in an activity and are under 20.,SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20,* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
What is the count of distinct employees with certificates?,SELECT count(DISTINCT eid) FROM Certificate,* (Table: certificate) | flno (Table: flight) | origin (Table: flight) | destination (Table: flight) | distance (Table: flight) | departure_date (Table: flight) | arrival_date (Table: flight) | price (Table: flight) | aid (Table: flight) | aid (Table: aircraft) | name (Table: aircraft) | distance (Table: aircraft) | eid (Table: employee) | name (Table: employee) | salary (Table: employee) | eid (Table: certificate) | aid (Table: certificate)
What are names for top three branches with most number of membership?,SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3,* (Table: purchase) | Member_ID (Table: member) | Card_Number (Table: member) | Name (Table: member) | Hometown (Table: member) | Level (Table: member) | Branch_ID (Table: branch) | Name (Table: branch) | Open_year (Table: branch) | Address_road (Table: branch) | City (Table: branch) | membership_amount (Table: branch) | Member_ID (Table: membership_register_branch) | Branch_ID (Table: membership_register_branch) | Register_Year (Table: membership_register_branch) | Member_ID (Table: purchase) | Branch_ID (Table: purchase) | Year (Table: purchase) | Total_pounds (Table: purchase)
List every album ordered by album title in ascending order.,SELECT title FROM albums ORDER BY title;,* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
"What is the name, city, country, and elevation for every airport in the city of New York?","SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'",* (Table: airlines) | rid (Table: routes) | dst_apid (Table: routes) | dst_ap (Table: routes) | src_apid (Table: routes) | src_ap (Table: routes) | alid (Table: routes) | airline (Table: routes) | codeshare (Table: routes) | apid (Table: airports) | name (Table: airports) | city (Table: airports) | country (Table: airports) | x (Table: airports) | y (Table: airports) | elevation (Table: airports) | iata (Table: airports) | icao (Table: airports) | alid (Table: airlines) | name (Table: airlines) | iata (Table: airlines) | icao (Table: airlines) | callsign (Table: airlines) | country (Table: airlines) | active (Table: airlines)
how many programs are there?,SELECT count(*) FROM program,* (Table: broadcast_share) | Program_ID (Table: program) | Name (Table: program) | Origin (Table: program) | Launch (Table: program) | Owner (Table: program) | Channel_ID (Table: channel) | Name (Table: channel) | Owner (Table: channel) | Share_in_percent (Table: channel) | Rating_in_percent (Table: channel) | Channel_ID (Table: broadcast) | Program_ID (Table: broadcast) | Time_of_day (Table: broadcast) | Channel_ID (Table: broadcast_share) | Program_ID (Table: broadcast_share) | Date (Table: broadcast_share) | Share_in_percent (Table: broadcast_share)
List the email addresses of the drama workshop groups located in Alaska state.,"SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  ""Alaska""",* (Table: Invoice_Items) | payment_method_code (Table: Ref_Payment_Methods) | payment_method_description (Table: Ref_Payment_Methods) | Service_Type_Code (Table: Ref_Service_Types) | Parent_Service_Type_Code (Table: Ref_Service_Types) | Service_Type_Description (Table: Ref_Service_Types) | Address_ID (Table: Addresses) | Line_1 (Table: Addresses) | Line_2 (Table: Addresses) | City_Town (Table: Addresses) | State_County (Table: Addresses) | Other_Details (Table: Addresses) | Product_ID (Table: Products) | Product_Name (Table: Products) | Product_Price (Table: Products) | Product_Description (Table: Products) | Other_Product_Service_Details (Table: Products) | Marketing_Region_Code (Table: Marketing_Regions) | Marketing_Region_Name (Table: Marketing_Regions) | Marketing_Region_Descriptrion (Table: Marketing_Regions) | Other_Details (Table: Marketing_Regions) | Client_ID (Table: Clients) | Address_ID (Table: Clients) | Customer_Email_Address (Table: Clients) | Customer_Name (Table: Clients) | Customer_Phone (Table: Clients) | Other_Details (Table: Clients) | Workshop_Group_ID (Table: Drama_Workshop_Groups) | Address_ID (Table: Drama_Workshop_Groups) | Currency_Code (Table: Drama_Workshop_Groups) | Marketing_Region_Code (Table: Drama_Workshop_Groups) | Store_Name (Table: Drama_Workshop_Groups) | Store_Phone (Table: Drama_Workshop_Groups) | Store_Email_Address (Table: Drama_Workshop_Groups) | Other_Details (Table: Drama_Workshop_Groups) | Performer_ID (Table: Performers) | Address_ID (Table: Performers) | Customer_Name (Table: Performers) | Customer_Phone (Table: Performers) | Customer_Email_Address (Table: Performers) | Other_Details (Table: Performers) | Customer_ID (Table: Customers) | Address_ID (Table: Customers) | Customer_Name (Table: Customers) | Customer_Phone (Table: Customers) | Customer_Email_Address (Table: Customers) | Other_Details (Table: Customers) | Store_ID (Table: Stores) | Address_ID (Table: Stores) | Marketing_Region_Code (Table: Stores) | Store_Name (Table: Stores) | Store_Phone (Table: Stores) | Store_Email_Address (Table: Stores) | Other_Details (Table: Stores) | Booking_ID (Table: Bookings) | Customer_ID (Table: Bookings) | Workshop_Group_ID (Table: Bookings) | Status_Code (Table: Bookings) | Store_ID (Table: Bookings) | Order_Date (Table: Bookings) | Planned_Delivery_Date (Table: Bookings) | Actual_Delivery_Date (Table: Bookings) | Other_Order_Details (Table: Bookings) | Order_ID (Table: Performers_in_Bookings) | Performer_ID (Table: Performers_in_Bookings) | Order_ID (Table: Customer_Orders) | Customer_ID (Table: Customer_Orders) | Store_ID (Table: Customer_Orders) | Order_Date (Table: Customer_Orders) | Planned_Delivery_Date (Table: Customer_Orders) | Actual_Delivery_Date (Table: Customer_Orders) | Other_Order_Details (Table: Customer_Orders) | Order_Item_ID (Table: Order_Items) | Order_ID (Table: Order_Items) | Product_ID (Table: Order_Items) | Order_Quantity (Table: Order_Items) | Other_Item_Details (Table: Order_Items) | Invoice_ID (Table: Invoices) | Order_ID (Table: Invoices) | payment_method_code (Table: Invoices) | Product_ID (Table: Invoices) | Order_Quantity (Table: Invoices) | Other_Item_Details (Table: Invoices) | Order_Item_ID (Table: Invoices) | Service_ID (Table: Services) | Service_Type_Code (Table: Services) | Workshop_Group_ID (Table: Services) | Product_Description (Table: Services) | Product_Name (Table: Services) | Product_Price (Table: Services) | Other_Product_Service_Details (Table: Services) | Order_ID (Table: Bookings_Services) | Product_ID (Table: Bookings_Services) | Invoice_Item_ID (Table: Invoice_Items) | Invoice_ID (Table: Invoice_Items) | Order_ID (Table: Invoice_Items) | Order_Item_ID (Table: Invoice_Items) | Product_ID (Table: Invoice_Items) | Order_Quantity (Table: Invoice_Items) | Other_Item_Details (Table: Invoice_Items)
Give me the the customer details and id for the customers who had two or more policies but did not file any claims.,"SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id",* (Table: Payments) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Policy_ID (Table: Customer_Policies) | Customer_ID (Table: Customer_Policies) | Policy_Type_Code (Table: Customer_Policies) | Start_Date (Table: Customer_Policies) | End_Date (Table: Customer_Policies) | Claim_ID (Table: Claims) | Policy_ID (Table: Claims) | Date_Claim_Made (Table: Claims) | Date_Claim_Settled (Table: Claims) | Amount_Claimed (Table: Claims) | Amount_Settled (Table: Claims) | Settlement_ID (Table: Settlements) | Claim_ID (Table: Settlements) | Date_Claim_Made (Table: Settlements) | Date_Claim_Settled (Table: Settlements) | Amount_Claimed (Table: Settlements) | Amount_Settled (Table: Settlements) | Customer_Policy_ID (Table: Settlements) | Payment_ID (Table: Payments) | Settlement_ID (Table: Payments) | Payment_Method_Code (Table: Payments) | Date_Payment_Made (Table: Payments) | Amount_Payment (Table: Payments)
Show all allergy types.,SELECT DISTINCT allergytype FROM Allergy_type,* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
Show names for all regions except for Denmark.,SELECT region_name FROM region WHERE region_name != 'Denmark',* (Table: affected_region) | Storm_ID (Table: storm) | Name (Table: storm) | Dates_active (Table: storm) | Max_speed (Table: storm) | Damage_millions_USD (Table: storm) | Number_Deaths (Table: storm) | Region_id (Table: region) | Region_code (Table: region) | Region_name (Table: region) | Region_id (Table: affected_region) | Storm_ID (Table: affected_region) | Number_city_affected (Table: affected_region)
"What are the names of the different bank branches, and what are their total loan amounts?","SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
Find the major that is studied by the most female students.,"SELECT Major FROM STUDENT WHERE Sex  =  ""F"" GROUP BY major ORDER BY count(*) DESC LIMIT 1",* (Table: Voting_record) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | StuID (Table: Voting_record) | Registration_Date (Table: Voting_record) | Election_Cycle (Table: Voting_record) | President_Vote (Table: Voting_record) | Vice_President_Vote (Table: Voting_record) | Secretary_Vote (Table: Voting_record) | Treasurer_Vote (Table: Voting_record) | Class_President_Vote (Table: Voting_record) | Class_Senator_Vote (Table: Voting_record)
Find the name and position of the head of the department with the least employees.,"SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
"For each year, return the year and the average number of attendance at home games.","SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;",* (Table: team_half) | player_id (Table: all_star) | year (Table: all_star) | game_num (Table: all_star) | game_id (Table: all_star) | team_id (Table: all_star) | league_id (Table: all_star) | gp (Table: all_star) | starting_pos (Table: all_star) | year (Table: appearances) | team_id (Table: appearances) | league_id (Table: appearances) | player_id (Table: appearances) | g_all (Table: appearances) | gs (Table: appearances) | g_batting (Table: appearances) | g_defense (Table: appearances) | g_p (Table: appearances) | g_c (Table: appearances) | g_1b (Table: appearances) | g_2b (Table: appearances) | g_3b (Table: appearances) | g_ss (Table: appearances) | g_lf (Table: appearances) | g_cf (Table: appearances) | g_rf (Table: appearances) | g_of (Table: appearances) | g_dh (Table: appearances) | g_ph (Table: appearances) | g_pr (Table: appearances) | player_id (Table: manager_award) | award_id (Table: manager_award) | year (Table: manager_award) | league_id (Table: manager_award) | tie (Table: manager_award) | notes (Table: manager_award) | player_id (Table: player_award) | award_id (Table: player_award) | year (Table: player_award) | league_id (Table: player_award) | tie (Table: player_award) | notes (Table: player_award) | award_id (Table: manager_award_vote) | year (Table: manager_award_vote) | league_id (Table: manager_award_vote) | player_id (Table: manager_award_vote) | points_won (Table: manager_award_vote) | points_max (Table: manager_award_vote) | votes_first (Table: manager_award_vote) | award_id (Table: player_award_vote) | year (Table: player_award_vote) | league_id (Table: player_award_vote) | player_id (Table: player_award_vote) | points_won (Table: player_award_vote) | points_max (Table: player_award_vote) | votes_first (Table: player_award_vote) | player_id (Table: batting) | year (Table: batting) | stint (Table: batting) | team_id (Table: batting) | league_id (Table: batting) | g (Table: batting) | ab (Table: batting) | r (Table: batting) | h (Table: batting) | double (Table: batting) | triple (Table: batting) | hr (Table: batting) | rbi (Table: batting) | sb (Table: batting) | cs (Table: batting) | bb (Table: batting) | so (Table: batting) | ibb (Table: batting) | hbp (Table: batting) | sh (Table: batting) | sf (Table: batting) | g_idp (Table: batting) | year (Table: batting_postseason) | round (Table: batting_postseason) | player_id (Table: batting_postseason) | team_id (Table: batting_postseason) | league_id (Table: batting_postseason) | g (Table: batting_postseason) | ab (Table: batting_postseason) | r (Table: batting_postseason) | h (Table: batting_postseason) | double (Table: batting_postseason) | triple (Table: batting_postseason) | hr (Table: batting_postseason) | rbi (Table: batting_postseason) | sb (Table: batting_postseason) | cs (Table: batting_postseason) | bb (Table: batting_postseason) | so (Table: batting_postseason) | ibb (Table: batting_postseason) | hbp (Table: batting_postseason) | sh (Table: batting_postseason) | sf (Table: batting_postseason) | g_idp (Table: batting_postseason) | player_id (Table: player_college) | college_id (Table: player_college) | year (Table: player_college) | player_id (Table: fielding) | year (Table: fielding) | stint (Table: fielding) | team_id (Table: fielding) | league_id (Table: fielding) | pos (Table: fielding) | g (Table: fielding) | gs (Table: fielding) | inn_outs (Table: fielding) | po (Table: fielding) | a (Table: fielding) | e (Table: fielding) | dp (Table: fielding) | pb (Table: fielding) | wp (Table: fielding) | sb (Table: fielding) | cs (Table: fielding) | zr (Table: fielding) | player_id (Table: fielding_outfield) | year (Table: fielding_outfield) | stint (Table: fielding_outfield) | glf (Table: fielding_outfield) | gcf (Table: fielding_outfield) | grf (Table: fielding_outfield) | player_id (Table: fielding_postseason) | year (Table: fielding_postseason) | team_id (Table: fielding_postseason) | league_id (Table: fielding_postseason) | round (Table: fielding_postseason) | pos (Table: fielding_postseason) | g (Table: fielding_postseason) | gs (Table: fielding_postseason) | inn_outs (Table: fielding_postseason) | po (Table: fielding_postseason) | a (Table: fielding_postseason) | e (Table: fielding_postseason) | dp (Table: fielding_postseason) | tp (Table: fielding_postseason) | pb (Table: fielding_postseason) | sb (Table: fielding_postseason) | cs (Table: fielding_postseason) | player_id (Table: hall_of_fame) | yearid (Table: hall_of_fame) | votedby (Table: hall_of_fame) | ballots (Table: hall_of_fame) | needed (Table: hall_of_fame) | votes (Table: hall_of_fame) | inducted (Table: hall_of_fame) | category (Table: hall_of_fame) | needed_note (Table: hall_of_fame) | year (Table: home_game) | league_id (Table: home_game) | team_id (Table: home_game) | park_id (Table: home_game) | span_first (Table: home_game) | span_last (Table: home_game) | games (Table: home_game) | openings (Table: home_game) | attendance (Table: home_game) | player_id (Table: manager) | year (Table: manager) | team_id (Table: manager) | league_id (Table: manager) | inseason (Table: manager) | g (Table: manager) | w (Table: manager) | l (Table: manager) | rank (Table: manager) | plyr_mgr (Table: manager) | player_id (Table: manager_half) | year (Table: manager_half) | team_id (Table: manager_half) | league_id (Table: manager_half) | inseason (Table: manager_half) | half (Table: manager_half) | g (Table: manager_half) | w (Table: manager_half) | l (Table: manager_half) | rank (Table: manager_half) | player_id (Table: player) | birth_year (Table: player) | birth_month (Table: player) | birth_day (Table: player) | birth_country (Table: player) | birth_state (Table: player) | birth_city (Table: player) | death_year (Table: player) | death_month (Table: player) | death_day (Table: player) | death_country (Table: player) | death_state (Table: player) | death_city (Table: player) | name_first (Table: player) | name_last (Table: player) | name_given (Table: player) | weight (Table: player) | height (Table: player) | bats (Table: player) | throws (Table: player) | debut (Table: player) | final_game (Table: player) | retro_id (Table: player) | bbref_id (Table: player) | park_id (Table: park) | park_name (Table: park) | park_alias (Table: park) | city (Table: park) | state (Table: park) | country (Table: park) | player_id (Table: pitching) | year (Table: pitching) | stint (Table: pitching) | team_id (Table: pitching) | league_id (Table: pitching) | w (Table: pitching) | l (Table: pitching) | g (Table: pitching) | gs (Table: pitching) | cg (Table: pitching) | sho (Table: pitching) | sv (Table: pitching) | ipouts (Table: pitching) | h (Table: pitching) | er (Table: pitching) | hr (Table: pitching) | bb (Table: pitching) | so (Table: pitching) | baopp (Table: pitching) | era (Table: pitching) | ibb (Table: pitching) | wp (Table: pitching) | hbp (Table: pitching) | bk (Table: pitching) | bfp (Table: pitching) | gf (Table: pitching) | r (Table: pitching) | sh (Table: pitching) | sf (Table: pitching) | g_idp (Table: pitching) | player_id (Table: pitching_postseason) | year (Table: pitching_postseason) | round (Table: pitching_postseason) | team_id (Table: pitching_postseason) | league_id (Table: pitching_postseason) | w (Table: pitching_postseason) | l (Table: pitching_postseason) | g (Table: pitching_postseason) | gs (Table: pitching_postseason) | cg (Table: pitching_postseason) | sho (Table: pitching_postseason) | sv (Table: pitching_postseason) | ipouts (Table: pitching_postseason) | h (Table: pitching_postseason) | er (Table: pitching_postseason) | hr (Table: pitching_postseason) | bb (Table: pitching_postseason) | so (Table: pitching_postseason) | baopp (Table: pitching_postseason) | era (Table: pitching_postseason) | ibb (Table: pitching_postseason) | wp (Table: pitching_postseason) | hbp (Table: pitching_postseason) | bk (Table: pitching_postseason) | bfp (Table: pitching_postseason) | gf (Table: pitching_postseason) | r (Table: pitching_postseason) | sh (Table: pitching_postseason) | sf (Table: pitching_postseason) | g_idp (Table: pitching_postseason) | year (Table: salary) | team_id (Table: salary) | league_id (Table: salary) | player_id (Table: salary) | salary (Table: salary) | college_id (Table: college) | name_full (Table: college) | city (Table: college) | state (Table: college) | country (Table: college) | year (Table: postseason) | round (Table: postseason) | team_id_winner (Table: postseason) | league_id_winner (Table: postseason) | team_id_loser (Table: postseason) | league_id_loser (Table: postseason) | wins (Table: postseason) | losses (Table: postseason) | ties (Table: postseason) | year (Table: team) | league_id (Table: team) | team_id (Table: team) | franchise_id (Table: team) | div_id (Table: team) | rank (Table: team) | g (Table: team) | ghome (Table: team) | w (Table: team) | l (Table: team) | div_win (Table: team) | wc_win (Table: team) | lg_win (Table: team) | ws_win (Table: team) | r (Table: team) | ab (Table: team) | h (Table: team) | double (Table: team) | triple (Table: team) | hr (Table: team) | bb (Table: team) | so (Table: team) | sb (Table: team) | cs (Table: team) | hbp (Table: team) | sf (Table: team) | ra (Table: team) | er (Table: team) | era (Table: team) | cg (Table: team) | sho (Table: team) | sv (Table: team) | ipouts (Table: team) | ha (Table: team) | hra (Table: team) | bba (Table: team) | soa (Table: team) | e (Table: team) | dp (Table: team) | fp (Table: team) | name (Table: team) | park (Table: team) | attendance (Table: team) | bpf (Table: team) | ppf (Table: team) | team_id_br (Table: team) | team_id_lahman45 (Table: team) | team_id_retro (Table: team) | franchise_id (Table: team_franchise) | franchise_name (Table: team_franchise) | active (Table: team_franchise) | na_assoc (Table: team_franchise) | year (Table: team_half) | league_id (Table: team_half) | team_id (Table: team_half) | half (Table: team_half) | div_id (Table: team_half) | div_win (Table: team_half) | rank (Table: team_half) | g (Table: team_half) | w (Table: team_half) | l (Table: team_half)
Find the list of distinct ranks for faculty.,SELECT DISTINCT rank FROM Faculty,* (Table: Faculty) | actid (Table: Activity) | activity_name (Table: Activity) | stuid (Table: Participates_in) | actid (Table: Participates_in) | FacID (Table: Faculty_Participates_in) | actid (Table: Faculty_Participates_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | FacID (Table: Faculty) | Lname (Table: Faculty) | Fname (Table: Faculty) | Rank (Table: Faculty) | Sex (Table: Faculty) | Phone (Table: Faculty) | Room (Table: Faculty) | Building (Table: Faculty)
Find the zip code in which the average mean visibility is lower than 10.,SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10,* (Table: weather) | id (Table: station) | name (Table: station) | lat (Table: station) | long (Table: station) | dock_count (Table: station) | city (Table: station) | installation_date (Table: station) | station_id (Table: status) | bikes_available (Table: status) | docks_available (Table: status) | time (Table: status) | id (Table: trip) | duration (Table: trip) | start_date (Table: trip) | start_station_name (Table: trip) | start_station_id (Table: trip) | end_date (Table: trip) | end_station_name (Table: trip) | end_station_id (Table: trip) | bike_id (Table: trip) | subscription_type (Table: trip) | zip_code (Table: trip) | date (Table: weather) | max_temperature_f (Table: weather) | mean_temperature_f (Table: weather) | min_temperature_f (Table: weather) | max_dew_point_f (Table: weather) | mean_dew_point_f (Table: weather) | min_dew_point_f (Table: weather) | max_humidity (Table: weather) | mean_humidity (Table: weather) | min_humidity (Table: weather) | max_sea_level_pressure_inches (Table: weather) | mean_sea_level_pressure_inches (Table: weather) | min_sea_level_pressure_inches (Table: weather) | max_visibility_miles (Table: weather) | mean_visibility_miles (Table: weather) | min_visibility_miles (Table: weather) | max_wind_Speed_mph (Table: weather) | mean_wind_speed_mph (Table: weather) | max_gust_speed_mph (Table: weather) | precipitation_inches (Table: weather) | cloud_cover (Table: weather) | events (Table: weather) | wind_dir_degrees (Table: weather) | zip_code (Table: weather)
display job title and average salary of employees.,"SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title",* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
Which membership card has more than 5 members?,SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5,* (Table: happy_hour_member) | Shop_ID (Table: shop) | Address (Table: shop) | Num_of_staff (Table: shop) | Score (Table: shop) | Open_Year (Table: shop) | Member_ID (Table: member) | Name (Table: member) | Membership_card (Table: member) | Age (Table: member) | Time_of_purchase (Table: member) | Level_of_membership (Table: member) | Address (Table: member) | HH_ID (Table: happy_hour) | Shop_ID (Table: happy_hour) | Month (Table: happy_hour) | Num_of_shaff_in_charge (Table: happy_hour) | HH_ID (Table: happy_hour_member) | Member_ID (Table: happy_hour_member) | Total_amount (Table: happy_hour_member)
Find the title of course that is provided by both Statistics and Psychology departments.,SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology',* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
What is the total account balance for customers with a credit score of above 100 for the different states?,"SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",* (Table: loan) | branch_ID (Table: bank) | bname (Table: bank) | no_of_customers (Table: bank) | city (Table: bank) | state (Table: bank) | cust_ID (Table: customer) | cust_name (Table: customer) | acc_type (Table: customer) | acc_bal (Table: customer) | no_of_loans (Table: customer) | credit_score (Table: customer) | branch_ID (Table: customer) | state (Table: customer) | loan_ID (Table: loan) | loan_type (Table: loan) | cust_ID (Table: loan) | branch_ID (Table: loan) | amount (Table: loan)
What are the states of the colleges where students who tried out for the striker position attend?,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker',* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
What are the open dates and years for the shop named Apple?,"SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  ""Apple""",* (Table: stock) | Device_ID (Table: device) | Device (Table: device) | Carrier (Table: device) | Package_Version (Table: device) | Applications (Table: device) | Software_Platform (Table: device) | Shop_ID (Table: shop) | Shop_Name (Table: shop) | Location (Table: shop) | Open_Date (Table: shop) | Open_Year (Table: shop) | Shop_ID (Table: stock) | Device_ID (Table: stock) | Quantity (Table: stock)
Show the names of buildings except for those having an institution founded in 2003.,SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003,* (Table: protein) | building_id (Table: building) | Name (Table: building) | Street_address (Table: building) | Years_as_tallest (Table: building) | Height_feet (Table: building) | Floors (Table: building) | Institution_id (Table: Institution) | Institution (Table: Institution) | Location (Table: Institution) | Founded (Table: Institution) | Type (Table: Institution) | Enrollment (Table: Institution) | Team (Table: Institution) | Primary_Conference (Table: Institution) | building_id (Table: Institution) | common_name (Table: protein) | protein_name (Table: protein) | divergence_from_human_lineage (Table: protein) | accession_number (Table: protein) | sequence_length (Table: protein) | sequence_identity_to_human_protein (Table: protein) | Institution_id (Table: protein)
Find the number of rooms for different block code?,"SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",* (Table: Undergoes) | EmployeeID (Table: Physician) | Name (Table: Physician) | Position (Table: Physician) | SSN (Table: Physician) | DepartmentID (Table: Department) | Name (Table: Department) | Head (Table: Department) | Physician (Table: Affiliated_With) | Department (Table: Affiliated_With) | PrimaryAffiliation (Table: Affiliated_With) | Code (Table: Procedures) | Name (Table: Procedures) | Cost (Table: Procedures) | Physician (Table: Trained_In) | Treatment (Table: Trained_In) | CertificationDate (Table: Trained_In) | CertificationExpires (Table: Trained_In) | SSN (Table: Patient) | Name (Table: Patient) | Address (Table: Patient) | Phone (Table: Patient) | InsuranceID (Table: Patient) | PCP (Table: Patient) | EmployeeID (Table: Nurse) | Name (Table: Nurse) | Position (Table: Nurse) | Registered (Table: Nurse) | SSN (Table: Nurse) | AppointmentID (Table: Appointment) | Patient (Table: Appointment) | PrepNurse (Table: Appointment) | Physician (Table: Appointment) | Start (Table: Appointment) | End (Table: Appointment) | ExaminationRoom (Table: Appointment) | Code (Table: Medication) | Name (Table: Medication) | Brand (Table: Medication) | Description (Table: Medication) | Physician (Table: Prescribes) | Patient (Table: Prescribes) | Medication (Table: Prescribes) | Date (Table: Prescribes) | Appointment (Table: Prescribes) | Dose (Table: Prescribes) | BlockFloor (Table: Block) | BlockCode (Table: Block) | RoomNumber (Table: Room) | RoomType (Table: Room) | BlockFloor (Table: Room) | BlockCode (Table: Room) | Unavailable (Table: Room) | Nurse (Table: On_Call) | BlockFloor (Table: On_Call) | BlockCode (Table: On_Call) | OnCallStart (Table: On_Call) | OnCallEnd (Table: On_Call) | StayID (Table: Stay) | Patient (Table: Stay) | Room (Table: Stay) | StayStart (Table: Stay) | StayEnd (Table: Stay) | Patient (Table: Undergoes) | Procedures (Table: Undergoes) | Stay (Table: Undergoes) | DateUndergoes (Table: Undergoes) | Physician (Table: Undergoes) | AssistingNurse (Table: Undergoes)
What are the first names of all teachers who have taught a course and the corresponding course codes?,"SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num",* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
"What are the names of all the documents, as well as the access counts of each, ordered alphabetically?","SELECT document_name ,  access_count FROM documents ORDER BY document_name",* (Table: Document_Sections_Images) | role_code (Table: Roles) | role_description (Table: Roles) | user_id (Table: Users) | role_code (Table: Users) | user_name (Table: Users) | user_login (Table: Users) | password (Table: Users) | document_structure_code (Table: Document_Structures) | parent_document_structure_code (Table: Document_Structures) | document_structure_description (Table: Document_Structures) | functional_area_code (Table: Functional_Areas) | parent_functional_area_code (Table: Functional_Areas) | functional_area_description (Table: Functional_Areas) | image_id (Table: Images) | image_alt_text (Table: Images) | image_name (Table: Images) | image_url (Table: Images) | document_code (Table: Documents) | document_structure_code (Table: Documents) | document_type_code (Table: Documents) | access_count (Table: Documents) | document_name (Table: Documents) | document_code (Table: Document_Functional_Areas) | functional_area_code (Table: Document_Functional_Areas) | section_id (Table: Document_Sections) | document_code (Table: Document_Sections) | section_sequence (Table: Document_Sections) | section_code (Table: Document_Sections) | section_title (Table: Document_Sections) | section_id (Table: Document_Sections_Images) | image_id (Table: Document_Sections_Images)
What is the first and last name of all students who are younger than average?,"SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)",* (Table: Lives_in) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | dormid (Table: Dorm) | dorm_name (Table: Dorm) | student_capacity (Table: Dorm) | gender (Table: Dorm) | amenid (Table: Dorm_amenity) | amenity_name (Table: Dorm_amenity) | dormid (Table: Has_amenity) | amenid (Table: Has_amenity) | stuid (Table: Lives_in) | dormid (Table: Lives_in) | room_number (Table: Lives_in)
How many male students (sex is 'M') are allergic to any type of food?,"SELECT count(*) FROM Student WHERE sex  =  ""M"" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  ""food"")",* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
"Show the advisors of the students whose city of residence has city code ""BAL"".","SELECT Advisor FROM STUDENT WHERE city_code  =  ""BAL""",* (Table: Voting_record) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student) | StuID (Table: Voting_record) | Registration_Date (Table: Voting_record) | Election_Cycle (Table: Voting_record) | President_Vote (Table: Voting_record) | Vice_President_Vote (Table: Voting_record) | Secretary_Vote (Table: Voting_record) | Treasurer_Vote (Table: Voting_record) | Class_President_Vote (Table: Voting_record) | Class_Senator_Vote (Table: Voting_record)
Count the number of credit cards that the customer with first name Blanche and last name Huels has.,"SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  ""Blanche"" AND T2.customer_last_name  =  ""Huels"" AND T1.card_type_code  =  ""Credit""",* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
What is draft detail of the document with id 7?,SELECT draft_details FROM Document_Drafts WHERE document_id = 7;,* (Table: Documents_Mailed) | document_type_code (Table: Ref_Document_Types) | document_type_description (Table: Ref_Document_Types) | role_code (Table: Roles) | role_description (Table: Roles) | address_id (Table: Addresses) | address_details (Table: Addresses) | document_status_code (Table: Ref_Document_Status) | document_status_description (Table: Ref_Document_Status) | shipping_agent_code (Table: Ref_Shipping_Agents) | shipping_agent_name (Table: Ref_Shipping_Agents) | shipping_agent_description (Table: Ref_Shipping_Agents) | document_id (Table: Documents) | document_status_code (Table: Documents) | document_type_code (Table: Documents) | shipping_agent_code (Table: Documents) | receipt_date (Table: Documents) | receipt_number (Table: Documents) | other_details (Table: Documents) | employee_id (Table: Employees) | role_code (Table: Employees) | employee_name (Table: Employees) | other_details (Table: Employees) | document_id (Table: Document_Drafts) | draft_number (Table: Document_Drafts) | draft_details (Table: Document_Drafts) | document_id (Table: Draft_Copies) | draft_number (Table: Draft_Copies) | copy_number (Table: Draft_Copies) | document_id (Table: Circulation_History) | draft_number (Table: Circulation_History) | copy_number (Table: Circulation_History) | employee_id (Table: Circulation_History) | document_id (Table: Documents_Mailed) | mailed_to_address_id (Table: Documents_Mailed) | mailing_date (Table: Documents_Mailed)
How many draft copies does the document with id 2 have?,SELECT count(*) FROM Draft_Copies WHERE document_id = 2;,* (Table: Documents_Mailed) | document_type_code (Table: Ref_Document_Types) | document_type_description (Table: Ref_Document_Types) | role_code (Table: Roles) | role_description (Table: Roles) | address_id (Table: Addresses) | address_details (Table: Addresses) | document_status_code (Table: Ref_Document_Status) | document_status_description (Table: Ref_Document_Status) | shipping_agent_code (Table: Ref_Shipping_Agents) | shipping_agent_name (Table: Ref_Shipping_Agents) | shipping_agent_description (Table: Ref_Shipping_Agents) | document_id (Table: Documents) | document_status_code (Table: Documents) | document_type_code (Table: Documents) | shipping_agent_code (Table: Documents) | receipt_date (Table: Documents) | receipt_number (Table: Documents) | other_details (Table: Documents) | employee_id (Table: Employees) | role_code (Table: Employees) | employee_name (Table: Employees) | other_details (Table: Employees) | document_id (Table: Document_Drafts) | draft_number (Table: Document_Drafts) | draft_details (Table: Document_Drafts) | document_id (Table: Draft_Copies) | draft_number (Table: Draft_Copies) | copy_number (Table: Draft_Copies) | document_id (Table: Circulation_History) | draft_number (Table: Circulation_History) | copy_number (Table: Circulation_History) | employee_id (Table: Circulation_History) | document_id (Table: Documents_Mailed) | mailed_to_address_id (Table: Documents_Mailed) | mailing_date (Table: Documents_Mailed)
What are the first and last names of the customers with the 10 cheapest invoices?,"SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;",* (Table: playlist_tracks) | id (Table: artists) | name (Table: artists) | name (Table: sqlite_sequence) | seq (Table: sqlite_sequence) | id (Table: albums) | title (Table: albums) | artist_id (Table: albums) | id (Table: employees) | last_name (Table: employees) | first_name (Table: employees) | title (Table: employees) | reports_to (Table: employees) | birth_date (Table: employees) | hire_date (Table: employees) | address (Table: employees) | city (Table: employees) | state (Table: employees) | country (Table: employees) | postal_code (Table: employees) | phone (Table: employees) | fax (Table: employees) | email (Table: employees) | id (Table: customers) | first_name (Table: customers) | last_name (Table: customers) | company (Table: customers) | address (Table: customers) | city (Table: customers) | state (Table: customers) | country (Table: customers) | postal_code (Table: customers) | phone (Table: customers) | fax (Table: customers) | email (Table: customers) | support_rep_id (Table: customers) | id (Table: genres) | name (Table: genres) | id (Table: invoices) | customer_id (Table: invoices) | invoice_date (Table: invoices) | billing_address (Table: invoices) | billing_city (Table: invoices) | billing_state (Table: invoices) | billing_country (Table: invoices) | billing_postal_code (Table: invoices) | total (Table: invoices) | id (Table: media_types) | name (Table: media_types) | id (Table: tracks) | name (Table: tracks) | album_id (Table: tracks) | media_type_id (Table: tracks) | genre_id (Table: tracks) | composer (Table: tracks) | milliseconds (Table: tracks) | bytes (Table: tracks) | unit_price (Table: tracks) | id (Table: invoice_lines) | invoice_id (Table: invoice_lines) | track_id (Table: invoice_lines) | unit_price (Table: invoice_lines) | quantity (Table: invoice_lines) | id (Table: playlists) | name (Table: playlists) | playlist_id (Table: playlist_tracks) | track_id (Table: playlist_tracks)
Show all distinct location names.,SELECT DISTINCT Location_Name FROM LOCATIONS,* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
What is the name of the room that can accommodate the most people?,SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;,* (Table: Reservations) | RoomId (Table: Rooms) | roomName (Table: Rooms) | beds (Table: Rooms) | bedType (Table: Rooms) | maxOccupancy (Table: Rooms) | basePrice (Table: Rooms) | decor (Table: Rooms) | Code (Table: Reservations) | Room (Table: Reservations) | CheckIn (Table: Reservations) | CheckOut (Table: Reservations) | Rate (Table: Reservations) | LastName (Table: Reservations) | FirstName (Table: Reservations) | Adults (Table: Reservations) | Kids (Table: Reservations)
Which submission received the highest score in acceptance result. Show me the result.,SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1,* (Table: Acceptance) | Workshop_ID (Table: workshop) | Date (Table: workshop) | Venue (Table: workshop) | Name (Table: workshop) | Submission_ID (Table: submission) | Scores (Table: submission) | Author (Table: submission) | College (Table: submission) | Submission_ID (Table: Acceptance) | Workshop_ID (Table: Acceptance) | Result (Table: Acceptance)
"List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.","SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR",* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
"How many policies are listed for the customer named ""Dayana Robel""?","SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  ""Dayana Robel""",* (Table: Settlements) | Customer_ID (Table: Customers) | Customer_name (Table: Customers) | Service_ID (Table: Services) | Service_name (Table: Services) | Policy_ID (Table: Available_Policies) | policy_type_code (Table: Available_Policies) | Customer_Phone (Table: Available_Policies) | Customer_ID (Table: Customers_Policies) | Policy_ID (Table: Customers_Policies) | Date_Opened (Table: Customers_Policies) | Date_Closed (Table: Customers_Policies) | FNOL_ID (Table: First_Notification_of_Loss) | Customer_ID (Table: First_Notification_of_Loss) | Policy_ID (Table: First_Notification_of_Loss) | Service_ID (Table: First_Notification_of_Loss) | Claim_ID (Table: Claims) | FNOL_ID (Table: Claims) | Effective_Date (Table: Claims) | Settlement_ID (Table: Settlements) | Claim_ID (Table: Settlements) | Effective_Date (Table: Settlements) | Settlement_Amount (Table: Settlements)
How many papers are published in total?,SELECT count(*) FROM papers,* (Table: Authorship) | instID (Table: Inst) | name (Table: Inst) | country (Table: Inst) | authID (Table: Authors) | lname (Table: Authors) | fname (Table: Authors) | paperID (Table: Papers) | title (Table: Papers) | authID (Table: Authorship) | instID (Table: Authorship) | paperID (Table: Authorship) | authOrder (Table: Authorship)
Which tourist attractions does the visitor with detail 'Vincent' visit?,"SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  ""Vincent""",* (Table: Tourist_Attraction_Features) | star_rating_code (Table: Ref_Hotel_Star_Ratings) | star_rating_description (Table: Ref_Hotel_Star_Ratings) | Location_ID (Table: Locations) | Location_Name (Table: Locations) | Address (Table: Locations) | Other_Details (Table: Locations) | Attraction_Type_Code (Table: Ref_Attraction_Types) | Attraction_Type_Description (Table: Ref_Attraction_Types) | Tourist_ID (Table: Visitors) | Tourist_Details (Table: Visitors) | Feature_ID (Table: Features) | Feature_Details (Table: Features) | hotel_id (Table: Hotels) | star_rating_code (Table: Hotels) | pets_allowed_yn (Table: Hotels) | price_range (Table: Hotels) | other_hotel_details (Table: Hotels) | Tourist_Attraction_ID (Table: Tourist_Attractions) | Attraction_Type_Code (Table: Tourist_Attractions) | Location_ID (Table: Tourist_Attractions) | How_to_Get_There (Table: Tourist_Attractions) | Name (Table: Tourist_Attractions) | Description (Table: Tourist_Attractions) | Opening_Hours (Table: Tourist_Attractions) | Other_Details (Table: Tourist_Attractions) | Market_ID (Table: Street_Markets) | Market_Details (Table: Street_Markets) | Shop_ID (Table: Shops) | Shop_Details (Table: Shops) | Museum_ID (Table: Museums) | Museum_Details (Table: Museums) | Royal_Family_ID (Table: Royal_Family) | Royal_Family_Details (Table: Royal_Family) | Theme_Park_ID (Table: Theme_Parks) | Theme_Park_Details (Table: Theme_Parks) | Visit_ID (Table: Visits) | Tourist_Attraction_ID (Table: Visits) | Tourist_ID (Table: Visits) | Visit_Date (Table: Visits) | Visit_Details (Table: Visits) | Photo_ID (Table: Photos) | Tourist_Attraction_ID (Table: Photos) | Name (Table: Photos) | Description (Table: Photos) | Filename (Table: Photos) | Other_Details (Table: Photos) | Staff_ID (Table: Staff) | Tourist_Attraction_ID (Table: Staff) | Name (Table: Staff) | Other_Details (Table: Staff) | Tourist_Attraction_ID (Table: Tourist_Attraction_Features) | Feature_ID (Table: Tourist_Attraction_Features)
Which vocal type is the most frequently appearring type?,SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1,* (Table: Vocals) | SongId (Table: Songs) | Title (Table: Songs) | AId (Table: Albums) | Title (Table: Albums) | Year (Table: Albums) | Label (Table: Albums) | Type (Table: Albums) | Id (Table: Band) | Firstname (Table: Band) | Lastname (Table: Band) | SongId (Table: Instruments) | BandmateId (Table: Instruments) | Instrument (Table: Instruments) | SongId (Table: Performance) | Bandmate (Table: Performance) | StagePosition (Table: Performance) | AlbumId (Table: Tracklists) | Position (Table: Tracklists) | SongId (Table: Tracklists) | SongId (Table: Vocals) | Bandmate (Table: Vocals) | Type (Table: Vocals)
When did customer with first name as Carole and last name as Bernhard became a customer?,"SELECT date_became_customer FROM Customers WHERE first_name = ""Carole"" AND last_name = ""Bernhard"";",* (Table: Lessons) | address_id (Table: Addresses) | line_1_number_building (Table: Addresses) | city (Table: Addresses) | zip_postcode (Table: Addresses) | state_province_county (Table: Addresses) | country (Table: Addresses) | staff_id (Table: Staff) | staff_address_id (Table: Staff) | nickname (Table: Staff) | first_name (Table: Staff) | middle_name (Table: Staff) | last_name (Table: Staff) | date_of_birth (Table: Staff) | date_joined_staff (Table: Staff) | date_left_staff (Table: Staff) | vehicle_id (Table: Vehicles) | vehicle_details (Table: Vehicles) | customer_id (Table: Customers) | customer_address_id (Table: Customers) | customer_status_code (Table: Customers) | date_became_customer (Table: Customers) | date_of_birth (Table: Customers) | first_name (Table: Customers) | last_name (Table: Customers) | amount_outstanding (Table: Customers) | email_address (Table: Customers) | phone_number (Table: Customers) | cell_mobile_phone_number (Table: Customers) | customer_id (Table: Customer_Payments) | datetime_payment (Table: Customer_Payments) | payment_method_code (Table: Customer_Payments) | amount_payment (Table: Customer_Payments) | lesson_id (Table: Lessons) | customer_id (Table: Lessons) | lesson_status_code (Table: Lessons) | staff_id (Table: Lessons) | vehicle_id (Table: Lessons) | lesson_date (Table: Lessons) | lesson_time (Table: Lessons) | price (Table: Lessons)
Find the addresses and author IDs of the course authors that teach at least two courses.,"SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2",* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
List the names of people that are not perpetrators.,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator),* (Table: people) | Perpetrator_ID (Table: perpetrator) | People_ID (Table: perpetrator) | Date (Table: perpetrator) | Year (Table: perpetrator) | Location (Table: perpetrator) | Country (Table: perpetrator) | Killed (Table: perpetrator) | Injured (Table: perpetrator) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Home Town (Table: people)
What are the different types of vocals?,SELECT DISTINCT TYPE FROM vocals,* (Table: Vocals) | SongId (Table: Songs) | Title (Table: Songs) | AId (Table: Albums) | Title (Table: Albums) | Year (Table: Albums) | Label (Table: Albums) | Type (Table: Albums) | Id (Table: Band) | Firstname (Table: Band) | Lastname (Table: Band) | SongId (Table: Instruments) | BandmateId (Table: Instruments) | Instrument (Table: Instruments) | SongId (Table: Performance) | Bandmate (Table: Performance) | StagePosition (Table: Performance) | AlbumId (Table: Tracklists) | Position (Table: Tracklists) | SongId (Table: Tracklists) | SongId (Table: Vocals) | Bandmate (Table: Vocals) | Type (Table: Vocals)
Which team had the least number of attendances in home games in 1980?,SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;,* (Table: team_half) | player_id (Table: all_star) | year (Table: all_star) | game_num (Table: all_star) | game_id (Table: all_star) | team_id (Table: all_star) | league_id (Table: all_star) | gp (Table: all_star) | starting_pos (Table: all_star) | year (Table: appearances) | team_id (Table: appearances) | league_id (Table: appearances) | player_id (Table: appearances) | g_all (Table: appearances) | gs (Table: appearances) | g_batting (Table: appearances) | g_defense (Table: appearances) | g_p (Table: appearances) | g_c (Table: appearances) | g_1b (Table: appearances) | g_2b (Table: appearances) | g_3b (Table: appearances) | g_ss (Table: appearances) | g_lf (Table: appearances) | g_cf (Table: appearances) | g_rf (Table: appearances) | g_of (Table: appearances) | g_dh (Table: appearances) | g_ph (Table: appearances) | g_pr (Table: appearances) | player_id (Table: manager_award) | award_id (Table: manager_award) | year (Table: manager_award) | league_id (Table: manager_award) | tie (Table: manager_award) | notes (Table: manager_award) | player_id (Table: player_award) | award_id (Table: player_award) | year (Table: player_award) | league_id (Table: player_award) | tie (Table: player_award) | notes (Table: player_award) | award_id (Table: manager_award_vote) | year (Table: manager_award_vote) | league_id (Table: manager_award_vote) | player_id (Table: manager_award_vote) | points_won (Table: manager_award_vote) | points_max (Table: manager_award_vote) | votes_first (Table: manager_award_vote) | award_id (Table: player_award_vote) | year (Table: player_award_vote) | league_id (Table: player_award_vote) | player_id (Table: player_award_vote) | points_won (Table: player_award_vote) | points_max (Table: player_award_vote) | votes_first (Table: player_award_vote) | player_id (Table: batting) | year (Table: batting) | stint (Table: batting) | team_id (Table: batting) | league_id (Table: batting) | g (Table: batting) | ab (Table: batting) | r (Table: batting) | h (Table: batting) | double (Table: batting) | triple (Table: batting) | hr (Table: batting) | rbi (Table: batting) | sb (Table: batting) | cs (Table: batting) | bb (Table: batting) | so (Table: batting) | ibb (Table: batting) | hbp (Table: batting) | sh (Table: batting) | sf (Table: batting) | g_idp (Table: batting) | year (Table: batting_postseason) | round (Table: batting_postseason) | player_id (Table: batting_postseason) | team_id (Table: batting_postseason) | league_id (Table: batting_postseason) | g (Table: batting_postseason) | ab (Table: batting_postseason) | r (Table: batting_postseason) | h (Table: batting_postseason) | double (Table: batting_postseason) | triple (Table: batting_postseason) | hr (Table: batting_postseason) | rbi (Table: batting_postseason) | sb (Table: batting_postseason) | cs (Table: batting_postseason) | bb (Table: batting_postseason) | so (Table: batting_postseason) | ibb (Table: batting_postseason) | hbp (Table: batting_postseason) | sh (Table: batting_postseason) | sf (Table: batting_postseason) | g_idp (Table: batting_postseason) | player_id (Table: player_college) | college_id (Table: player_college) | year (Table: player_college) | player_id (Table: fielding) | year (Table: fielding) | stint (Table: fielding) | team_id (Table: fielding) | league_id (Table: fielding) | pos (Table: fielding) | g (Table: fielding) | gs (Table: fielding) | inn_outs (Table: fielding) | po (Table: fielding) | a (Table: fielding) | e (Table: fielding) | dp (Table: fielding) | pb (Table: fielding) | wp (Table: fielding) | sb (Table: fielding) | cs (Table: fielding) | zr (Table: fielding) | player_id (Table: fielding_outfield) | year (Table: fielding_outfield) | stint (Table: fielding_outfield) | glf (Table: fielding_outfield) | gcf (Table: fielding_outfield) | grf (Table: fielding_outfield) | player_id (Table: fielding_postseason) | year (Table: fielding_postseason) | team_id (Table: fielding_postseason) | league_id (Table: fielding_postseason) | round (Table: fielding_postseason) | pos (Table: fielding_postseason) | g (Table: fielding_postseason) | gs (Table: fielding_postseason) | inn_outs (Table: fielding_postseason) | po (Table: fielding_postseason) | a (Table: fielding_postseason) | e (Table: fielding_postseason) | dp (Table: fielding_postseason) | tp (Table: fielding_postseason) | pb (Table: fielding_postseason) | sb (Table: fielding_postseason) | cs (Table: fielding_postseason) | player_id (Table: hall_of_fame) | yearid (Table: hall_of_fame) | votedby (Table: hall_of_fame) | ballots (Table: hall_of_fame) | needed (Table: hall_of_fame) | votes (Table: hall_of_fame) | inducted (Table: hall_of_fame) | category (Table: hall_of_fame) | needed_note (Table: hall_of_fame) | year (Table: home_game) | league_id (Table: home_game) | team_id (Table: home_game) | park_id (Table: home_game) | span_first (Table: home_game) | span_last (Table: home_game) | games (Table: home_game) | openings (Table: home_game) | attendance (Table: home_game) | player_id (Table: manager) | year (Table: manager) | team_id (Table: manager) | league_id (Table: manager) | inseason (Table: manager) | g (Table: manager) | w (Table: manager) | l (Table: manager) | rank (Table: manager) | plyr_mgr (Table: manager) | player_id (Table: manager_half) | year (Table: manager_half) | team_id (Table: manager_half) | league_id (Table: manager_half) | inseason (Table: manager_half) | half (Table: manager_half) | g (Table: manager_half) | w (Table: manager_half) | l (Table: manager_half) | rank (Table: manager_half) | player_id (Table: player) | birth_year (Table: player) | birth_month (Table: player) | birth_day (Table: player) | birth_country (Table: player) | birth_state (Table: player) | birth_city (Table: player) | death_year (Table: player) | death_month (Table: player) | death_day (Table: player) | death_country (Table: player) | death_state (Table: player) | death_city (Table: player) | name_first (Table: player) | name_last (Table: player) | name_given (Table: player) | weight (Table: player) | height (Table: player) | bats (Table: player) | throws (Table: player) | debut (Table: player) | final_game (Table: player) | retro_id (Table: player) | bbref_id (Table: player) | park_id (Table: park) | park_name (Table: park) | park_alias (Table: park) | city (Table: park) | state (Table: park) | country (Table: park) | player_id (Table: pitching) | year (Table: pitching) | stint (Table: pitching) | team_id (Table: pitching) | league_id (Table: pitching) | w (Table: pitching) | l (Table: pitching) | g (Table: pitching) | gs (Table: pitching) | cg (Table: pitching) | sho (Table: pitching) | sv (Table: pitching) | ipouts (Table: pitching) | h (Table: pitching) | er (Table: pitching) | hr (Table: pitching) | bb (Table: pitching) | so (Table: pitching) | baopp (Table: pitching) | era (Table: pitching) | ibb (Table: pitching) | wp (Table: pitching) | hbp (Table: pitching) | bk (Table: pitching) | bfp (Table: pitching) | gf (Table: pitching) | r (Table: pitching) | sh (Table: pitching) | sf (Table: pitching) | g_idp (Table: pitching) | player_id (Table: pitching_postseason) | year (Table: pitching_postseason) | round (Table: pitching_postseason) | team_id (Table: pitching_postseason) | league_id (Table: pitching_postseason) | w (Table: pitching_postseason) | l (Table: pitching_postseason) | g (Table: pitching_postseason) | gs (Table: pitching_postseason) | cg (Table: pitching_postseason) | sho (Table: pitching_postseason) | sv (Table: pitching_postseason) | ipouts (Table: pitching_postseason) | h (Table: pitching_postseason) | er (Table: pitching_postseason) | hr (Table: pitching_postseason) | bb (Table: pitching_postseason) | so (Table: pitching_postseason) | baopp (Table: pitching_postseason) | era (Table: pitching_postseason) | ibb (Table: pitching_postseason) | wp (Table: pitching_postseason) | hbp (Table: pitching_postseason) | bk (Table: pitching_postseason) | bfp (Table: pitching_postseason) | gf (Table: pitching_postseason) | r (Table: pitching_postseason) | sh (Table: pitching_postseason) | sf (Table: pitching_postseason) | g_idp (Table: pitching_postseason) | year (Table: salary) | team_id (Table: salary) | league_id (Table: salary) | player_id (Table: salary) | salary (Table: salary) | college_id (Table: college) | name_full (Table: college) | city (Table: college) | state (Table: college) | country (Table: college) | year (Table: postseason) | round (Table: postseason) | team_id_winner (Table: postseason) | league_id_winner (Table: postseason) | team_id_loser (Table: postseason) | league_id_loser (Table: postseason) | wins (Table: postseason) | losses (Table: postseason) | ties (Table: postseason) | year (Table: team) | league_id (Table: team) | team_id (Table: team) | franchise_id (Table: team) | div_id (Table: team) | rank (Table: team) | g (Table: team) | ghome (Table: team) | w (Table: team) | l (Table: team) | div_win (Table: team) | wc_win (Table: team) | lg_win (Table: team) | ws_win (Table: team) | r (Table: team) | ab (Table: team) | h (Table: team) | double (Table: team) | triple (Table: team) | hr (Table: team) | bb (Table: team) | so (Table: team) | sb (Table: team) | cs (Table: team) | hbp (Table: team) | sf (Table: team) | ra (Table: team) | er (Table: team) | era (Table: team) | cg (Table: team) | sho (Table: team) | sv (Table: team) | ipouts (Table: team) | ha (Table: team) | hra (Table: team) | bba (Table: team) | soa (Table: team) | e (Table: team) | dp (Table: team) | fp (Table: team) | name (Table: team) | park (Table: team) | attendance (Table: team) | bpf (Table: team) | ppf (Table: team) | team_id_br (Table: team) | team_id_lahman45 (Table: team) | team_id_retro (Table: team) | franchise_id (Table: team_franchise) | franchise_name (Table: team_franchise) | active (Table: team_franchise) | na_assoc (Table: team_franchise) | year (Table: team_half) | league_id (Table: team_half) | team_id (Table: team_half) | half (Table: team_half) | div_id (Table: team_half) | div_win (Table: team_half) | rank (Table: team_half) | g (Table: team_half) | w (Table: team_half) | l (Table: team_half)
"What are the IDs of customers who have ""Diana"" in part of their names?","SELECT customer_id FROM customers WHERE customer_name LIKE ""%Diana%""",* (Table: Settlements) | Customer_ID (Table: Customers) | Customer_name (Table: Customers) | Service_ID (Table: Services) | Service_name (Table: Services) | Policy_ID (Table: Available_Policies) | policy_type_code (Table: Available_Policies) | Customer_Phone (Table: Available_Policies) | Customer_ID (Table: Customers_Policies) | Policy_ID (Table: Customers_Policies) | Date_Opened (Table: Customers_Policies) | Date_Closed (Table: Customers_Policies) | FNOL_ID (Table: First_Notification_of_Loss) | Customer_ID (Table: First_Notification_of_Loss) | Policy_ID (Table: First_Notification_of_Loss) | Service_ID (Table: First_Notification_of_Loss) | Claim_ID (Table: Claims) | FNOL_ID (Table: Claims) | Effective_Date (Table: Claims) | Settlement_ID (Table: Settlements) | Claim_ID (Table: Settlements) | Effective_Date (Table: Settlements) | Settlement_Amount (Table: Settlements)
How many documents correspond with each project id?,"SELECT project_id ,  count(*) FROM Documents GROUP BY project_id",* (Table: Accounts) | Document_Type_Code (Table: Ref_Document_Types) | Document_Type_Name (Table: Ref_Document_Types) | Document_Type_Description (Table: Ref_Document_Types) | Budget_Type_Code (Table: Ref_Budget_Codes) | Budget_Type_Description (Table: Ref_Budget_Codes) | Project_ID (Table: Projects) | Project_Details (Table: Projects) | Document_ID (Table: Documents) | Document_Type_Code (Table: Documents) | Project_ID (Table: Documents) | Document_Date (Table: Documents) | Document_Name (Table: Documents) | Document_Description (Table: Documents) | Other_Details (Table: Documents) | Statement_ID (Table: Statements) | Statement_Details (Table: Statements) | Document_ID (Table: Documents_with_Expenses) | Budget_Type_Code (Table: Documents_with_Expenses) | Document_Details (Table: Documents_with_Expenses) | Account_ID (Table: Accounts) | Statement_ID (Table: Accounts) | Account_Details (Table: Accounts)
Show the maximum and minimum share count of different transaction types.,"SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code",* (Table: Transactions_Lots) | investor_id (Table: Investors) | Investor_details (Table: Investors) | lot_id (Table: Lots) | investor_id (Table: Lots) | lot_details (Table: Lots) | transaction_type_code (Table: Ref_Transaction_Types) | transaction_type_description (Table: Ref_Transaction_Types) | transaction_id (Table: Transactions) | investor_id (Table: Transactions) | transaction_type_code (Table: Transactions) | date_of_transaction (Table: Transactions) | amount_of_transaction (Table: Transactions) | share_count (Table: Transactions) | other_details (Table: Transactions) | sales_transaction_id (Table: Sales) | sales_details (Table: Sales) | purchase_transaction_id (Table: Purchases) | purchase_details (Table: Purchases) | transaction_id (Table: Transactions_Lots) | lot_id (Table: Transactions_Lots)
What is the average salary of employees who have a commission percentage that is not null?,"SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != ""null"" GROUP BY department_id",* (Table: locations) | REGION_ID (Table: regions) | REGION_NAME (Table: regions) | COUNTRY_ID (Table: countries) | COUNTRY_NAME (Table: countries) | REGION_ID (Table: countries) | DEPARTMENT_ID (Table: departments) | DEPARTMENT_NAME (Table: departments) | MANAGER_ID (Table: departments) | LOCATION_ID (Table: departments) | JOB_ID (Table: jobs) | JOB_TITLE (Table: jobs) | MIN_SALARY (Table: jobs) | MAX_SALARY (Table: jobs) | EMPLOYEE_ID (Table: employees) | FIRST_NAME (Table: employees) | LAST_NAME (Table: employees) | EMAIL (Table: employees) | PHONE_NUMBER (Table: employees) | HIRE_DATE (Table: employees) | JOB_ID (Table: employees) | SALARY (Table: employees) | COMMISSION_PCT (Table: employees) | MANAGER_ID (Table: employees) | DEPARTMENT_ID (Table: employees) | EMPLOYEE_ID (Table: job_history) | START_DATE (Table: job_history) | END_DATE (Table: job_history) | JOB_ID (Table: job_history) | DEPARTMENT_ID (Table: job_history) | LOCATION_ID (Table: locations) | STREET_ADDRESS (Table: locations) | POSTAL_CODE (Table: locations) | CITY (Table: locations) | STATE_PROVINCE (Table: locations) | COUNTRY_ID (Table: locations)
Which head's name has the substring 'Ha'? List the id and name.,"SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'",* (Table: management) | Department_ID (Table: department) | Name (Table: department) | Creation (Table: department) | Ranking (Table: department) | Budget_in_Billions (Table: department) | Num_Employees (Table: department) | head_ID (Table: head) | name (Table: head) | born_state (Table: head) | age (Table: head) | department_ID (Table: management) | head_ID (Table: management) | temporary_acting (Table: management)
What are the names of all wines produced in 2008?,"SELECT Name FROM WINE WHERE YEAR  =  ""2008""",* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
What are the entry names of catalog with the attribute possessed by most entries.,SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1),* (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Attribute_Definitions) | attribute_name (Table: Attribute_Definitions) | attribute_data_type (Table: Attribute_Definitions) | catalog_id (Table: Catalogs) | catalog_name (Table: Catalogs) | catalog_publisher (Table: Catalogs) | date_of_publication (Table: Catalogs) | date_of_latest_revision (Table: Catalogs) | catalog_level_number (Table: Catalog_Structure) | catalog_id (Table: Catalog_Structure) | catalog_level_name (Table: Catalog_Structure) | catalog_entry_id (Table: Catalog_Contents) | catalog_level_number (Table: Catalog_Contents) | parent_entry_id (Table: Catalog_Contents) | previous_entry_id (Table: Catalog_Contents) | next_entry_id (Table: Catalog_Contents) | catalog_entry_name (Table: Catalog_Contents) | product_stock_number (Table: Catalog_Contents) | price_in_dollars (Table: Catalog_Contents) | price_in_euros (Table: Catalog_Contents) | price_in_pounds (Table: Catalog_Contents) | capacity (Table: Catalog_Contents) | length (Table: Catalog_Contents) | height (Table: Catalog_Contents) | width (Table: Catalog_Contents) | catalog_entry_id (Table: Catalog_Contents_Additional_Attributes) | catalog_level_number (Table: Catalog_Contents_Additional_Attributes) | attribute_id (Table: Catalog_Contents_Additional_Attributes) | attribute_value (Table: Catalog_Contents_Additional_Attributes)
Return the name and max speed of the storm that affected the most regions.,"SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",* (Table: affected_region) | Storm_ID (Table: storm) | Name (Table: storm) | Dates_active (Table: storm) | Max_speed (Table: storm) | Damage_millions_USD (Table: storm) | Number_Deaths (Table: storm) | Region_id (Table: region) | Region_code (Table: region) | Region_name (Table: region) | Region_id (Table: affected_region) | Storm_ID (Table: affected_region) | Number_city_affected (Table: affected_region)
What is average number of students enrolled in Florida colleges?,SELECT avg(enr) FROM College WHERE state  =  'FL',* (Table: Tryout) | cName (Table: College) | state (Table: College) | enr (Table: College) | pID (Table: Player) | pName (Table: Player) | yCard (Table: Player) | HS (Table: Player) | pID (Table: Tryout) | cName (Table: Tryout) | pPos (Table: Tryout) | decision (Table: Tryout)
What is the average total score of body builders with height bigger than 200?,SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200,* (Table: people) | Body_Builder_ID (Table: body_builder) | People_ID (Table: body_builder) | Snatch (Table: body_builder) | Clean_Jerk (Table: body_builder) | Total (Table: body_builder) | People_ID (Table: people) | Name (Table: people) | Height (Table: people) | Weight (Table: people) | Birth_Date (Table: people) | Birth_Place (Table: people)
Find the first names of all professors in the Accounting department who is teaching some course and the class room.,"SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'",* (Table: STUDENT) | CLASS_CODE (Table: CLASS) | CRS_CODE (Table: CLASS) | CLASS_SECTION (Table: CLASS) | CLASS_TIME (Table: CLASS) | CLASS_ROOM (Table: CLASS) | PROF_NUM (Table: CLASS) | CRS_CODE (Table: COURSE) | DEPT_CODE (Table: COURSE) | CRS_DESCRIPTION (Table: COURSE) | CRS_CREDIT (Table: COURSE) | DEPT_CODE (Table: DEPARTMENT) | DEPT_NAME (Table: DEPARTMENT) | SCHOOL_CODE (Table: DEPARTMENT) | EMP_NUM (Table: DEPARTMENT) | DEPT_ADDRESS (Table: DEPARTMENT) | DEPT_EXTENSION (Table: DEPARTMENT) | EMP_NUM (Table: EMPLOYEE) | EMP_LNAME (Table: EMPLOYEE) | EMP_FNAME (Table: EMPLOYEE) | EMP_INITIAL (Table: EMPLOYEE) | EMP_JOBCODE (Table: EMPLOYEE) | EMP_HIREDATE (Table: EMPLOYEE) | EMP_DOB (Table: EMPLOYEE) | CLASS_CODE (Table: ENROLL) | STU_NUM (Table: ENROLL) | ENROLL_GRADE (Table: ENROLL) | EMP_NUM (Table: PROFESSOR) | DEPT_CODE (Table: PROFESSOR) | PROF_OFFICE (Table: PROFESSOR) | PROF_EXTENSION (Table: PROFESSOR) | PROF_HIGH_DEGREE (Table: PROFESSOR) | STU_NUM (Table: STUDENT) | STU_LNAME (Table: STUDENT) | STU_FNAME (Table: STUDENT) | STU_INIT (Table: STUDENT) | STU_DOB (Table: STUDENT) | STU_HRS (Table: STUDENT) | STU_CLASS (Table: STUDENT) | STU_GPA (Table: STUDENT) | STU_TRANSFER (Table: STUDENT) | DEPT_CODE (Table: STUDENT) | STU_PHONE (Table: STUDENT) | PROF_NUM (Table: STUDENT)
What are the low and high estimates of film markets?,"SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",* (Table: film_market_estimation) | Film_ID (Table: film) | Title (Table: film) | Studio (Table: film) | Director (Table: film) | Gross_in_dollar (Table: film) | Market_ID (Table: market) | Country (Table: market) | Number_cities (Table: market) | Estimation_ID (Table: film_market_estimation) | Low_Estimate (Table: film_market_estimation) | High_Estimate (Table: film_market_estimation) | Film_ID (Table: film_market_estimation) | Type (Table: film_market_estimation) | Market_ID (Table: film_market_estimation) | Year (Table: film_market_estimation)
Find all the forenames of distinct drivers who was in position 1 as standing and won?,SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1,* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
Show all artist names and the number of exhibitions for each artist.,"SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id",* (Table: exhibition_record) | Artist_ID (Table: artist) | Name (Table: artist) | Country (Table: artist) | Year_Join (Table: artist) | Age (Table: artist) | Exhibition_ID (Table: exhibition) | Year (Table: exhibition) | Theme (Table: exhibition) | Artist_ID (Table: exhibition) | Ticket_Price (Table: exhibition) | Exhibition_ID (Table: exhibition_record) | Date (Table: exhibition_record) | Attendance (Table: exhibition_record)
"What is the average number of rooms of apartments with type code ""Studio""?","SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  ""Studio""",* (Table: View_Unit_Status) | building_id (Table: Apartment_Buildings) | building_short_name (Table: Apartment_Buildings) | building_full_name (Table: Apartment_Buildings) | building_description (Table: Apartment_Buildings) | building_address (Table: Apartment_Buildings) | building_manager (Table: Apartment_Buildings) | building_phone (Table: Apartment_Buildings) | apt_id (Table: Apartments) | building_id (Table: Apartments) | apt_type_code (Table: Apartments) | apt_number (Table: Apartments) | bathroom_count (Table: Apartments) | bedroom_count (Table: Apartments) | room_count (Table: Apartments) | apt_id (Table: Apartment_Facilities) | facility_code (Table: Apartment_Facilities) | guest_id (Table: Guests) | gender_code (Table: Guests) | guest_first_name (Table: Guests) | guest_last_name (Table: Guests) | date_of_birth (Table: Guests) | apt_booking_id (Table: Apartment_Bookings) | apt_id (Table: Apartment_Bookings) | guest_id (Table: Apartment_Bookings) | booking_status_code (Table: Apartment_Bookings) | booking_start_date (Table: Apartment_Bookings) | booking_end_date (Table: Apartment_Bookings) | apt_id (Table: View_Unit_Status) | apt_booking_id (Table: View_Unit_Status) | status_date (Table: View_Unit_Status) | available_yn (Table: View_Unit_Status)
"What are the names and buildings of the deparments, sorted by budget descending?","SELECT dept_name ,  building FROM department ORDER BY budget DESC",* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
Return the low and high estimates for all film markets.,"SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",* (Table: film_market_estimation) | Film_ID (Table: film) | Title (Table: film) | Studio (Table: film) | Director (Table: film) | Gross_in_dollar (Table: film) | Market_ID (Table: market) | Country (Table: market) | Number_cities (Table: market) | Estimation_ID (Table: film_market_estimation) | Low_Estimate (Table: film_market_estimation) | High_Estimate (Table: film_market_estimation) | Film_ID (Table: film_market_estimation) | Type (Table: film_market_estimation) | Market_ID (Table: film_market_estimation) | Year (Table: film_market_estimation)
"What is the date of enrollment of the course named ""Spanish""?","SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  ""Spanish""",* (Table: Student_Tests_Taken) | author_id (Table: Course_Authors_and_Tutors) | author_tutor_ATB (Table: Course_Authors_and_Tutors) | login_name (Table: Course_Authors_and_Tutors) | password (Table: Course_Authors_and_Tutors) | personal_name (Table: Course_Authors_and_Tutors) | middle_name (Table: Course_Authors_and_Tutors) | family_name (Table: Course_Authors_and_Tutors) | gender_mf (Table: Course_Authors_and_Tutors) | address_line_1 (Table: Course_Authors_and_Tutors) | student_id (Table: Students) | date_of_registration (Table: Students) | date_of_latest_logon (Table: Students) | login_name (Table: Students) | password (Table: Students) | personal_name (Table: Students) | middle_name (Table: Students) | family_name (Table: Students) | subject_id (Table: Subjects) | subject_name (Table: Subjects) | course_id (Table: Courses) | author_id (Table: Courses) | subject_id (Table: Courses) | course_name (Table: Courses) | course_description (Table: Courses) | registration_id (Table: Student_Course_Enrolment) | student_id (Table: Student_Course_Enrolment) | course_id (Table: Student_Course_Enrolment) | date_of_enrolment (Table: Student_Course_Enrolment) | date_of_completion (Table: Student_Course_Enrolment) | registration_id (Table: Student_Tests_Taken) | date_test_taken (Table: Student_Tests_Taken) | test_result (Table: Student_Tests_Taken)
What is the name and open year for the branch with most number of memberships registered in 2016?,"SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",* (Table: purchase) | Member_ID (Table: member) | Card_Number (Table: member) | Name (Table: member) | Hometown (Table: member) | Level (Table: member) | Branch_ID (Table: branch) | Name (Table: branch) | Open_year (Table: branch) | Address_road (Table: branch) | City (Table: branch) | membership_amount (Table: branch) | Member_ID (Table: membership_register_branch) | Branch_ID (Table: membership_register_branch) | Register_Year (Table: membership_register_branch) | Member_ID (Table: purchase) | Branch_ID (Table: purchase) | Year (Table: purchase) | Total_pounds (Table: purchase)
List the authors of submissions in ascending order of scores.,SELECT Author FROM submission ORDER BY Scores ASC,* (Table: Acceptance) | Workshop_ID (Table: workshop) | Date (Table: workshop) | Venue (Table: workshop) | Name (Table: workshop) | Submission_ID (Table: submission) | Scores (Table: submission) | Author (Table: submission) | College (Table: submission) | Submission_ID (Table: Acceptance) | Workshop_ID (Table: Acceptance) | Result (Table: Acceptance)
What campuses are located in Los Angeles county and opened after 1950?,"SELECT campus FROM campuses WHERE county  =  ""Los Angeles"" AND YEAR  >  1950",* (Table: faculty) | Id (Table: Campuses) | Campus (Table: Campuses) | Location (Table: Campuses) | County (Table: Campuses) | Year (Table: Campuses) | Campus (Table: csu_fees) | Year (Table: csu_fees) | CampusFee (Table: csu_fees) | Year (Table: degrees) | Campus (Table: degrees) | Degrees (Table: degrees) | Campus (Table: discipline_enrollments) | Discipline (Table: discipline_enrollments) | Year (Table: discipline_enrollments) | Undergraduate (Table: discipline_enrollments) | Graduate (Table: discipline_enrollments) | Campus (Table: enrollments) | Year (Table: enrollments) | TotalEnrollment_AY (Table: enrollments) | FTE_AY (Table: enrollments) | Campus (Table: faculty) | Year (Table: faculty) | Faculty (Table: faculty)
"What are the names of all people, ordered by their date of birth?",SELECT name FROM people ORDER BY date_of_birth,* (Table: people) | Candidate_ID (Table: candidate) | People_ID (Table: candidate) | Poll_Source (Table: candidate) | Date (Table: candidate) | Support_rate (Table: candidate) | Consider_rate (Table: candidate) | Oppose_rate (Table: candidate) | Unsure_rate (Table: candidate) | People_ID (Table: people) | Sex (Table: people) | Name (Table: people) | Date_of_Birth (Table: people) | Height (Table: people) | Weight (Table: people)
"How many instrument does the musician with last name ""Heilo"" use?","SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  ""Heilo""",* (Table: Vocals) | SongId (Table: Songs) | Title (Table: Songs) | AId (Table: Albums) | Title (Table: Albums) | Year (Table: Albums) | Label (Table: Albums) | Type (Table: Albums) | Id (Table: Band) | Firstname (Table: Band) | Lastname (Table: Band) | SongId (Table: Instruments) | BandmateId (Table: Instruments) | Instrument (Table: Instruments) | SongId (Table: Performance) | Bandmate (Table: Performance) | StagePosition (Table: Performance) | AlbumId (Table: Tracklists) | Position (Table: Tracklists) | SongId (Table: Tracklists) | SongId (Table: Vocals) | Bandmate (Table: Vocals) | Type (Table: Vocals)
"Return the names of cities, ordered alphabetically.",SELECT Name FROM city ORDER BY Name ASC,* (Table: city) | County_ID (Table: county_public_safety) | Name (Table: county_public_safety) | Population (Table: county_public_safety) | Police_officers (Table: county_public_safety) | Residents_per_officer (Table: county_public_safety) | Case_burden (Table: county_public_safety) | Crime_rate (Table: county_public_safety) | Police_force (Table: county_public_safety) | Location (Table: county_public_safety) | City_ID (Table: city) | County_ID (Table: city) | Name (Table: city) | White (Table: city) | Black (Table: city) | Amerindian (Table: city) | Asian (Table: city) | Multiracial (Table: city) | Hispanic (Table: city)
List the project details of the projects with the research outcome described with the substring 'Published'.,SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%',* (Table: Tasks) | document_type_code (Table: Document_Types) | document_description (Table: Document_Types) | document_id (Table: Documents) | document_type_code (Table: Documents) | grant_id (Table: Documents) | sent_date (Table: Documents) | response_received_date (Table: Documents) | other_details (Table: Documents) | grant_id (Table: Grants) | organisation_id (Table: Grants) | grant_amount (Table: Grants) | grant_start_date (Table: Grants) | grant_end_date (Table: Grants) | other_details (Table: Grants) | organisation_type (Table: Organisation_Types) | organisation_type_description (Table: Organisation_Types) | organisation_id (Table: Organisations) | organisation_type (Table: Organisations) | organisation_details (Table: Organisations) | project_id (Table: Project_Outcomes) | outcome_code (Table: Project_Outcomes) | outcome_details (Table: Project_Outcomes) | staff_id (Table: Project_Staff) | project_id (Table: Project_Staff) | role_code (Table: Project_Staff) | date_from (Table: Project_Staff) | date_to (Table: Project_Staff) | other_details (Table: Project_Staff) | project_id (Table: Projects) | organisation_id (Table: Projects) | project_details (Table: Projects) | outcome_code (Table: Research_Outcomes) | outcome_description (Table: Research_Outcomes) | staff_id (Table: Research_Staff) | employer_organisation_id (Table: Research_Staff) | staff_details (Table: Research_Staff) | role_code (Table: Staff_Roles) | role_description (Table: Staff_Roles) | task_id (Table: Tasks) | project_id (Table: Tasks) | task_details (Table: Tasks) | eg Agree Objectives (Table: Tasks)
Which customer had at least 2 policies but did not file any claims? List the customer details and id.,"SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id",* (Table: Payments) | Customer_ID (Table: Customers) | Customer_Details (Table: Customers) | Policy_ID (Table: Customer_Policies) | Customer_ID (Table: Customer_Policies) | Policy_Type_Code (Table: Customer_Policies) | Start_Date (Table: Customer_Policies) | End_Date (Table: Customer_Policies) | Claim_ID (Table: Claims) | Policy_ID (Table: Claims) | Date_Claim_Made (Table: Claims) | Date_Claim_Settled (Table: Claims) | Amount_Claimed (Table: Claims) | Amount_Settled (Table: Claims) | Settlement_ID (Table: Settlements) | Claim_ID (Table: Settlements) | Date_Claim_Made (Table: Settlements) | Date_Claim_Settled (Table: Settlements) | Amount_Claimed (Table: Settlements) | Amount_Settled (Table: Settlements) | Customer_Policy_ID (Table: Settlements) | Payment_ID (Table: Payments) | Settlement_ID (Table: Payments) | Payment_Method_Code (Table: Payments) | Date_Payment_Made (Table: Payments) | Amount_Payment (Table: Payments)
"What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?","SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name",* (Table: AssignedTo) | SSN (Table: Scientists) | Name (Table: Scientists) | Code (Table: Projects) | Name (Table: Projects) | Hours (Table: Projects) | Scientist (Table: AssignedTo) | Project (Table: AssignedTo)
What are the distinct buildings with capacities of greater than 50?,SELECT DISTINCT building FROM classroom WHERE capacity  >  50,* (Table: prereq) | building (Table: classroom) | room_number (Table: classroom) | capacity (Table: classroom) | dept_name (Table: department) | building (Table: department) | budget (Table: department) | course_id (Table: course) | title (Table: course) | dept_name (Table: course) | credits (Table: course) | ID (Table: instructor) | name (Table: instructor) | dept_name (Table: instructor) | salary (Table: instructor) | course_id (Table: section) | sec_id (Table: section) | semester (Table: section) | year (Table: section) | building (Table: section) | room_number (Table: section) | time_slot_id (Table: section) | ID (Table: teaches) | course_id (Table: teaches) | sec_id (Table: teaches) | semester (Table: teaches) | year (Table: teaches) | ID (Table: student) | name (Table: student) | dept_name (Table: student) | tot_cred (Table: student) | ID (Table: takes) | course_id (Table: takes) | sec_id (Table: takes) | semester (Table: takes) | year (Table: takes) | grade (Table: takes) | s_ID (Table: advisor) | i_ID (Table: advisor) | time_slot_id (Table: time_slot) | day (Table: time_slot) | start_hr (Table: time_slot) | start_min (Table: time_slot) | end_hr (Table: time_slot) | end_min (Table: time_slot) | course_id (Table: prereq) | prereq_id (Table: prereq)
What is the highest elevation of an airport in the country of Iceland?,SELECT max(elevation) FROM airports WHERE country  =  'Iceland',* (Table: airlines) | rid (Table: routes) | dst_apid (Table: routes) | dst_ap (Table: routes) | src_apid (Table: routes) | src_ap (Table: routes) | alid (Table: routes) | airline (Table: routes) | codeshare (Table: routes) | apid (Table: airports) | name (Table: airports) | city (Table: airports) | country (Table: airports) | x (Table: airports) | y (Table: airports) | elevation (Table: airports) | iata (Table: airports) | icao (Table: airports) | alid (Table: airlines) | name (Table: airlines) | iata (Table: airlines) | icao (Table: airlines) | callsign (Table: airlines) | country (Table: airlines) | active (Table: airlines)
Find the name of the user who gives the most reviews.,SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1,* (Table: trust) | i_id (Table: item) | title (Table: item) | a_id (Table: review) | u_id (Table: review) | i_id (Table: review) | rating (Table: review) | rank (Table: review) | u_id (Table: useracct) | name (Table: useracct) | source_u_id (Table: trust) | target_u_id (Table: trust) | trust (Table: trust)
"Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.","SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars",* (Table: Rating) | mID (Table: Movie) | title (Table: Movie) | year (Table: Movie) | director (Table: Movie) | rID (Table: Reviewer) | name (Table: Reviewer) | rID (Table: Rating) | mID (Table: Rating) | stars (Table: Rating) | ratingDate (Table: Rating)
What are the names and type codes of products?,"SELECT Product_Name ,  Product_Type_Code FROM Products",* (Table: Assets_in_Events) | Address_ID (Table: Addresses) | address_details (Table: Addresses) | Location_ID (Table: Locations) | Other_Details (Table: Locations) | Product_ID (Table: Products) | Product_Type_Code (Table: Products) | Product_Name (Table: Products) | Product_Price (Table: Products) | Party_ID (Table: Parties) | Party_Details (Table: Parties) | Asset_ID (Table: Assets) | Other_Details (Table: Assets) | Channel_ID (Table: Channels) | Other_Details (Table: Channels) | Finance_ID (Table: Finances) | Other_Details (Table: Finances) | Event_ID (Table: Events) | Address_ID (Table: Events) | Channel_ID (Table: Events) | Event_Type_Code (Table: Events) | Finance_ID (Table: Events) | Location_ID (Table: Events) | Product_in_Event_ID (Table: Products_in_Events) | Event_ID (Table: Products_in_Events) | Product_ID (Table: Products_in_Events) | Party_ID (Table: Parties_in_Events) | Event_ID (Table: Parties_in_Events) | Role_Code (Table: Parties_in_Events) | Document_ID (Table: Agreements) | Event_ID (Table: Agreements) | Asset_ID (Table: Assets_in_Events) | Event_ID (Table: Assets_in_Events)
How many distinct order ids correspond to each product?,"SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",* (Table: Invoice_Line_Items) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_middle_initial (Table: Customers) | customer_last_name (Table: Customers) | gender (Table: Customers) | email_address (Table: Customers) | login_name (Table: Customers) | login_password (Table: Customers) | phone_number (Table: Customers) | town_city (Table: Customers) | state_county_province (Table: Customers) | country (Table: Customers) | order_id (Table: Orders) | customer_id (Table: Orders) | date_order_placed (Table: Orders) | order_details (Table: Orders) | invoice_number (Table: Invoices) | order_id (Table: Invoices) | invoice_date (Table: Invoices) | account_id (Table: Accounts) | customer_id (Table: Accounts) | date_account_opened (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | production_type_code (Table: Product_Categories) | product_type_description (Table: Product_Categories) | vat_rating (Table: Product_Categories) | product_id (Table: Products) | parent_product_id (Table: Products) | production_type_code (Table: Products) | unit_price (Table: Products) | product_name (Table: Products) | product_color (Table: Products) | product_size (Table: Products) | transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | invoice_number (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions) | order_item_id (Table: Order_Items) | order_id (Table: Order_Items) | product_id (Table: Order_Items) | product_quantity (Table: Order_Items) | other_order_item_details (Table: Order_Items) | order_item_id (Table: Invoice_Line_Items) | invoice_number (Table: Invoice_Line_Items) | product_id (Table: Invoice_Line_Items) | product_title (Table: Invoice_Line_Items) | product_quantity (Table: Invoice_Line_Items) | product_price (Table: Invoice_Line_Items) | derived_product_cost (Table: Invoice_Line_Items) | derived_vat_payable (Table: Invoice_Line_Items) | derived_total_cost (Table: Invoice_Line_Items)
What is minimum age for different job title?,"SELECT min(age) ,  job FROM Person GROUP BY job",* (Table: PersonFriend) | name (Table: Person) | age (Table: Person) | city (Table: Person) | gender (Table: Person) | job (Table: Person) | name (Table: PersonFriend) | friend (Table: PersonFriend) | year (Table: PersonFriend)
What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?,SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' ),* (Table: store) | actor_id (Table: actor) | first_name (Table: actor) | last_name (Table: actor) | last_update (Table: actor) | address_id (Table: address) | address (Table: address) | address2 (Table: address) | district (Table: address) | city_id (Table: address) | postal_code (Table: address) | phone (Table: address) | last_update (Table: address) | category_id (Table: category) | name (Table: category) | last_update (Table: category) | city_id (Table: city) | city (Table: city) | country_id (Table: city) | last_update (Table: city) | country_id (Table: country) | country (Table: country) | last_update (Table: country) | customer_id (Table: customer) | store_id (Table: customer) | first_name (Table: customer) | last_name (Table: customer) | email (Table: customer) | address_id (Table: customer) | active (Table: customer) | create_date (Table: customer) | last_update (Table: customer) | film_id (Table: film) | title (Table: film) | description (Table: film) | release_year (Table: film) | language_id (Table: film) | original_language_id (Table: film) | rental_duration (Table: film) | rental_rate (Table: film) | length (Table: film) | replacement_cost (Table: film) | rating (Table: film) | special_features (Table: film) | last_update (Table: film) | actor_id (Table: film_actor) | film_id (Table: film_actor) | last_update (Table: film_actor) | film_id (Table: film_category) | category_id (Table: film_category) | last_update (Table: film_category) | film_id (Table: film_text) | title (Table: film_text) | description (Table: film_text) | inventory_id (Table: inventory) | film_id (Table: inventory) | store_id (Table: inventory) | last_update (Table: inventory) | language_id (Table: language) | name (Table: language) | last_update (Table: language) | payment_id (Table: payment) | customer_id (Table: payment) | staff_id (Table: payment) | rental_id (Table: payment) | amount (Table: payment) | payment_date (Table: payment) | last_update (Table: payment) | rental_id (Table: rental) | rental_date (Table: rental) | inventory_id (Table: rental) | customer_id (Table: rental) | return_date (Table: rental) | staff_id (Table: rental) | last_update (Table: rental) | staff_id (Table: staff) | first_name (Table: staff) | last_name (Table: staff) | address_id (Table: staff) | picture (Table: staff) | email (Table: staff) | store_id (Table: staff) | active (Table: staff) | username (Table: staff) | password (Table: staff) | last_update (Table: staff) | store_id (Table: store) | manager_staff_id (Table: store) | address_id (Table: store) | last_update (Table: store)
"List the hardware model name and company name for the phone whose screen mode type is ""Graphics.""","SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  ""Graphics"";",* (Table: phone) | Model_name (Table: chip_model) | Launch_year (Table: chip_model) | RAM_MiB (Table: chip_model) | ROM_MiB (Table: chip_model) | Slots (Table: chip_model) | WiFi (Table: chip_model) | Bluetooth (Table: chip_model) | Graphics_mode (Table: screen_mode) | Char_cells (Table: screen_mode) | Pixels (Table: screen_mode) | Hardware_colours (Table: screen_mode) | used_kb (Table: screen_mode) | map (Table: screen_mode) | Type (Table: screen_mode) | Company_name (Table: phone) | Hardware_Model_name (Table: phone) | Accreditation_type (Table: phone) | Accreditation_level (Table: phone) | Date (Table: phone) | chip_model (Table: phone) | screen_mode (Table: phone)
Show the station name with at least two trains.,SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2,* (Table: train_station) | Station_ID (Table: station) | Name (Table: station) | Annual_entry_exit (Table: station) | Annual_interchanges (Table: station) | Total_Passengers (Table: station) | Location (Table: station) | Main_Services (Table: station) | Number_of_Platforms (Table: station) | Train_ID (Table: train) | Name (Table: train) | Time (Table: train) | Service (Table: train) | Train_ID (Table: train_station) | Station_ID (Table: train_station)
"What are the average prices of products, grouped by manufacturer name?","SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",* (Table: Products) | Code (Table: Manufacturers) | Name (Table: Manufacturers) | Headquarter (Table: Manufacturers) | Founder (Table: Manufacturers) | Revenue (Table: Manufacturers) | Code (Table: Products) | Name (Table: Products) | Price (Table: Products) | Manufacturer (Table: Products)
What are the names of regions that were not affected?,SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region),* (Table: affected_region) | Storm_ID (Table: storm) | Name (Table: storm) | Dates_active (Table: storm) | Max_speed (Table: storm) | Damage_millions_USD (Table: storm) | Number_Deaths (Table: storm) | Region_id (Table: region) | Region_code (Table: region) | Region_name (Table: region) | Region_id (Table: affected_region) | Storm_ID (Table: affected_region) | Number_city_affected (Table: affected_region)
Compute the average salary of the players in the team called 'Boston Red Stockings'.,SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings',* (Table: team_half) | player_id (Table: all_star) | year (Table: all_star) | game_num (Table: all_star) | game_id (Table: all_star) | team_id (Table: all_star) | league_id (Table: all_star) | gp (Table: all_star) | starting_pos (Table: all_star) | year (Table: appearances) | team_id (Table: appearances) | league_id (Table: appearances) | player_id (Table: appearances) | g_all (Table: appearances) | gs (Table: appearances) | g_batting (Table: appearances) | g_defense (Table: appearances) | g_p (Table: appearances) | g_c (Table: appearances) | g_1b (Table: appearances) | g_2b (Table: appearances) | g_3b (Table: appearances) | g_ss (Table: appearances) | g_lf (Table: appearances) | g_cf (Table: appearances) | g_rf (Table: appearances) | g_of (Table: appearances) | g_dh (Table: appearances) | g_ph (Table: appearances) | g_pr (Table: appearances) | player_id (Table: manager_award) | award_id (Table: manager_award) | year (Table: manager_award) | league_id (Table: manager_award) | tie (Table: manager_award) | notes (Table: manager_award) | player_id (Table: player_award) | award_id (Table: player_award) | year (Table: player_award) | league_id (Table: player_award) | tie (Table: player_award) | notes (Table: player_award) | award_id (Table: manager_award_vote) | year (Table: manager_award_vote) | league_id (Table: manager_award_vote) | player_id (Table: manager_award_vote) | points_won (Table: manager_award_vote) | points_max (Table: manager_award_vote) | votes_first (Table: manager_award_vote) | award_id (Table: player_award_vote) | year (Table: player_award_vote) | league_id (Table: player_award_vote) | player_id (Table: player_award_vote) | points_won (Table: player_award_vote) | points_max (Table: player_award_vote) | votes_first (Table: player_award_vote) | player_id (Table: batting) | year (Table: batting) | stint (Table: batting) | team_id (Table: batting) | league_id (Table: batting) | g (Table: batting) | ab (Table: batting) | r (Table: batting) | h (Table: batting) | double (Table: batting) | triple (Table: batting) | hr (Table: batting) | rbi (Table: batting) | sb (Table: batting) | cs (Table: batting) | bb (Table: batting) | so (Table: batting) | ibb (Table: batting) | hbp (Table: batting) | sh (Table: batting) | sf (Table: batting) | g_idp (Table: batting) | year (Table: batting_postseason) | round (Table: batting_postseason) | player_id (Table: batting_postseason) | team_id (Table: batting_postseason) | league_id (Table: batting_postseason) | g (Table: batting_postseason) | ab (Table: batting_postseason) | r (Table: batting_postseason) | h (Table: batting_postseason) | double (Table: batting_postseason) | triple (Table: batting_postseason) | hr (Table: batting_postseason) | rbi (Table: batting_postseason) | sb (Table: batting_postseason) | cs (Table: batting_postseason) | bb (Table: batting_postseason) | so (Table: batting_postseason) | ibb (Table: batting_postseason) | hbp (Table: batting_postseason) | sh (Table: batting_postseason) | sf (Table: batting_postseason) | g_idp (Table: batting_postseason) | player_id (Table: player_college) | college_id (Table: player_college) | year (Table: player_college) | player_id (Table: fielding) | year (Table: fielding) | stint (Table: fielding) | team_id (Table: fielding) | league_id (Table: fielding) | pos (Table: fielding) | g (Table: fielding) | gs (Table: fielding) | inn_outs (Table: fielding) | po (Table: fielding) | a (Table: fielding) | e (Table: fielding) | dp (Table: fielding) | pb (Table: fielding) | wp (Table: fielding) | sb (Table: fielding) | cs (Table: fielding) | zr (Table: fielding) | player_id (Table: fielding_outfield) | year (Table: fielding_outfield) | stint (Table: fielding_outfield) | glf (Table: fielding_outfield) | gcf (Table: fielding_outfield) | grf (Table: fielding_outfield) | player_id (Table: fielding_postseason) | year (Table: fielding_postseason) | team_id (Table: fielding_postseason) | league_id (Table: fielding_postseason) | round (Table: fielding_postseason) | pos (Table: fielding_postseason) | g (Table: fielding_postseason) | gs (Table: fielding_postseason) | inn_outs (Table: fielding_postseason) | po (Table: fielding_postseason) | a (Table: fielding_postseason) | e (Table: fielding_postseason) | dp (Table: fielding_postseason) | tp (Table: fielding_postseason) | pb (Table: fielding_postseason) | sb (Table: fielding_postseason) | cs (Table: fielding_postseason) | player_id (Table: hall_of_fame) | yearid (Table: hall_of_fame) | votedby (Table: hall_of_fame) | ballots (Table: hall_of_fame) | needed (Table: hall_of_fame) | votes (Table: hall_of_fame) | inducted (Table: hall_of_fame) | category (Table: hall_of_fame) | needed_note (Table: hall_of_fame) | year (Table: home_game) | league_id (Table: home_game) | team_id (Table: home_game) | park_id (Table: home_game) | span_first (Table: home_game) | span_last (Table: home_game) | games (Table: home_game) | openings (Table: home_game) | attendance (Table: home_game) | player_id (Table: manager) | year (Table: manager) | team_id (Table: manager) | league_id (Table: manager) | inseason (Table: manager) | g (Table: manager) | w (Table: manager) | l (Table: manager) | rank (Table: manager) | plyr_mgr (Table: manager) | player_id (Table: manager_half) | year (Table: manager_half) | team_id (Table: manager_half) | league_id (Table: manager_half) | inseason (Table: manager_half) | half (Table: manager_half) | g (Table: manager_half) | w (Table: manager_half) | l (Table: manager_half) | rank (Table: manager_half) | player_id (Table: player) | birth_year (Table: player) | birth_month (Table: player) | birth_day (Table: player) | birth_country (Table: player) | birth_state (Table: player) | birth_city (Table: player) | death_year (Table: player) | death_month (Table: player) | death_day (Table: player) | death_country (Table: player) | death_state (Table: player) | death_city (Table: player) | name_first (Table: player) | name_last (Table: player) | name_given (Table: player) | weight (Table: player) | height (Table: player) | bats (Table: player) | throws (Table: player) | debut (Table: player) | final_game (Table: player) | retro_id (Table: player) | bbref_id (Table: player) | park_id (Table: park) | park_name (Table: park) | park_alias (Table: park) | city (Table: park) | state (Table: park) | country (Table: park) | player_id (Table: pitching) | year (Table: pitching) | stint (Table: pitching) | team_id (Table: pitching) | league_id (Table: pitching) | w (Table: pitching) | l (Table: pitching) | g (Table: pitching) | gs (Table: pitching) | cg (Table: pitching) | sho (Table: pitching) | sv (Table: pitching) | ipouts (Table: pitching) | h (Table: pitching) | er (Table: pitching) | hr (Table: pitching) | bb (Table: pitching) | so (Table: pitching) | baopp (Table: pitching) | era (Table: pitching) | ibb (Table: pitching) | wp (Table: pitching) | hbp (Table: pitching) | bk (Table: pitching) | bfp (Table: pitching) | gf (Table: pitching) | r (Table: pitching) | sh (Table: pitching) | sf (Table: pitching) | g_idp (Table: pitching) | player_id (Table: pitching_postseason) | year (Table: pitching_postseason) | round (Table: pitching_postseason) | team_id (Table: pitching_postseason) | league_id (Table: pitching_postseason) | w (Table: pitching_postseason) | l (Table: pitching_postseason) | g (Table: pitching_postseason) | gs (Table: pitching_postseason) | cg (Table: pitching_postseason) | sho (Table: pitching_postseason) | sv (Table: pitching_postseason) | ipouts (Table: pitching_postseason) | h (Table: pitching_postseason) | er (Table: pitching_postseason) | hr (Table: pitching_postseason) | bb (Table: pitching_postseason) | so (Table: pitching_postseason) | baopp (Table: pitching_postseason) | era (Table: pitching_postseason) | ibb (Table: pitching_postseason) | wp (Table: pitching_postseason) | hbp (Table: pitching_postseason) | bk (Table: pitching_postseason) | bfp (Table: pitching_postseason) | gf (Table: pitching_postseason) | r (Table: pitching_postseason) | sh (Table: pitching_postseason) | sf (Table: pitching_postseason) | g_idp (Table: pitching_postseason) | year (Table: salary) | team_id (Table: salary) | league_id (Table: salary) | player_id (Table: salary) | salary (Table: salary) | college_id (Table: college) | name_full (Table: college) | city (Table: college) | state (Table: college) | country (Table: college) | year (Table: postseason) | round (Table: postseason) | team_id_winner (Table: postseason) | league_id_winner (Table: postseason) | team_id_loser (Table: postseason) | league_id_loser (Table: postseason) | wins (Table: postseason) | losses (Table: postseason) | ties (Table: postseason) | year (Table: team) | league_id (Table: team) | team_id (Table: team) | franchise_id (Table: team) | div_id (Table: team) | rank (Table: team) | g (Table: team) | ghome (Table: team) | w (Table: team) | l (Table: team) | div_win (Table: team) | wc_win (Table: team) | lg_win (Table: team) | ws_win (Table: team) | r (Table: team) | ab (Table: team) | h (Table: team) | double (Table: team) | triple (Table: team) | hr (Table: team) | bb (Table: team) | so (Table: team) | sb (Table: team) | cs (Table: team) | hbp (Table: team) | sf (Table: team) | ra (Table: team) | er (Table: team) | era (Table: team) | cg (Table: team) | sho (Table: team) | sv (Table: team) | ipouts (Table: team) | ha (Table: team) | hra (Table: team) | bba (Table: team) | soa (Table: team) | e (Table: team) | dp (Table: team) | fp (Table: team) | name (Table: team) | park (Table: team) | attendance (Table: team) | bpf (Table: team) | ppf (Table: team) | team_id_br (Table: team) | team_id_lahman45 (Table: team) | team_id_retro (Table: team) | franchise_id (Table: team_franchise) | franchise_name (Table: team_franchise) | active (Table: team_franchise) | na_assoc (Table: team_franchise) | year (Table: team_half) | league_id (Table: team_half) | team_id (Table: team_half) | half (Table: team_half) | div_id (Table: team_half) | div_win (Table: team_half) | rank (Table: team_half) | g (Table: team_half) | w (Table: team_half) | l (Table: team_half)
What are the names of wines that are more expensive then all wines made in the year 2006?,SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006),* (Table: wine) | ID (Table: grapes) | Grape (Table: grapes) | Color (Table: grapes) | No (Table: appellations) | Appelation (Table: appellations) | County (Table: appellations) | State (Table: appellations) | Area (Table: appellations) | isAVA (Table: appellations) | No (Table: wine) | Grape (Table: wine) | Winery (Table: wine) | Appelation (Table: wine) | State (Table: wine) | Name (Table: wine) | Year (Table: wine) | Price (Table: wine) | Score (Table: wine) | Cases (Table: wine) | Drink (Table: wine)
What is the average number of years spent working as a journalist?,SELECT avg(Years_working) FROM journalist,* (Table: news_report) | Event_ID (Table: event) | Date (Table: event) | Venue (Table: event) | Name (Table: event) | Event_Attendance (Table: event) | journalist_ID (Table: journalist) | Name (Table: journalist) | Nationality (Table: journalist) | Age (Table: journalist) | Years_working (Table: journalist) | journalist_ID (Table: news_report) | Event_ID (Table: news_report) | Work_Type (Table: news_report)
How many universities have a location that contains NY?,"SELECT count(*) FROM university WHERE LOCATION LIKE ""%NY%""",* (Table: university) | Team_ID (Table: basketball_match) | School_ID (Table: basketball_match) | Team_Name (Table: basketball_match) | ACC_Regular_Season (Table: basketball_match) | ACC_Percent (Table: basketball_match) | ACC_Home (Table: basketball_match) | ACC_Road (Table: basketball_match) | All_Games (Table: basketball_match) | All_Games_Percent (Table: basketball_match) | All_Home (Table: basketball_match) | All_Road (Table: basketball_match) | All_Neutral (Table: basketball_match) | School_ID (Table: university) | School (Table: university) | Location (Table: university) | Founded (Table: university) | Affiliation (Table: university) | Enrollment (Table: university) | Nickname (Table: university) | Primary_conference (Table: university)
Sort all captain names by their ages from old to young.,SELECT name FROM captain ORDER BY age DESC,* (Table: Ship) | Captain_ID (Table: captain) | Name (Table: captain) | Ship_ID (Table: captain) | age (Table: captain) | Class (Table: captain) | Rank (Table: captain) | Ship_ID (Table: Ship) | Name (Table: Ship) | Type (Table: Ship) | Built_Year (Table: Ship) | Class (Table: Ship) | Flag (Table: Ship)
What are the locations of all the gas stations ordered by opening year?,SELECT LOCATION FROM gas_station ORDER BY open_year,* (Table: station_company) | Company_ID (Table: company) | Rank (Table: company) | Company (Table: company) | Headquarters (Table: company) | Main_Industry (Table: company) | Sales_billion (Table: company) | Profits_billion (Table: company) | Assets_billion (Table: company) | Market_Value (Table: company) | Station_ID (Table: gas_station) | Open_Year (Table: gas_station) | Location (Table: gas_station) | Manager_Name (Table: gas_station) | Vice_Manager_Name (Table: gas_station) | Representative_Name (Table: gas_station) | Station_ID (Table: station_company) | Company_ID (Table: station_company) | Rank_of_the_Year (Table: station_company)
How many customers do we have?,SELECT count(*) FROM Customers,* (Table: Financial_Transactions) | account_id (Table: Accounts) | customer_id (Table: Accounts) | account_name (Table: Accounts) | other_account_details (Table: Accounts) | customer_id (Table: Customers) | customer_first_name (Table: Customers) | customer_last_name (Table: Customers) | customer_address (Table: Customers) | customer_phone (Table: Customers) | customer_email (Table: Customers) | other_customer_details (Table: Customers) | card_id (Table: Customers_Cards) | customer_id (Table: Customers_Cards) | card_type_code (Table: Customers_Cards) | card_number (Table: Customers_Cards) | date_valid_from (Table: Customers_Cards) | date_valid_to (Table: Customers_Cards) | other_card_details (Table: Customers_Cards) | transaction_id (Table: Financial_Transactions) | previous_transaction_id (Table: Financial_Transactions) | account_id (Table: Financial_Transactions) | card_id (Table: Financial_Transactions) | transaction_type (Table: Financial_Transactions) | transaction_date (Table: Financial_Transactions) | transaction_amount (Table: Financial_Transactions) | transaction_comment (Table: Financial_Transactions) | other_transaction_details (Table: Financial_Transactions)
Find the number of students who are older than 18 and do not have allergy to either food or animal.,"SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  ""food"" OR T2.allergytype  =  ""animal"")",* (Table: Student) | Allergy (Table: Allergy_Type) | AllergyType (Table: Allergy_Type) | StuID (Table: Has_Allergy) | Allergy (Table: Has_Allergy) | StuID (Table: Student) | LName (Table: Student) | Fname (Table: Student) | Age (Table: Student) | Sex (Table: Student) | Major (Table: Student) | Advisor (Table: Student) | city_code (Table: Student)
How many faculty members are at the university that gave the least number of degrees in 2001?,SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1,* (Table: faculty) | Id (Table: Campuses) | Campus (Table: Campuses) | Location (Table: Campuses) | County (Table: Campuses) | Year (Table: Campuses) | Campus (Table: csu_fees) | Year (Table: csu_fees) | CampusFee (Table: csu_fees) | Year (Table: degrees) | Campus (Table: degrees) | Degrees (Table: degrees) | Campus (Table: discipline_enrollments) | Discipline (Table: discipline_enrollments) | Year (Table: discipline_enrollments) | Undergraduate (Table: discipline_enrollments) | Graduate (Table: discipline_enrollments) | Campus (Table: enrollments) | Year (Table: enrollments) | TotalEnrollment_AY (Table: enrollments) | FTE_AY (Table: enrollments) | Campus (Table: faculty) | Year (Table: faculty) | Faculty (Table: faculty)
"For each constructor id, how many races are there?","SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",* (Table: lapTimes) | circuitId (Table: circuits) | circuitRef (Table: circuits) | name (Table: circuits) | location (Table: circuits) | country (Table: circuits) | lat (Table: circuits) | lng (Table: circuits) | alt (Table: circuits) | url (Table: circuits) | raceId (Table: races) | year (Table: races) | round (Table: races) | circuitId (Table: races) | name (Table: races) | date (Table: races) | time (Table: races) | url (Table: races) | driverId (Table: drivers) | driverRef (Table: drivers) | number (Table: drivers) | code (Table: drivers) | forename (Table: drivers) | surname (Table: drivers) | dob (Table: drivers) | nationality (Table: drivers) | url (Table: drivers) | statusId (Table: status) | status (Table: status) | year (Table: seasons) | url (Table: seasons) | constructorId (Table: constructors) | constructorRef (Table: constructors) | name (Table: constructors) | nationality (Table: constructors) | url (Table: constructors) | constructorStandingsId (Table: constructorStandings) | raceId (Table: constructorStandings) | constructorId (Table: constructorStandings) | points (Table: constructorStandings) | position (Table: constructorStandings) | positionText (Table: constructorStandings) | wins (Table: constructorStandings) | resultId (Table: results) | raceId (Table: results) | driverId (Table: results) | constructorId (Table: results) | number (Table: results) | grid (Table: results) | position (Table: results) | positionText (Table: results) | positionOrder (Table: results) | points (Table: results) | laps (Table: results) | time (Table: results) | milliseconds (Table: results) | fastestLap (Table: results) | rank (Table: results) | fastestLapTime (Table: results) | fastestLapSpeed (Table: results) | statusId (Table: results) | driverStandingsId (Table: driverStandings) | raceId (Table: driverStandings) | driverId (Table: driverStandings) | points (Table: driverStandings) | position (Table: driverStandings) | positionText (Table: driverStandings) | wins (Table: driverStandings) | constructorResultsId (Table: constructorResults) | raceId (Table: constructorResults) | constructorId (Table: constructorResults) | points (Table: constructorResults) | status (Table: constructorResults) | qualifyId (Table: qualifying) | raceId (Table: qualifying) | driverId (Table: qualifying) | constructorId (Table: qualifying) | number (Table: qualifying) | position (Table: qualifying) | q1 (Table: qualifying) | q2 (Table: qualifying) | q3 (Table: qualifying) | raceId (Table: pitStops) | driverId (Table: pitStops) | stop (Table: pitStops) | lap (Table: pitStops) | time (Table: pitStops) | duration (Table: pitStops) | milliseconds (Table: pitStops) | raceId (Table: lapTimes) | driverId (Table: lapTimes) | lap (Table: lapTimes) | position (Table: lapTimes) | time (Table: lapTimes) | milliseconds (Table: lapTimes)
List the names of editors who are older than 25.,SELECT Name FROM editor WHERE Age  >  25,* (Table: journal_committee) | Journal_ID (Table: journal) | Date (Table: journal) | Theme (Table: journal) | Sales (Table: journal) | Editor_ID (Table: editor) | Name (Table: editor) | Age (Table: editor) | Editor_ID (Table: journal_committee) | Journal_ID (Table: journal_committee) | Work_Type (Table: journal_committee)
What is the official name and status of the city with the most residents?,"SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",* (Table: competition_record) | City_ID (Table: city) | Official_Name (Table: city) | Status (Table: city) | Area_km_2 (Table: city) | Population (Table: city) | Census_Ranking (Table: city) | Farm_ID (Table: farm) | Year (Table: farm) | Total_Horses (Table: farm) | Working_Horses (Table: farm) | Total_Cattle (Table: farm) | Oxen (Table: farm) | Bulls (Table: farm) | Cows (Table: farm) | Pigs (Table: farm) | Sheep_and_Goats (Table: farm) | Competition_ID (Table: farm_competition) | Year (Table: farm_competition) | Theme (Table: farm_competition) | Host_city_ID (Table: farm_competition) | Hosts (Table: farm_competition) | Competition_ID (Table: competition_record) | Farm_ID (Table: competition_record) | Rank (Table: competition_record)
